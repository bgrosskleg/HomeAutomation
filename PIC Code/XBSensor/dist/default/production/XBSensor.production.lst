

Microchip Technology PIC LITE Macro Assembler V1.21 build 54009 
                                                                                               Sat Feb 01 23:03:52 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	text22,local,class=CODE,merge=1,delta=2
    34                           	psect	text23,local,class=CODE,merge=1,delta=2
    35                           	psect	text24,local,class=CODE,merge=1,delta=2
    36                           	psect	text25,local,class=CODE,merge=1,delta=2
    37                           	psect	text26,local,class=CODE,merge=1,delta=2
    38                           	dabs	1,0x7E,2
    39  0000                     	;# 
    40  0001                     	;# 
    41  0002                     	;# 
    42  0003                     	;# 
    43  0004                     	;# 
    44  0005                     	;# 
    45  0006                     	;# 
    46  0007                     	;# 
    47  0009                     	;# 
    48  000A                     	;# 
    49  000B                     	;# 
    50  000C                     	;# 
    51  000D                     	;# 
    52  000E                     	;# 
    53  000E                     	;# 
    54  000F                     	;# 
    55  0010                     	;# 
    56  0011                     	;# 
    57  0012                     	;# 
    58  0013                     	;# 
    59  0014                     	;# 
    60  0015                     	;# 
    61  0015                     	;# 
    62  0016                     	;# 
    63  0017                     	;# 
    64  0018                     	;# 
    65  0019                     	;# 
    66  001A                     	;# 
    67  001B                     	;# 
    68  001B                     	;# 
    69  001C                     	;# 
    70  001D                     	;# 
    71  001E                     	;# 
    72  001F                     	;# 
    73  0081                     	;# 
    74  0085                     	;# 
    75  0086                     	;# 
    76  0087                     	;# 
    77  0089                     	;# 
    78  008C                     	;# 
    79  008D                     	;# 
    80  008E                     	;# 
    81  008F                     	;# 
    82  0090                     	;# 
    83  0091                     	;# 
    84  0092                     	;# 
    85  0093                     	;# 
    86  0093                     	;# 
    87  0093                     	;# 
    88  0094                     	;# 
    89  0095                     	;# 
    90  0096                     	;# 
    91  0097                     	;# 
    92  0098                     	;# 
    93  0099                     	;# 
    94  009A                     	;# 
    95  009B                     	;# 
    96  009C                     	;# 
    97  009D                     	;# 
    98  009E                     	;# 
    99  009F                     	;# 
   100  0105                     	;# 
   101  0107                     	;# 
   102  0108                     	;# 
   103  0109                     	;# 
   104  010C                     	;# 
   105  010C                     	;# 
   106  010D                     	;# 
   107  010E                     	;# 
   108  010F                     	;# 
   109  0185                     	;# 
   110  0187                     	;# 
   111  0188                     	;# 
   112  0189                     	;# 
   113  018C                     	;# 
   114  018D                     	;# 
   115                           
   116                           	psect	strings
   117  0003                     __pstrings:	
   118  0003                     stringtab:	
   119  0003                     __stringtab:	
   120                           
   121                           ;	String table - string pointers are 1 byte each
   122  0003  1BFF               	btfsc	btemp+1,7
   123  0004  280D               	ljmp	stringcode
   124  0005  1383               	bcf	3,7
   125  0006  187F               	btfsc	btemp+1,0
   126  0007  1783               	bsf	3,7
   127  0008  0800               	movf	0,w
   128  0009  0A84               	incf	4,f
   129  000A  1903               	skipnz
   130  000B  0AFF               	incf	btemp+1,f
   131  000C  0008               	return
   132  000D                     stringcode:	
   133  000D                     stringdir:	
   134  000D  3000               	movlw	high stringdir
   135  000E  008A               	movwf	10
   136  000F  0804               	movf	4,w
   137  0010  0A84               	incf	4,f
   138  0011  0782               	addwf	2,f
   139  0012                     __stringbase:	
   140  0012  3400               	retlw	0
   141  0013                     __end_of__stringtab:	
   142  0013                     _dpowers:	
   143  0013  3401               	retlw	1
   144  0014  3400               	retlw	0
   145  0015  340A               	retlw	10
   146  0016  3400               	retlw	0
   147  0017  3464               	retlw	100
   148  0018  3400               	retlw	0
   149  0019  34E8               	retlw	232
   150  001A  3403               	retlw	3
   151  001B  3410               	retlw	16
   152  001C  3427               	retlw	39
   153  001D                     __end_of_dpowers:	
   154  0005                     _PORTA	set	5
   155  0006                     _PORTB	set	6
   156  0007                     _PORTC	set	7
   157  001A                     _RCREG	set	26
   158  0019                     _TXREG	set	25
   159  00C4                     _CREN	set	196
   160  00C2                     _FERR	set	194
   161  005F                     _GIE	set	95
   162  00C1                     _OERR	set	193
   163  0065                     _RCIF	set	101
   164  00C6                     _RX9	set	198
   165  00C7                     _SPEN	set	199
   166  0064                     _TXIF	set	100
   167  0081                     _OPTION_REG	set	129
   168  009D                     _PSTRCON	set	157
   169  0099                     _SPBRG	set	153
   170  009A                     _SPBRGH	set	154
   171  0085                     _TRISA	set	133
   172  0086                     _TRISB	set	134
   173  0087                     _TRISC	set	135
   174  04C2                     _BRGH	set	1218
   175  0465                     _RCIE	set	1125
   176  04C4                     _SYNC	set	1220
   177  04C6                     _TX9	set	1222
   178  04C5                     _TXEN	set	1221
   179  0464                     _TXIE	set	1124
   180  0105                     _WDTCON	set	261
   181  0188                     _ANSEL	set	392
   182  0189                     _ANSELH	set	393
   183  0C3B                     _BRG16	set	3131
   184  001D                     __stringdata:	
   185  001D                     STR_11:	
   186  001D  3430               	retlw	48	;'0'
   187  001E  3430               	retlw	48	;'0'
   188  001F  3430               	retlw	48	;'0'
   189  0020  3430               	retlw	48	;'0'
   190  0021  3430               	retlw	48	;'0'
   191  0022  3430               	retlw	48	;'0'
   192  0023  3430               	retlw	48	;'0'
   193  0024  3430               	retlw	48	;'0'
   194  0025  3430               	retlw	48	;'0'
   195  0026  3430               	retlw	48	;'0'
   196  0027  3430               	retlw	48	;'0'
   197  0028  3430               	retlw	48	;'0'
   198  0029  3430               	retlw	48	;'0'
   199  002A  3430               	retlw	48	;'0'
   200  002B  3430               	retlw	48	;'0'
   201  002C  3430               	retlw	48	;'0'
   202  002D  3400               	retlw	0
   203  002E                     STR_12:	
   204  002E  340D               	retlw	13
   205  002F  3442               	retlw	66	;'B'
   206  0030  3472               	retlw	114	;'r'
   207  0031  346F               	retlw	111	;'o'
   208  0032  3461               	retlw	97	;'a'
   209  0033  3464               	retlw	100	;'d'
   210  0034  3463               	retlw	99	;'c'
   211  0035  3461               	retlw	97	;'a'
   212  0036  3473               	retlw	115	;'s'
   213  0037  3474               	retlw	116	;'t'
   214  0038  3420               	retlw	32	;' '
   215  0039  3423               	retlw	35	;'#'
   216  003A  343A               	retlw	58	;':'
   217  003B  3420               	retlw	32	;' '
   218  003C  3400               	retlw	0
   219  003D                     STR_13:	
   220  003D  340D               	retlw	13
   221  003E  344D               	retlw	77	;'M'
   222  003F  346F               	retlw	111	;'o'
   223  0040  3462               	retlw	98	;'b'
   224  0041  3469               	retlw	105	;'i'
   225  0042  346C               	retlw	108	;'l'
   226  0043  3465               	retlw	101	;'e'
   227  0044  343A               	retlw	58	;':'
   228  0045  3420               	retlw	32	;' '
   229  0046  3400               	retlw	0
   230  0047                     STR_14:	
   231  0047  340D               	retlw	13
   232  0048  3453               	retlw	83	;'S'
   233  0049  3465               	retlw	101	;'e'
   234  004A  346E               	retlw	110	;'n'
   235  004B  3473               	retlw	115	;'s'
   236  004C  346F               	retlw	111	;'o'
   237  004D  3472               	retlw	114	;'r'
   238  004E  343A               	retlw	58	;':'
   239  004F  3420               	retlw	32	;' '
   240  0050  3400               	retlw	0
   241  0051                     STR_15:	
   242  0051  340D               	retlw	13
   243  0052  3452               	retlw	82	;'R'
   244  0053  3453               	retlw	83	;'S'
   245  0054  3453               	retlw	83	;'S'
   246  0055  3449               	retlw	73	;'I'
   247  0056  343A               	retlw	58	;':'
   248  0057  3420               	retlw	32	;' '
   249  0058  3400               	retlw	0
   250  0059                     STR_1:	
   251  0059  3441               	retlw	65	;'A'
   252  005A  3454               	retlw	84	;'T'
   253  005B  3444               	retlw	68	;'D'
   254  005C  3442               	retlw	66	;'B'
   255  005D  340D               	retlw	13
   256  005E  3400               	retlw	0
   257  005F                     STR_3:	
   258  005F  3441               	retlw	65	;'A'
   259  0060  3454               	retlw	84	;'T'
   260  0061  3453               	retlw	83	;'S'
   261  0062  3448               	retlw	72	;'H'
   262  0063  340D               	retlw	13
   263  0064  3400               	retlw	0
   264  0065                     STR_4:	
   265  0065  3441               	retlw	65	;'A'
   266  0066  3454               	retlw	84	;'T'
   267  0067  3453               	retlw	83	;'S'
   268  0068  344C               	retlw	76	;'L'
   269  0069  340D               	retlw	13
   270  006A  3400               	retlw	0
   271  006B                     STR_10:	
   272  006B  3441               	retlw	65	;'A'
   273  006C  3454               	retlw	84	;'T'
   274  006D  3443               	retlw	67	;'C'
   275  006E  344E               	retlw	78	;'N'
   276  006F  340D               	retlw	13
   277  0070  3400               	retlw	0
   278  0071                     STR_5:	
   279  0071  3441               	retlw	65	;'A'
   280  0072  3454               	retlw	84	;'T'
   281  0073  3444               	retlw	68	;'D'
   282  0074  3448               	retlw	72	;'H'
   283  0075  3400               	retlw	0
   284  0076                     STR_7:	
   285  0076  3441               	retlw	65	;'A'
   286  0077  3454               	retlw	84	;'T'
   287  0078  3444               	retlw	68	;'D'
   288  0079  344C               	retlw	76	;'L'
   289  007A  3400               	retlw	0
   290  007B                     STR_9:	
   291  007B  342B               	retlw	43	;'+'
   292  007C  342B               	retlw	43	;'+'
   293  007D  342B               	retlw	43	;'+'
   294  007E  3400               	retlw	0
   295  007F                     STR_2:	
   296  007F  3425               	retlw	37	;'%'
   297  0080  3464               	retlw	100	;'d'
   298  0081  3400               	retlw	0
   299  0082                     __end_of__stringdata:	
   300                           
   301                           ; #config settings
   302  0000                     
   303                           	psect	cinit
   304  07F5                     start_initialization:	
   305  07F5                     __initialization:	
   306                           
   307                           ; Clear objects allocated to BANK0
   308  07F5  1383               	bcf	3,7	;select IRP bank0
   309  07F6  303F               	movlw	low __pbssBANK0
   310  07F7  0084               	movwf	4
   311  07F8  3050               	movlw	low (__pbssBANK0+17)
   312  07F9  120A  158A  25C7   	fcall	clear_ram0
   313  07FC                     end_of_initialization:	
   314                           ;End of C runtime variable initialization code
   315                           
   316  07FC                     __end_of__initialization:	
   317  07FC  0183               	clrf	3
   318  07FD  120A  118A  2CAA   	ljmp	_main	;jump to C main() function
   319                           
   320                           	psect	bssBANK0
   321  003F                     __pbssBANK0:	
   322  003F                     _BYTES_BUFFER:	
   323  003F                     	ds	16
   324  004F                     _dummy:	
   325  004F                     	ds	1
   326                           
   327                           	psect	clrtext
   328  0DC7                     clear_ram0:	
   329                           ;	Called with FSR containing the base address, and
   330                           ;	W with the last address+1
   331                           
   332  0DC7  0064               	clrwdt	;clear the watchdog before getting into this loop
   333  0DC8                     clrloop0:	
   334  0DC8  0180               	clrf	0	;clear RAM location pointed to by FSR
   335  0DC9  0A84               	incf	4,f	;increment pointer
   336  0DCA  0604               	xorwf	4,w	;XOR with final address
   337  0DCB  1903               	btfsc	3,2	;have we reached the end yet?
   338  0DCC  3400               	retlw	0	;all done for this memory range, return
   339  0DCD  0604               	xorwf	4,w	;XOR again to restore value
   340  0DCE  2DC8               	goto	clrloop0	;do the next byte
   341                           
   342                           	psect	cstackBANK1
   343  00A0                     __pcstackBANK1:	
   344  00A0                     main@sensor:	
   345                           
   346                           ; 17 bytes @ 0x0
   347  00A0                     	ds	17
   348  00B1                     main@mobile:	
   349                           
   350                           ; 17 bytes @ 0x11
   351  00B1                     	ds	17
   352  00C2                     main@dBm:	
   353                           
   354                           ; 7 bytes @ 0x22
   355  00C2                     	ds	7
   356  00C9                     main@RSSI:	
   357                           
   358                           ; 5 bytes @ 0x29
   359  00C9                     	ds	5
   360  00CE                     main@broadcastNumber:	
   361                           
   362                           ; 4 bytes @ 0x2E
   363  00CE                     	ds	4
   364  00D2                     main@command:	
   365                           
   366                           ; 1 bytes @ 0x32
   367  00D2                     	ds	1
   368  00D3                     main@percentage:	
   369                           
   370                           ; 7 bytes @ 0x33
   371  00D3                     	ds	7
   372  00DA                     main@iter:	
   373                           
   374                           ; 1 bytes @ 0x3A
   375  00DA                     	ds	1
   376  00DB                     main@iter_154:	
   377                           
   378                           ; 1 bytes @ 0x3B
   379  00DB                     	ds	1
   380                           
   381                           	psect	cstackCOMMON
   382  0070                     __pcstackCOMMON:	
   383  0070                     ?_Setup_Baud_Gen:	
   384  0070                     ?_clear_usart_errors:	
   385                           ; 0 bytes @ 0x0
   386                           
   387  0070                     ??_clear_usart_errors:	
   388                           ; 0 bytes @ 0x0
   389                           
   390  0070                     ?_PIC_Initialization:	
   391                           ; 0 bytes @ 0x0
   392                           
   393  0070                     ??_PIC_Initialization:	
   394                           ; 0 bytes @ 0x0
   395                           
   396  0070                     ?_isspace:	
   397                           ; 0 bytes @ 0x0
   398                           
   399  0070                     ??_isspace:	
   400                           ; 1 bit 
   401                           
   402  0070                     ?_isalpha:	
   403                           ; 0 bytes @ 0x0
   404                           
   405  0070                     ??_toupper:	
   406                           ; 1 bit 
   407                           
   408  0070                     ?_isdigit:	
   409                           ; 0 bytes @ 0x0
   410                           
   411  0070                     ??_isdigit:	
   412                           ; 1 bit 
   413                           
   414  0070                     ?_isupper:	
   415                           ; 0 bytes @ 0x0
   416                           
   417  0070                     ??_isupper:	
   418                           ; 1 bit 
   419                           
   420  0070                     ?_USART_Init:	
   421                           ; 0 bytes @ 0x0
   422                           
   423  0070                     ?_send_USART_char:	
   424                           ; 0 bytes @ 0x0
   425                           
   426  0070                     ?_flush_RCREG:	
   427                           ; 0 bytes @ 0x0
   428                           
   429  0070                     ??_flush_RCREG:	
   430                           ; 0 bytes @ 0x0
   431                           
   432  0070                     ?_getIdentification:	
   433                           ; 0 bytes @ 0x0
   434                           
   435  0070                     ?_setDestination:	
   436                           ; 0 bytes @ 0x0
   437                           
   438  0070                     ?_enterCommandMode:	
   439                           ; 0 bytes @ 0x0
   440                           
   441  0070                     ?_exitCommandMode:	
   442                           ; 0 bytes @ 0x0
   443                           
   444  0070                     ?_main:	
   445                           ; 0 bytes @ 0x0
   446                           
   447  0070                     ?_memcpy:	
   448                           ; 0 bytes @ 0x0
   449                           
   450  0070                     ?_toupper:	
   451                           ; 1 bytes @ 0x0
   452                           
   453  0070                     ?_get_USART_char:	
   454                           ; 1 bytes @ 0x0
   455                           
   456  0070                     ?_get_USART_char_timeout:	
   457                           ; 1 bytes @ 0x0
   458                           
   459  0070                     ?_strlen:	
   460                           ; 1 bytes @ 0x0
   461                           
   462  0070                     ?___lwdiv:	
   463                           ; 2 bytes @ 0x0
   464                           
   465  0070                     ?___lmul:	
   466                           ; 2 bytes @ 0x0
   467                           
   468  0070                     memcpy@s1:	
   469                           ; 4 bytes @ 0x0
   470                           
   471  0070                     _isdigit$469:	
   472                           ; 1 bytes @ 0x0
   473                           
   474  0070                     _isspace$472:	
   475                           ; 1 bytes @ 0x0
   476                           
   477  0070                     _isupper$475:	
   478                           ; 1 bytes @ 0x0
   479                           
   480  0070                     Setup_Baud_Gen@BAUD:	
   481                           ; 1 bytes @ 0x0
   482                           
   483  0070                     ___lwdiv@divisor:	
   484                           ; 2 bytes @ 0x0
   485                           
   486  0070                     strlen@s:	
   487                           ; 2 bytes @ 0x0
   488                           
   489  0070                     ___lmul@multiplier:	
   490                           ; 2 bytes @ 0x0
   491                           
   492                           
   493                           ; 4 bytes @ 0x0
   494  0070                     	ds	1
   495  0071                     ??_get_USART_char:	
   496  0071                     ??_get_USART_char_timeout:	
   497                           ; 0 bytes @ 0x1
   498                           
   499  0071                     ??_send_USART_char:	
   500                           ; 0 bytes @ 0x1
   501                           
   502  0071                     toupper@c:	
   503                           ; 0 bytes @ 0x1
   504                           
   505  0071                     isdigit@c:	
   506                           ; 1 bytes @ 0x1
   507                           
   508  0071                     isspace@c:	
   509                           ; 1 bytes @ 0x1
   510                           
   511  0071                     isupper@c:	
   512                           ; 1 bytes @ 0x1
   513                           
   514  0071                     get_USART_char_timeout@timeout_int:	
   515                           ; 1 bytes @ 0x1
   516                           
   517  0071                     memcpy@n:	
   518                           ; 2 bytes @ 0x1
   519                           
   520                           
   521                           ; 2 bytes @ 0x1
   522  0071                     	ds	1
   523  0072                     ??_Setup_Baud_Gen:	
   524  0072                     ??_strlen:	
   525                           ; 0 bytes @ 0x2
   526                           
   527  0072                     ??_isalpha:	
   528                           ; 0 bytes @ 0x2
   529                           
   530  0072                     ??_USART_Init:	
   531                           ; 0 bytes @ 0x2
   532                           
   533  0072                     send_USART_char@character:	
   534                           ; 0 bytes @ 0x2
   535                           
   536  0072                     _isalpha$466:	
   537                           ; 1 bytes @ 0x2
   538                           
   539  0072                     ___lwdiv@dividend:	
   540                           ; 1 bytes @ 0x2
   541                           
   542                           
   543                           ; 2 bytes @ 0x2
   544  0072                     	ds	1
   545  0073                     ??_memcpy:	
   546  0073                     isalpha@c:	
   547                           ; 0 bytes @ 0x3
   548                           
   549                           
   550                           ; 1 bytes @ 0x3
   551  0073                     	ds	1
   552  0074                     ??___lwdiv:	
   553  0074                     memcpy@d1:	
   554                           ; 0 bytes @ 0x4
   555                           
   556  0074                     strlen@cp:	
   557                           ; 1 bytes @ 0x4
   558                           
   559  0074                     ___lmul@multiplicand:	
   560                           ; 2 bytes @ 0x4
   561                           
   562                           
   563                           ; 4 bytes @ 0x4
   564  0074                     	ds	1
   565  0075                     memcpy@d:	
   566  0075                     ___lwdiv@quotient:	
   567                           ; 1 bytes @ 0x5
   568                           
   569                           
   570                           ; 2 bytes @ 0x5
   571  0075                     	ds	1
   572  0076                     ?_send_USART_string:	
   573  0076                     memcpy@s:	
   574                           ; 0 bytes @ 0x6
   575                           
   576  0076                     send_USART_string@string:	
   577                           ; 1 bytes @ 0x6
   578                           
   579                           
   580                           ; 2 bytes @ 0x6
   581  0076                     	ds	1
   582  0077                     ___lwdiv@counter:	
   583                           
   584                           ; 1 bytes @ 0x7
   585  0077                     	ds	1
   586  0078                     ??_send_USART_string:	
   587  0078                     ??___lmul:	
   588                           ; 0 bytes @ 0x8
   589                           
   590  0078                     ?___lwmod:	
   591                           ; 0 bytes @ 0x8
   592                           
   593  0078                     ___lwmod@divisor:	
   594                           ; 2 bytes @ 0x8
   595                           
   596                           
   597                           ; 2 bytes @ 0x8
   598  0078                     	ds	1
   599  0079                     ___lmul@product:	
   600                           
   601                           ; 4 bytes @ 0x9
   602  0079                     	ds	1
   603  007A                     send_USART_string@iter:	
   604  007A                     ___lwmod@dividend:	
   605                           ; 1 bytes @ 0xA
   606                           
   607                           
   608                           ; 2 bytes @ 0xA
   609  007A                     	ds	1
   610  007B                     ??_getIdentification:	
   611  007B                     ??_setDestination:	
   612                           ; 0 bytes @ 0xB
   613                           
   614  007B                     ??_enterCommandMode:	
   615                           ; 0 bytes @ 0xB
   616                           
   617  007B                     ??_exitCommandMode:	
   618                           ; 0 bytes @ 0xB
   619                           
   620                           
   621                           ; 0 bytes @ 0xB
   622  007B                     	ds	1
   623  007C                     ??___lwmod:	
   624  007C                     exitCommandMode@iter:	
   625                           ; 0 bytes @ 0xC
   626                           
   627                           
   628                           ; 1 bytes @ 0xC
   629  007C                     	ds	1
   630  007D                     enterCommandMode@iter:	
   631  007D                     ___lwmod@counter:	
   632                           ; 1 bytes @ 0xD
   633                           
   634                           
   635                           ; 1 bytes @ 0xD
   636  007D                     	ds	1
   637                           
   638                           	psect	cstackBANK0
   639  0020                     __pcstackBANK0:	
   640  0020                     ?_sprintf:	
   641  0020                     ?_strtol:	
   642                           ; 2 bytes @ 0x0
   643                           
   644  0020                     sprintf@f:	
   645                           ; 4 bytes @ 0x0
   646                           
   647  0020                     strtol@endptr:	
   648                           ; 1 bytes @ 0x0
   649                           
   650  0020                     getIdentification@temp:	
   651                           ; 1 bytes @ 0x0
   652                           
   653  0020                     setDestination@subbuff:	
   654                           ; 8 bytes @ 0x0
   655                           
   656                           
   657                           ; 9 bytes @ 0x0
   658  0020                     	ds	1
   659  0021                     strtol@base:	
   660                           
   661                           ; 2 bytes @ 0x1
   662  0021                     	ds	2
   663  0023                     ??_sprintf:	
   664                           
   665                           ; 0 bytes @ 0x3
   666  0023                     	ds	1
   667  0024                     ??_strtol:	
   668                           
   669                           ; 0 bytes @ 0x4
   670  0024                     	ds	2
   671  0026                     sprintf@ap:	
   672                           
   673                           ; 1 bytes @ 0x6
   674  0026                     	ds	1
   675  0027                     sprintf@flag:	
   676                           
   677                           ; 1 bytes @ 0x7
   678  0027                     	ds	1
   679  0028                     getIdentification@offset:	
   680  0028                     sprintf@prec:	
   681                           ; 1 bytes @ 0x8
   682                           
   683  0028                     strtol@sign:	
   684                           ; 1 bytes @ 0x8
   685                           
   686                           
   687                           ; 1 bytes @ 0x8
   688  0028                     	ds	1
   689  0029                     getIdentification@iter:	
   690  0029                     sprintf@_val:	
   691                           ; 1 bytes @ 0x9
   692                           
   693  0029                     strtol@a:	
   694                           ; 4 bytes @ 0x9
   695                           
   696  0029                     setDestination@subbuff2:	
   697                           ; 4 bytes @ 0x9
   698                           
   699                           
   700                           ; 9 bytes @ 0x9
   701  0029                     	ds	1
   702  002A                     getIdentification@iter_124:	
   703                           
   704                           ; 1 bytes @ 0xA
   705  002A                     	ds	1
   706  002B                     getIdentification@iter_128:	
   707                           
   708                           ; 1 bytes @ 0xB
   709  002B                     	ds	1
   710  002C                     getIdentification@result:	
   711                           
   712                           ; 1 bytes @ 0xC
   713  002C                     	ds	1
   714  002D                     getIdentification@iter_125:	
   715  002D                     sprintf@sp:	
   716                           ; 1 bytes @ 0xD
   717                           
   718  002D                     strtol@s:	
   719                           ; 1 bytes @ 0xD
   720                           
   721                           
   722                           ; 1 bytes @ 0xD
   723  002D                     	ds	1
   724  002E                     getIdentification@iter_126:	
   725  002E                     sprintf@c:	
   726                           ; 1 bytes @ 0xE
   727                           
   728  002E                     strtol@c:	
   729                           ; 1 bytes @ 0xE
   730                           
   731                           
   732                           ; 1 bytes @ 0xE
   733  002E                     	ds	1
   734  002F                     ?_getRSSI:	
   735  002F                     getRSSI@dBm:	
   736                           ; 0 bytes @ 0xF
   737                           
   738  002F                     getIdentification@iter_129:	
   739                           ; 1 bytes @ 0xF
   740                           
   741                           
   742                           ; 1 bytes @ 0xF
   743  002F                     	ds	1
   744  0030                     getRSSI@percentage:	
   745  0030                     getIdentification@iter_130:	
   746                           ; 1 bytes @ 0x10
   747                           
   748                           
   749                           ; 1 bytes @ 0x10
   750  0030                     	ds	1
   751  0031                     ??_getRSSI:	
   752                           
   753                           ; 0 bytes @ 0x11
   754  0031                     	ds	1
   755  0032                     setDestination@destination:	
   756                           
   757                           ; 1 bytes @ 0x12
   758  0032                     	ds	1
   759  0033                     setDestination@iter:	
   760  0033                     getRSSI@RSSInum:	
   761                           ; 1 bytes @ 0x13
   762                           
   763                           
   764                           ; 3 bytes @ 0x13
   765  0033                     	ds	1
   766  0034                     setDestination@iter_140:	
   767                           
   768                           ; 1 bytes @ 0x14
   769  0034                     	ds	2
   770  0036                     getRSSI@dBmbuf:	
   771                           
   772                           ; 2 bytes @ 0x16
   773  0036                     	ds	2
   774  0038                     getRSSI@iter:	
   775                           
   776                           ; 1 bytes @ 0x18
   777  0038                     	ds	1
   778  0039                     getRSSI@RSSI:	
   779                           
   780                           ; 1 bytes @ 0x19
   781  0039                     	ds	1
   782  003A                     getRSSI@dBmNum:	
   783                           
   784                           ; 2 bytes @ 0x1A
   785  003A                     	ds	2
   786  003C                     ??_main:	
   787                           
   788                           ; 0 bytes @ 0x1C
   789  003C                     	ds	3
   790                           
   791                           	psect	maintext
   792  04AA                     __pmaintext:	
   793 ;;
   794 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   795 ;;
   796 ;; *************** function _main *****************
   797 ;; Defined at:
   798 ;;		line 26 in file "XBSensor.c"
   799 ;; Parameters:    Size  Location     Type
   800 ;;		None
   801 ;; Auto vars:     Size  Location     Type
   802 ;;  iter            1   59[BANK1 ] unsigned char 
   803 ;;  iter            1   58[BANK1 ] unsigned char 
   804 ;;  mobile         17   17[BANK1 ] unsigned char [17]
   805 ;;  percentage      7   51[BANK1 ] unsigned char [7]
   806 ;;  dBm             7   34[BANK1 ] unsigned char [7]
   807 ;;  RSSI            5   41[BANK1 ] unsigned char [5]
   808 ;;  broadcastNum    4   46[BANK1 ] unsigned char [4]
   809 ;;  command         1   50[BANK1 ] unsigned char 
   810 ;;  sensor         17    0[BANK1 ] unsigned char [17]
   811 ;; Return value:  Size  Location     Type
   812 ;;		None               void
   813 ;; Registers used:
   814 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   815 ;; Tracked objects:
   816 ;;		On entry : 17F/0
   817 ;;		On exit  : 0/0
   818 ;;		Unchanged: 0/0
   819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   820 ;;      Params:         0       0       0       0       0
   821 ;;      Locals:         0       0      60       0       0
   822 ;;      Temps:          0       3       0       0       0
   823 ;;      Totals:         0       3      60       0       0
   824 ;;Total ram usage:       63 bytes
   825 ;; Hardware stack levels required when called:    4
   826 ;; This function calls:
   827 ;;		_USART_Init
   828 ;;		_get_USART_char
   829 ;;		_send_USART_char
   830 ;;		_send_USART_string
   831 ;;		_flush_RCREG
   832 ;;		_getRSSI
   833 ;;		_getIdentification
   834 ;;		_setDestination
   835 ;;		_enterCommandMode
   836 ;;		_exitCommandMode
   837 ;;		_PIC_Initialization
   838 ;; This function is called by:
   839 ;;		Startup code after reset
   840 ;; This function uses a non-reentrant model
   841 ;;
   842                           
   843                           
   844                           ;psect for function _main
   845  04AA                     _main:	
   846                           
   847                           ;XBSensor.c: 27: PIC_Initialization();
   848                           
   849                           ;incstack = 0
   850                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   851  04AA  120A  158A  2664   	fcall	_PIC_Initialization
      +       120A  118A         
   852                           
   853                           ;XBSensor.c: 29: USART_Init();
   854  04AF  120A  118A  2082   	fcall	_USART_Init
      +       120A  118A         
   855                           
   856                           ;XBSensor.c: 31: SPEN = 1;
   857  04B4  1283               	bcf	3,5	;RP0=0, select bank0
   858  04B5  1303               	bcf	3,6	;RP1=0, select bank0
   859  04B6  1798               	bsf	24,7	;volatile
   860                           
   861                           ;XBSensor.c: 33: _delay((unsigned long)((250)*(4000000/4000.0)));
   862  04B7  3002               	movlw	2
   863  04B8  00BE               	movwf	??_main+2
   864  04B9  3045               	movlw	69
   865  04BA  00BD               	movwf	??_main+1
   866  04BB  30A9               	movlw	169
   867  04BC  00BC               	movwf	??_main
   868  04BD                     u2237:	
   869  04BD  0BBC               	decfsz	??_main,f
   870  04BE  2CBD               	goto	u2237
   871  04BF  0BBD               	decfsz	??_main+1,f
   872  04C0  2CBD               	goto	u2237
   873  04C1  0BBE               	decfsz	??_main+2,f
   874  04C2  2CBD               	goto	u2237
   875  04C3  2CC4               	nop2
   876                           
   877                           ;XBSensor.c: 35: enterCommandMode();
   878  04C4  120A  158A  278C   	fcall	_enterCommandMode
      +       120A  118A         
   879                           
   880                           ;XBSensor.c: 38: char sensor[16+1];
   881                           ;XBSensor.c: 39: getIdentification(sensor);
   882  04C9  30A0               	movlw	main@sensor& (0+255)
   883  04CA  120A  118A  22AD   	fcall	_getIdentification
      +       120A  118A         
   884                           
   885                           ;XBSensor.c: 41: setDestination("0000000000000000");
   886  04CF  300B               	movlw	(STR_11-__stringbase)& (0+255)
   887  04D0  120A  118A  2126   	fcall	_setDestination
      +       120A  118A         
   888                           
   889                           ;XBSensor.c: 43: exitCommandMode();
   890  04D5  120A  158A  2681   	fcall	_exitCommandMode
      +       120A  118A         
   891                           
   892                           ;XBSensor.c: 45: _delay((unsigned long)((250)*(4000000/4000.0)));
   893  04DA  3002               	movlw	2
   894  04DB  1283               	bcf	3,5	;RP0=0, select bank0
   895  04DC  1303               	bcf	3,6	;RP1=0, select bank0
   896  04DD  00BE               	movwf	??_main+2
   897  04DE  3045               	movlw	69
   898  04DF  00BD               	movwf	??_main+1
   899  04E0  30A9               	movlw	169
   900  04E1  00BC               	movwf	??_main
   901  04E2                     u2247:	
   902  04E2  0BBC               	decfsz	??_main,f
   903  04E3  2CE2               	goto	u2247
   904  04E4  0BBD               	decfsz	??_main+1,f
   905  04E5  2CE2               	goto	u2247
   906  04E6  0BBE               	decfsz	??_main+2,f
   907  04E7  2CE2               	goto	u2247
   908  04E8  2CE9               	nop2
   909  04E9                     l2486:	
   910                           ;XBSensor.c: 47: for(;;)
   911                           
   912                           
   913                           ;XBSensor.c: 48: {
   914                           ;XBSensor.c: 49: flush_RCREG();
   915  04E9  120A  158A  25F6   	fcall	_flush_RCREG
      +       120A  118A         
   916                           
   917                           ;XBSensor.c: 51: char command = get_USART_char();
   918  04EE  120A  158A  25CF   	fcall	_get_USART_char
      +       120A  118A         
   919  04F3  1283               	bcf	3,5	;RP0=0, select bank0
   920  04F4  1303               	bcf	3,6	;RP1=0, select bank0
   921  04F5  00BC               	movwf	??_main
   922  04F6  083C               	movf	??_main,w
   923  04F7  1683               	bsf	3,5	;RP0=1, select bank1
   924  04F8  1303               	bcf	3,6	;RP1=0, select bank1
   925  04F9  00D2               	movwf	main@command^(0+128)
   926                           
   927                           ;XBSensor.c: 53: if(command == '*')
   928  04FA  0852               	movf	main@command^(0+128),w
   929  04FB  3A2A               	xorlw	42
   930  04FC  1D03               	skipz
   931  04FD  2CE9               	goto	l2486
   932                           
   933                           ;XBSensor.c: 54: {
   934                           ;XBSensor.c: 58: char broadcastNumber[3+1];
   935                           ;XBSensor.c: 59: for(char iter = 0; iter < 3; iter++)
   936  04FE  01DA               	clrf	main@iter^(0+128)
   937  04FF  3003               	movlw	3
   938  0500  025A               	subwf	main@iter^(0+128),w
   939  0501  1803               	btfsc	3,0
   940  0502  2D1F               	goto	l2504
   941  0503                     l2498:	
   942                           
   943                           ;XBSensor.c: 60: {broadcastNumber[iter] = get_USART_char();}
   944  0503  120A  158A  25CF   	fcall	_get_USART_char
      +       120A  118A         
   945  0508  1283               	bcf	3,5	;RP0=0, select bank0
   946  0509  1303               	bcf	3,6	;RP1=0, select bank0
   947  050A  00BC               	movwf	??_main
   948  050B  1683               	bsf	3,5	;RP0=1, select bank1
   949  050C  1303               	bcf	3,6	;RP1=0, select bank1
   950  050D  085A               	movf	main@iter^(0+128),w
   951  050E  3ECE               	addlw	main@broadcastNumber& (0+255)
   952  050F  0084               	movwf	4
   953  0510  1283               	bcf	3,5	;RP0=0, select bank0
   954  0511  1303               	bcf	3,6	;RP1=0, select bank0
   955  0512  083C               	movf	??_main,w
   956  0513  1383               	bcf	3,7	;select IRP bank1
   957  0514  0080               	movwf	0
   958  0515  3001               	movlw	1
   959  0516  00BC               	movwf	??_main
   960  0517  083C               	movf	??_main,w
   961  0518  1683               	bsf	3,5	;RP0=1, select bank1
   962  0519  1303               	bcf	3,6	;RP1=0, select bank1
   963  051A  07DA               	addwf	main@iter^(0+128),f
   964  051B  3003               	movlw	3
   965  051C  025A               	subwf	main@iter^(0+128),w
   966  051D  1C03               	skipc
   967  051E  2D03               	goto	l2498
   968  051F                     l2504:	
   969                           
   970                           ;XBSensor.c: 61: broadcastNumber[3] = '\0';
   971  051F  01D1               	clrf	(main@broadcastNumber^(0+128)+3)
   972                           
   973                           ;XBSensor.c: 64: char mobile[16+1];
   974                           ;XBSensor.c: 65: for(char iter = 0; iter < 16; iter++)
   975  0520  01DB               	clrf	main@iter_154^(0+128)
   976  0521  3010               	movlw	16
   977  0522  025B               	subwf	main@iter_154^(0+128),w
   978  0523  1803               	btfsc	3,0
   979  0524  2D41               	goto	l2516
   980  0525                     l2510:	
   981                           
   982                           ;XBSensor.c: 66: {mobile[iter] = get_USART_char();}
   983  0525  120A  158A  25CF   	fcall	_get_USART_char
      +       120A  118A         
   984  052A  1283               	bcf	3,5	;RP0=0, select bank0
   985  052B  1303               	bcf	3,6	;RP1=0, select bank0
   986  052C  00BC               	movwf	??_main
   987  052D  1683               	bsf	3,5	;RP0=1, select bank1
   988  052E  1303               	bcf	3,6	;RP1=0, select bank1
   989  052F  085B               	movf	main@iter_154^(0+128),w
   990  0530  3EB1               	addlw	main@mobile& (0+255)
   991  0531  0084               	movwf	4
   992  0532  1283               	bcf	3,5	;RP0=0, select bank0
   993  0533  1303               	bcf	3,6	;RP1=0, select bank0
   994  0534  083C               	movf	??_main,w
   995  0535  1383               	bcf	3,7	;select IRP bank1
   996  0536  0080               	movwf	0
   997  0537  3001               	movlw	1
   998  0538  00BC               	movwf	??_main
   999  0539  083C               	movf	??_main,w
  1000  053A  1683               	bsf	3,5	;RP0=1, select bank1
  1001  053B  1303               	bcf	3,6	;RP1=0, select bank1
  1002  053C  07DB               	addwf	main@iter_154^(0+128),f
  1003  053D  3010               	movlw	16
  1004  053E  025B               	subwf	main@iter_154^(0+128),w
  1005  053F  1C03               	skipc
  1006  0540  2D25               	goto	l2510
  1007  0541                     l2516:	
  1008                           
  1009                           ;XBSensor.c: 67: mobile[16] = '\0';
  1010  0541  01C1               	clrf	(main@mobile^(0+128)+16)
  1011                           
  1012                           ;XBSensor.c: 69: enterCommandMode();
  1013  0542  120A  158A  278C   	fcall	_enterCommandMode
      +       120A  118A         
  1014                           
  1015                           ;XBSensor.c: 72: char RSSI[4+1];
  1016                           ;XBSensor.c: 73: char dBm[6+1];
  1017                           ;XBSensor.c: 74: char percentage[6+1];
  1018                           ;XBSensor.c: 75: getRSSI(RSSI, dBm, percentage);
  1019  0547  30C2               	movlw	main@dBm& (0+255)
  1020  0548  1283               	bcf	3,5	;RP0=0, select bank0
  1021  0549  1303               	bcf	3,6	;RP1=0, select bank0
  1022  054A  00BC               	movwf	??_main
  1023  054B  083C               	movf	??_main,w
  1024  054C  00AF               	movwf	?_getRSSI
  1025  054D  30D3               	movlw	main@percentage& (0+255)
  1026  054E  00BD               	movwf	??_main+1
  1027  054F  083D               	movf	??_main+1,w
  1028  0550  00B0               	movwf	?_getRSSI+1
  1029  0551  30C9               	movlw	main@RSSI& (0+255)
  1030  0552  120A  118A  25C3   	fcall	_getRSSI
      +       120A  118A         
  1031                           
  1032                           ;XBSensor.c: 77: exitCommandMode();
  1033  0557  120A  158A  2681   	fcall	_exitCommandMode
      +       120A  118A         
  1034                           
  1035                           ;XBSensor.c: 80: send_USART_string("\rBroadcast #: ");
  1036  055C  301C               	movlw	low (STR_12-__stringbase)
  1037  055D  00F6               	movwf	?_send_USART_string
  1038  055E  3080               	movlw	128
  1039  055F  00F7               	movwf	?_send_USART_string+1
  1040  0560  120A  158A  2729   	fcall	_send_USART_string
      +       120A  118A         
  1041                           
  1042                           ;XBSensor.c: 81: send_USART_string(broadcastNumber);
  1043  0565  30CE               	movlw	main@broadcastNumber& (0+255)
  1044  0566  00F6               	movwf	?_send_USART_string
  1045  0567  3000               	movlw	0
  1046  0568  00F7               	movwf	?_send_USART_string+1
  1047  0569  120A  158A  2729   	fcall	_send_USART_string
      +       120A  118A         
  1048                           
  1049                           ;XBSensor.c: 83: send_USART_string("\rMobile: ");
  1050  056E  302B               	movlw	low (STR_13-__stringbase)
  1051  056F  00F6               	movwf	?_send_USART_string
  1052  0570  3080               	movlw	128
  1053  0571  00F7               	movwf	?_send_USART_string+1
  1054  0572  120A  158A  2729   	fcall	_send_USART_string
      +       120A  118A         
  1055                           
  1056                           ;XBSensor.c: 84: send_USART_string(mobile);
  1057  0577  30B1               	movlw	main@mobile& (0+255)
  1058  0578  00F6               	movwf	?_send_USART_string
  1059  0579  3000               	movlw	0
  1060  057A  00F7               	movwf	?_send_USART_string+1
  1061  057B  120A  158A  2729   	fcall	_send_USART_string
      +       120A  118A         
  1062                           
  1063                           ;XBSensor.c: 86: send_USART_string("\rSensor: ");
  1064  0580  3035               	movlw	low (STR_14-__stringbase)
  1065  0581  00F6               	movwf	?_send_USART_string
  1066  0582  3080               	movlw	128
  1067  0583  00F7               	movwf	?_send_USART_string+1
  1068  0584  120A  158A  2729   	fcall	_send_USART_string
      +       120A  118A         
  1069                           
  1070                           ;XBSensor.c: 87: send_USART_string(sensor);
  1071  0589  30A0               	movlw	main@sensor& (0+255)
  1072  058A  00F6               	movwf	?_send_USART_string
  1073  058B  3000               	movlw	0
  1074  058C  00F7               	movwf	?_send_USART_string+1
  1075  058D  120A  158A  2729   	fcall	_send_USART_string
      +       120A  118A         
  1076                           
  1077                           ;XBSensor.c: 89: send_USART_string("\rRSSI: ");
  1078  0592  303F               	movlw	low (STR_15-__stringbase)
  1079  0593  00F6               	movwf	?_send_USART_string
  1080  0594  3080               	movlw	128
  1081  0595  00F7               	movwf	?_send_USART_string+1
  1082  0596  120A  158A  2729   	fcall	_send_USART_string
      +       120A  118A         
  1083                           
  1084                           ;XBSensor.c: 90: send_USART_string(RSSI);
  1085  059B  30C9               	movlw	main@RSSI& (0+255)
  1086  059C  00F6               	movwf	?_send_USART_string
  1087  059D  3000               	movlw	0
  1088  059E  00F7               	movwf	?_send_USART_string+1
  1089  059F  120A  158A  2729   	fcall	_send_USART_string
      +       120A  118A         
  1090                           
  1091                           ;XBSensor.c: 91: send_USART_char(' ');
  1092  05A4  3020               	movlw	32
  1093  05A5  120A  158A  2639   	fcall	_send_USART_char
      +       120A  118A         
  1094                           
  1095                           ;XBSensor.c: 92: send_USART_string(dBm);
  1096  05AA  30C2               	movlw	main@dBm& (0+255)
  1097  05AB  00F6               	movwf	?_send_USART_string
  1098  05AC  3000               	movlw	0
  1099  05AD  00F7               	movwf	?_send_USART_string+1
  1100  05AE  120A  158A  2729   	fcall	_send_USART_string
      +       120A  118A         
  1101                           
  1102                           ;XBSensor.c: 93: send_USART_char(' ');
  1103  05B3  3020               	movlw	32
  1104  05B4  120A  158A  2639   	fcall	_send_USART_char
      +       120A  118A         
  1105                           
  1106                           ;XBSensor.c: 94: send_USART_string(percentage);
  1107  05B9  30D3               	movlw	main@percentage& (0+255)
  1108  05BA  00F6               	movwf	?_send_USART_string
  1109  05BB  3000               	movlw	0
  1110  05BC  00F7               	movwf	?_send_USART_string+1
  1111  05BD  120A  158A  2729   	fcall	_send_USART_string
      +       120A  118A         
  1112                           
  1113                           ;XBSensor.c: 100: }
  1114                           ;XBSensor.c: 101: }
  1115                           
  1116                           ;XBSensor.c: 97: {
  1117                           
  1118                           ;XBSensor.c: 95: }
  1119  05C2  2CE9               	goto	l2486
  1120  05C3                     __end_of_main:	
  1121                           
  1122                           	psect	text1
  1123  0E64                     __ptext1:	
  1124 ;; *************** function _PIC_Initialization *****************
  1125 ;; Defined at:
  1126 ;;		line 104 in file "XBSensor.c"
  1127 ;; Parameters:    Size  Location     Type
  1128 ;;		None
  1129 ;; Auto vars:     Size  Location     Type
  1130 ;;		None
  1131 ;; Return value:  Size  Location     Type
  1132 ;;		None               void
  1133 ;; Registers used:
  1134 ;;		wreg, status,2
  1135 ;; Tracked objects:
  1136 ;;		On entry : 0/0
  1137 ;;		On exit  : 0/0
  1138 ;;		Unchanged: 0/0
  1139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1140 ;;      Params:         0       0       0       0       0
  1141 ;;      Locals:         0       0       0       0       0
  1142 ;;      Temps:          0       0       0       0       0
  1143 ;;      Totals:         0       0       0       0       0
  1144 ;;Total ram usage:        0 bytes
  1145 ;; Hardware stack levels used:    1
  1146 ;; This function calls:
  1147 ;;		Nothing
  1148 ;; This function is called by:
  1149 ;;		_main
  1150 ;; This function uses a non-reentrant model
  1151 ;;
  1152                           
  1153                           
  1154                           ;psect for function _PIC_Initialization
  1155  0E64                     _PIC_Initialization:	
  1156                           
  1157                           ;XBSensor.c: 105: GIE = 0;
  1158                           
  1159                           ;incstack = 0
  1160                           ; Regs used in _PIC_Initialization: [wreg+status,2]
  1161  0E64  138B               	bcf	11,7	;volatile
  1162                           
  1163                           ;XBSensor.c: 107: WDTCON = 0;
  1164  0E65  1283               	bcf	3,5	;RP0=0, select bank2
  1165  0E66  1703               	bsf	3,6	;RP1=1, select bank2
  1166  0E67  0185               	clrf	5	;volatile
  1167                           
  1168                           ;XBSensor.c: 108: OPTION_REG = 0b01011000;
  1169  0E68  3058               	movlw	88
  1170  0E69  1683               	bsf	3,5	;RP0=1, select bank1
  1171  0E6A  1303               	bcf	3,6	;RP1=0, select bank1
  1172  0E6B  0081               	movwf	1	;volatile
  1173                           
  1174                           ;XBSensor.c: 110: ANSEL = 0;
  1175  0E6C  1683               	bsf	3,5	;RP0=1, select bank3
  1176  0E6D  1703               	bsf	3,6	;RP1=1, select bank3
  1177  0E6E  0188               	clrf	8	;volatile
  1178                           
  1179                           ;XBSensor.c: 111: ANSELH = 0;
  1180  0E6F  0189               	clrf	9	;volatile
  1181                           
  1182                           ;XBSensor.c: 112: PSTRCON = 0;
  1183  0E70  1683               	bsf	3,5	;RP0=1, select bank1
  1184  0E71  1303               	bcf	3,6	;RP1=0, select bank1
  1185  0E72  019D               	clrf	29	;volatile
  1186                           
  1187                           ;XBSensor.c: 113: TRISA = 0b00000000;
  1188  0E73  0185               	clrf	5	;volatile
  1189                           
  1190                           ;XBSensor.c: 114: TRISB = 0b11111111;
  1191  0E74  30FF               	movlw	255
  1192  0E75  0086               	movwf	6	;volatile
  1193                           
  1194                           ;XBSensor.c: 115: TRISC = 0b00000000;
  1195  0E76  0187               	clrf	7	;volatile
  1196                           
  1197                           ;XBSensor.c: 116: PORTA = 0;
  1198  0E77  1283               	bcf	3,5	;RP0=0, select bank0
  1199  0E78  1303               	bcf	3,6	;RP1=0, select bank0
  1200  0E79  0185               	clrf	5	;volatile
  1201                           
  1202                           ;XBSensor.c: 117: PORTB = 0;
  1203  0E7A  0186               	clrf	6	;volatile
  1204                           
  1205                           ;XBSensor.c: 118: PORTC = 0;
  1206  0E7B  0187               	clrf	7	;volatile
  1207                           
  1208                           ;XBSensor.c: 119: GIE = 1;
  1209  0E7C  178B               	bsf	11,7	;volatile
  1210                           
  1211                           ;XBSensor.c: 120: TXIE = 0;
  1212  0E7D  1683               	bsf	3,5	;RP0=1, select bank1
  1213  0E7E  1303               	bcf	3,6	;RP1=0, select bank1
  1214  0E7F  120C               	bcf	12,4	;volatile
  1215  0E80  0008               	return
  1216  0E81                     __end_of_PIC_Initialization:	
  1217                           
  1218                           	psect	text2
  1219  0E81                     __ptext2:	
  1220 ;; *************** function _exitCommandMode *****************
  1221 ;; Defined at:
  1222 ;;		line 224 in file "..\Header Files\..\C Source Code\ZIGBEE_16F_MASTER.c"
  1223 ;; Parameters:    Size  Location     Type
  1224 ;;		None
  1225 ;; Auto vars:     Size  Location     Type
  1226 ;;  iter            1   12[COMMON] unsigned char 
  1227 ;; Return value:  Size  Location     Type
  1228 ;;		None               void
  1229 ;; Registers used:
  1230 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1231 ;; Tracked objects:
  1232 ;;		On entry : 0/0
  1233 ;;		On exit  : 0/0
  1234 ;;		Unchanged: 0/0
  1235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1236 ;;      Params:         0       0       0       0       0
  1237 ;;      Locals:         1       0       0       0       0
  1238 ;;      Temps:          1       0       0       0       0
  1239 ;;      Totals:         2       0       0       0       0
  1240 ;;Total ram usage:        2 bytes
  1241 ;; Hardware stack levels used:    1
  1242 ;; Hardware stack levels required when called:    3
  1243 ;; This function calls:
  1244 ;;		_get_USART_char
  1245 ;;		_send_USART_string
  1246 ;;		_flush_RCREG
  1247 ;; This function is called by:
  1248 ;;		_main
  1249 ;; This function uses a non-reentrant model
  1250 ;;
  1251                           
  1252                           
  1253                           ;psect for function _exitCommandMode
  1254  0E81                     _exitCommandMode:	
  1255                           
  1256                           ;ZIGBEE_16F_MASTER.c: 225: flush_RCREG();
  1257                           
  1258                           ;incstack = 0
  1259                           ; Regs used in _exitCommandMode: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1260  0E81  120A  158A  25F6   	fcall	_flush_RCREG
      +       120A  158A         
  1261                           
  1262                           ;ZIGBEE_16F_MASTER.c: 226: send_USART_string("ATCN\r");
  1263  0E86  3059               	movlw	low (STR_10-__stringbase)
  1264  0E87  00F6               	movwf	?_send_USART_string
  1265  0E88  3080               	movlw	128
  1266  0E89  00F7               	movwf	?_send_USART_string+1
  1267  0E8A  120A  158A  2729   	fcall	_send_USART_string
      +       120A  158A         
  1268                           
  1269                           ;ZIGBEE_16F_MASTER.c: 229: for(char iter = 0; iter < 2; iter++)
  1270  0E8F  01FC               	clrf	exitCommandMode@iter
  1271  0E90                     L1:	
  1272  0E90  3002               	movlw	2
  1273  0E91  027C               	subwf	exitCommandMode@iter,w
  1274  0E92  1803               	btfsc	3,0
  1275  0E93  0008               	return
  1276                           
  1277                           ;ZIGBEE_16F_MASTER.c: 230: {BYTES_BUFFER[iter] = get_USART_char();}
  1278  0E94  120A  158A  25CF   	fcall	_get_USART_char
      +       120A  158A         
  1279  0E99  00FB               	movwf	??_exitCommandMode
  1280  0E9A  087C               	movf	exitCommandMode@iter,w
  1281  0E9B  3E3F               	addlw	_BYTES_BUFFER& (0+255)
  1282  0E9C  0084               	movwf	4
  1283  0E9D  087B               	movf	??_exitCommandMode,w
  1284  0E9E  1383               	bcf	3,7	;select IRP bank0
  1285  0E9F  0080               	movwf	0
  1286  0EA0  3001               	movlw	1
  1287  0EA1  00FB               	movwf	??_exitCommandMode
  1288  0EA2  087B               	movf	??_exitCommandMode,w
  1289  0EA3  07FC               	addwf	exitCommandMode@iter,f
  1290  0EA4  2E90               	goto	L1
  1291  0EA5                     __end_of_exitCommandMode:	
  1292                           
  1293                           	psect	text3
  1294  0F8C                     __ptext3:	
  1295 ;; *************** function _enterCommandMode *****************
  1296 ;; Defined at:
  1297 ;;		line 189 in file "..\Header Files\..\C Source Code\ZIGBEE_16F_MASTER.c"
  1298 ;; Parameters:    Size  Location     Type
  1299 ;;		None
  1300 ;; Auto vars:     Size  Location     Type
  1301 ;;  iter            1   13[COMMON] unsigned char 
  1302 ;; Return value:  Size  Location     Type
  1303 ;;		None               void
  1304 ;; Registers used:
  1305 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1306 ;; Tracked objects:
  1307 ;;		On entry : 0/0
  1308 ;;		On exit  : 0/0
  1309 ;;		Unchanged: 0/0
  1310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1311 ;;      Params:         0       0       0       0       0
  1312 ;;      Locals:         1       0       0       0       0
  1313 ;;      Temps:          2       0       0       0       0
  1314 ;;      Totals:         3       0       0       0       0
  1315 ;;Total ram usage:        3 bytes
  1316 ;; Hardware stack levels used:    1
  1317 ;; Hardware stack levels required when called:    3
  1318 ;; This function calls:
  1319 ;;		_get_USART_char
  1320 ;;		_send_USART_string
  1321 ;;		_flush_RCREG
  1322 ;; This function is called by:
  1323 ;;		_main
  1324 ;; This function uses a non-reentrant model
  1325 ;;
  1326                           
  1327                           
  1328                           ;psect for function _enterCommandMode
  1329  0F8C                     _enterCommandMode:	
  1330                           
  1331                           ;ZIGBEE_16F_MASTER.c: 207: flush_RCREG();
  1332                           
  1333                           ;incstack = 0
  1334                           ; Regs used in _enterCommandMode: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1335  0F8C  120A  158A  25F6   	fcall	_flush_RCREG
      +       120A  158A         
  1336                           
  1337                           ;ZIGBEE_16F_MASTER.c: 210: _delay((unsigned long)((15)*(4000000/4000.0)));
  1338  0F91  3014               	movlw	20
  1339  0F92  00FC               	movwf	??_enterCommandMode+1
  1340  0F93  3079               	movlw	121
  1341  0F94  00FB               	movwf	??_enterCommandMode
  1342  0F95                     u2257:	
  1343  0F95  0BFB               	decfsz	??_enterCommandMode,f
  1344  0F96  2F95               	goto	u2257
  1345  0F97  0BFC               	decfsz	??_enterCommandMode+1,f
  1346  0F98  2F95               	goto	u2257
  1347  0F99  2F9A               	nop2
  1348                           
  1349                           ;ZIGBEE_16F_MASTER.c: 213: send_USART_string("+++");
  1350  0F9A  3069               	movlw	low (STR_9-__stringbase)
  1351  0F9B  00F6               	movwf	?_send_USART_string
  1352  0F9C  3080               	movlw	128
  1353  0F9D  00F7               	movwf	?_send_USART_string+1
  1354  0F9E  120A  158A  2729   	fcall	_send_USART_string
      +       120A  158A         
  1355                           
  1356                           ;ZIGBEE_16F_MASTER.c: 216: _delay((unsigned long)((15)*(4000000/4000.0)));
  1357  0FA3  3014               	movlw	20
  1358  0FA4  00FC               	movwf	??_enterCommandMode+1
  1359  0FA5  3079               	movlw	121
  1360  0FA6  00FB               	movwf	??_enterCommandMode
  1361  0FA7                     u2267:	
  1362  0FA7  0BFB               	decfsz	??_enterCommandMode,f
  1363  0FA8  2FA7               	goto	u2267
  1364  0FA9  0BFC               	decfsz	??_enterCommandMode+1,f
  1365  0FAA  2FA7               	goto	u2267
  1366  0FAB  2FAC               	nop2
  1367                           
  1368                           ;ZIGBEE_16F_MASTER.c: 219: for(char iter = 0; iter < 2; iter++)
  1369  0FAC  01FD               	clrf	enterCommandMode@iter
  1370  0FAD                     L2:	
  1371  0FAD  3002               	movlw	2
  1372  0FAE  027D               	subwf	enterCommandMode@iter,w
  1373  0FAF  1803               	btfsc	3,0
  1374  0FB0  0008               	return
  1375                           
  1376                           ;ZIGBEE_16F_MASTER.c: 220: {BYTES_BUFFER[iter] = get_USART_char();}
  1377  0FB1  120A  158A  25CF   	fcall	_get_USART_char
      +       120A  158A         
  1378  0FB6  00FB               	movwf	??_enterCommandMode
  1379  0FB7  087D               	movf	enterCommandMode@iter,w
  1380  0FB8  3E3F               	addlw	_BYTES_BUFFER& (0+255)
  1381  0FB9  0084               	movwf	4
  1382  0FBA  087B               	movf	??_enterCommandMode,w
  1383  0FBB  1383               	bcf	3,7	;select IRP bank0
  1384  0FBC  0080               	movwf	0
  1385  0FBD  3001               	movlw	1
  1386  0FBE  00FB               	movwf	??_enterCommandMode
  1387  0FBF  087B               	movf	??_enterCommandMode,w
  1388  0FC0  07FD               	addwf	enterCommandMode@iter,f
  1389  0FC1  2FAD               	goto	L2
  1390  0FC2                     __end_of_enterCommandMode:	
  1391                           
  1392                           	psect	text4
  1393  0126                     __ptext4:	
  1394 ;; *************** function _setDestination *****************
  1395 ;; Defined at:
  1396 ;;		line 146 in file "..\Header Files\..\C Source Code\ZIGBEE_16F_MASTER.c"
  1397 ;; Parameters:    Size  Location     Type
  1398 ;;  destination     1    wreg     PTR const unsigned char 
  1399 ;;		 -> STR_11(17), 
  1400 ;; Auto vars:     Size  Location     Type
  1401 ;;  destination     1   18[BANK0 ] PTR const unsigned char 
  1402 ;;		 -> STR_11(17), 
  1403 ;;  iter            1   20[BANK0 ] unsigned char 
  1404 ;;  iter            1   19[BANK0 ] unsigned char 
  1405 ;;  subbuff2        9    9[BANK0 ] unsigned char [9]
  1406 ;;  subbuff         9    0[BANK0 ] unsigned char [9]
  1407 ;; Return value:  Size  Location     Type
  1408 ;;		None               void
  1409 ;; Registers used:
  1410 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1411 ;; Tracked objects:
  1412 ;;		On entry : 0/0
  1413 ;;		On exit  : 0/0
  1414 ;;		Unchanged: 0/0
  1415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1416 ;;      Params:         0       0       0       0       0
  1417 ;;      Locals:         0      21       0       0       0
  1418 ;;      Temps:          2       0       0       0       0
  1419 ;;      Totals:         2      21       0       0       0
  1420 ;;Total ram usage:       23 bytes
  1421 ;; Hardware stack levels used:    1
  1422 ;; Hardware stack levels required when called:    3
  1423 ;; This function calls:
  1424 ;;		_get_USART_char
  1425 ;;		_send_USART_string
  1426 ;;		_flush_RCREG
  1427 ;;		_memcpy
  1428 ;; This function is called by:
  1429 ;;		_main
  1430 ;; This function uses a non-reentrant model
  1431 ;;
  1432                           
  1433                           
  1434                           ;psect for function _setDestination
  1435  0126                     _setDestination:	
  1436                           
  1437                           ;incstack = 0
  1438                           ; Regs used in _setDestination: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1439                           ;setDestination@destination stored from wreg
  1440  0126  1283               	bcf	3,5	;RP0=0, select bank0
  1441  0127  1303               	bcf	3,6	;RP1=0, select bank0
  1442  0128  00B2               	movwf	setDestination@destination
  1443                           
  1444                           ;ZIGBEE_16F_MASTER.c: 152: flush_RCREG();
  1445  0129  120A  158A  25F6   	fcall	_flush_RCREG
      +       120A  118A         
  1446                           
  1447                           ;ZIGBEE_16F_MASTER.c: 153: send_USART_string("ATDH");
  1448  012E  305F               	movlw	low (STR_5-__stringbase)
  1449  012F  00F6               	movwf	?_send_USART_string
  1450  0130  3080               	movlw	128
  1451  0131  00F7               	movwf	?_send_USART_string+1
  1452  0132  120A  158A  2729   	fcall	_send_USART_string
      +       120A  118A         
  1453                           
  1454                           ;ZIGBEE_16F_MASTER.c: 156: char subbuff[9];
  1455                           ;ZIGBEE_16F_MASTER.c: 157: memcpy( subbuff, &destination[0], 8 );
  1456  0137  1283               	bcf	3,5	;RP0=0, select bank0
  1457  0138  1303               	bcf	3,6	;RP1=0, select bank0
  1458  0139  0832               	movf	setDestination@destination,w
  1459  013A  00FB               	movwf	??_setDestination
  1460  013B  087B               	movf	??_setDestination,w
  1461  013C  00F0               	movwf	?_memcpy
  1462  013D  3008               	movlw	8
  1463  013E  00F1               	movwf	?_memcpy+1
  1464  013F  3000               	movlw	0
  1465  0140  00F2               	movwf	?_memcpy+2
  1466  0141  3020               	movlw	setDestination@subbuff& (0+255)
  1467  0142  120A  158A  26CE   	fcall	_memcpy
      +       120A  118A         
  1468                           
  1469                           ;ZIGBEE_16F_MASTER.c: 158: subbuff[8] = '\0';
  1470  0147  1283               	bcf	3,5	;RP0=0, select bank0
  1471  0148  1303               	bcf	3,6	;RP1=0, select bank0
  1472  0149  01A8               	clrf	setDestination@subbuff+8
  1473                           
  1474                           ;ZIGBEE_16F_MASTER.c: 159: send_USART_string(subbuff);
  1475  014A  3020               	movlw	setDestination@subbuff& (0+255)
  1476  014B  00F6               	movwf	?_send_USART_string
  1477  014C  3000               	movlw	0
  1478  014D  00F7               	movwf	?_send_USART_string+1
  1479  014E  120A  158A  2729   	fcall	_send_USART_string
      +       120A  118A         
  1480                           
  1481                           ;ZIGBEE_16F_MASTER.c: 161: send_USART_string("\r");
  1482  0153  304B               	movlw	low ((STR_1+4)-__stringbase)
  1483  0154  00F6               	movwf	?_send_USART_string
  1484  0155  3080               	movlw	128
  1485  0156  00F7               	movwf	?_send_USART_string+1
  1486  0157  120A  158A  2729   	fcall	_send_USART_string
      +       120A  118A         
  1487                           
  1488                           ;ZIGBEE_16F_MASTER.c: 164: for(char iter = 0; iter < 2; iter++)
  1489  015C  1283               	bcf	3,5	;RP0=0, select bank0
  1490  015D  1303               	bcf	3,6	;RP1=0, select bank0
  1491  015E  01B3               	clrf	setDestination@iter
  1492  015F  3002               	movlw	2
  1493  0160  0233               	subwf	setDestination@iter,w
  1494  0161  1803               	btfsc	3,0
  1495  0162  2979               	goto	l2406
  1496  0163                     l2400:	
  1497                           
  1498                           ;ZIGBEE_16F_MASTER.c: 165: {BYTES_BUFFER[iter] = get_USART_char();}
  1499  0163  120A  158A  25CF   	fcall	_get_USART_char
      +       120A  118A         
  1500  0168  00FB               	movwf	??_setDestination
  1501  0169  1283               	bcf	3,5	;RP0=0, select bank0
  1502  016A  1303               	bcf	3,6	;RP1=0, select bank0
  1503  016B  0833               	movf	setDestination@iter,w
  1504  016C  3E3F               	addlw	_BYTES_BUFFER& (0+255)
  1505  016D  0084               	movwf	4
  1506  016E  087B               	movf	??_setDestination,w
  1507  016F  1383               	bcf	3,7	;select IRP bank0
  1508  0170  0080               	movwf	0
  1509  0171  3001               	movlw	1
  1510  0172  00FB               	movwf	??_setDestination
  1511  0173  087B               	movf	??_setDestination,w
  1512  0174  07B3               	addwf	setDestination@iter,f
  1513  0175  3002               	movlw	2
  1514  0176  0233               	subwf	setDestination@iter,w
  1515  0177  1C03               	skipc
  1516  0178  2963               	goto	l2400
  1517  0179                     l2406:	
  1518                           
  1519                           ;ZIGBEE_16F_MASTER.c: 169: flush_RCREG();
  1520  0179  120A  158A  25F6   	fcall	_flush_RCREG
      +       120A  118A         
  1521                           
  1522                           ;ZIGBEE_16F_MASTER.c: 170: send_USART_string("ATDL");
  1523  017E  3064               	movlw	low (STR_7-__stringbase)
  1524  017F  00F6               	movwf	?_send_USART_string
  1525  0180  3080               	movlw	128
  1526  0181  00F7               	movwf	?_send_USART_string+1
  1527  0182  120A  158A  2729   	fcall	_send_USART_string
      +       120A  118A         
  1528                           
  1529                           ;ZIGBEE_16F_MASTER.c: 173: char subbuff2[9];
  1530                           ;ZIGBEE_16F_MASTER.c: 174: memcpy( subbuff2, &destination[8], 8 );
  1531  0187  1283               	bcf	3,5	;RP0=0, select bank0
  1532  0188  1303               	bcf	3,6	;RP1=0, select bank0
  1533  0189  0832               	movf	setDestination@destination,w
  1534  018A  3E08               	addlw	8
  1535  018B  00FB               	movwf	??_setDestination
  1536  018C  087B               	movf	??_setDestination,w
  1537  018D  00F0               	movwf	?_memcpy
  1538  018E  3008               	movlw	8
  1539  018F  00F1               	movwf	?_memcpy+1
  1540  0190  3000               	movlw	0
  1541  0191  00F2               	movwf	?_memcpy+2
  1542  0192  3029               	movlw	setDestination@subbuff2& (0+255)
  1543  0193  120A  158A  26CE   	fcall	_memcpy
      +       120A  118A         
  1544                           
  1545                           ;ZIGBEE_16F_MASTER.c: 175: subbuff2[8] = '\0';
  1546  0198  1283               	bcf	3,5	;RP0=0, select bank0
  1547  0199  1303               	bcf	3,6	;RP1=0, select bank0
  1548  019A  01B1               	clrf	setDestination@subbuff2+8
  1549                           
  1550                           ;ZIGBEE_16F_MASTER.c: 176: send_USART_string(subbuff2);
  1551  019B  3029               	movlw	setDestination@subbuff2& (0+255)
  1552  019C  00F6               	movwf	?_send_USART_string
  1553  019D  3000               	movlw	0
  1554  019E  00F7               	movwf	?_send_USART_string+1
  1555  019F  120A  158A  2729   	fcall	_send_USART_string
      +       120A  118A         
  1556                           
  1557                           ;ZIGBEE_16F_MASTER.c: 178: send_USART_string("\r");
  1558  01A4  304B               	movlw	low ((STR_1+4)-__stringbase)
  1559  01A5  00F6               	movwf	?_send_USART_string
  1560  01A6  3080               	movlw	128
  1561  01A7  00F7               	movwf	?_send_USART_string+1
  1562  01A8  120A  158A  2729   	fcall	_send_USART_string
      +       120A  118A         
  1563                           
  1564                           ;ZIGBEE_16F_MASTER.c: 181: for(char iter = 0; iter < 2; iter++)
  1565  01AD  1283               	bcf	3,5	;RP0=0, select bank0
  1566  01AE  1303               	bcf	3,6	;RP1=0, select bank0
  1567  01AF  01B4               	clrf	setDestination@iter_140
  1568  01B0  3002               	movlw	2
  1569  01B1  0234               	subwf	setDestination@iter_140,w
  1570  01B2  1803               	btfsc	3,0
  1571  01B3  29CA               	goto	l2430
  1572  01B4                     l2424:	
  1573                           
  1574                           ;ZIGBEE_16F_MASTER.c: 182: {BYTES_BUFFER[iter] = get_USART_char();}
  1575  01B4  120A  158A  25CF   	fcall	_get_USART_char
      +       120A  118A         
  1576  01B9  00FB               	movwf	??_setDestination
  1577  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  1578  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  1579  01BC  0834               	movf	setDestination@iter_140,w
  1580  01BD  3E3F               	addlw	_BYTES_BUFFER& (0+255)
  1581  01BE  0084               	movwf	4
  1582  01BF  087B               	movf	??_setDestination,w
  1583  01C0  1383               	bcf	3,7	;select IRP bank0
  1584  01C1  0080               	movwf	0
  1585  01C2  3001               	movlw	1
  1586  01C3  00FB               	movwf	??_setDestination
  1587  01C4  087B               	movf	??_setDestination,w
  1588  01C5  07B4               	addwf	setDestination@iter_140,f
  1589  01C6  3002               	movlw	2
  1590  01C7  0234               	subwf	setDestination@iter_140,w
  1591  01C8  1C03               	skipc
  1592  01C9  29B4               	goto	l2424
  1593  01CA                     l2430:	
  1594                           
  1595                           ;ZIGBEE_16F_MASTER.c: 184: _delay((unsigned long)((10)*(4000000/4000.0)));
  1596  01CA  300D               	movlw	13
  1597  01CB  00FC               	movwf	??_setDestination+1
  1598  01CC  30FB               	movlw	251
  1599  01CD  00FB               	movwf	??_setDestination
  1600  01CE                     u2277:	
  1601  01CE  0BFB               	decfsz	??_setDestination,f
  1602  01CF  29CE               	goto	u2277
  1603  01D0  0BFC               	decfsz	??_setDestination+1,f
  1604  01D1  29CE               	goto	u2277
  1605  01D2  29D3               	nop2
  1606  01D3  0008               	return
  1607  01D4                     __end_of_setDestination:	
  1608                           
  1609                           	psect	text5
  1610  0ECE                     __ptext5:	
  1611 ;; *************** function _memcpy *****************
  1612 ;; Defined at:
  1613 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memcpy.c"
  1614 ;; Parameters:    Size  Location     Type
  1615 ;;  d1              1    wreg     PTR void 
  1616 ;;		 -> setDestination@subbuff2(9), setDestination@subbuff(9), 
  1617 ;;  s1              1    0[COMMON] PTR const void 
  1618 ;;		 -> STR_11(17), 
  1619 ;;  n               2    1[COMMON] unsigned int 
  1620 ;; Auto vars:     Size  Location     Type
  1621 ;;  d1              1    4[COMMON] PTR void 
  1622 ;;		 -> setDestination@subbuff2(9), setDestination@subbuff(9), 
  1623 ;;  s               1    6[COMMON] PTR const unsigned char 
  1624 ;;		 -> STR_11(17), 
  1625 ;;  d               1    5[COMMON] PTR unsigned char 
  1626 ;;		 -> setDestination@subbuff2(9), setDestination@subbuff(9), 
  1627 ;; Return value:  Size  Location     Type
  1628 ;;                  1    wreg      PTR void 
  1629 ;; Registers used:
  1630 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1631 ;; Tracked objects:
  1632 ;;		On entry : 0/0
  1633 ;;		On exit  : 0/0
  1634 ;;		Unchanged: 0/0
  1635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1636 ;;      Params:         3       0       0       0       0
  1637 ;;      Locals:         3       0       0       0       0
  1638 ;;      Temps:          1       0       0       0       0
  1639 ;;      Totals:         7       0       0       0       0
  1640 ;;Total ram usage:        7 bytes
  1641 ;; Hardware stack levels used:    2
  1642 ;; This function calls:
  1643 ;;		Nothing
  1644 ;; This function is called by:
  1645 ;;		_setDestination
  1646 ;; This function uses a non-reentrant model
  1647 ;;
  1648                           
  1649                           
  1650                           ;psect for function _memcpy
  1651  0ECE                     _memcpy:	
  1652                           
  1653                           ;incstack = 0
  1654                           ; Regs used in _memcpy: [wreg-fsr0h+status,2+status,0+pclath]
  1655                           ;memcpy@d1 stored from wreg
  1656  0ECE  00F4               	movwf	memcpy@d1
  1657  0ECF  0870               	movf	memcpy@s1,w
  1658  0ED0  00F3               	movwf	??_memcpy
  1659  0ED1  0873               	movf	??_memcpy,w
  1660  0ED2  00F6               	movwf	memcpy@s
  1661  0ED3  0874               	movf	memcpy@d1,w
  1662  0ED4  00F3               	movwf	??_memcpy
  1663  0ED5  0873               	movf	??_memcpy,w
  1664  0ED6  00F5               	movwf	memcpy@d
  1665  0ED7                     l1816:	
  1666  0ED7  3001               	movlw	1
  1667  0ED8  02F1               	subwf	memcpy@n,f
  1668  0ED9  3000               	movlw	0
  1669  0EDA  1C03               	skipc
  1670  0EDB  03F2               	decf	memcpy@n+1,f
  1671  0EDC  02F2               	subwf	memcpy@n+1,f
  1672  0EDD  30FF               	movlw	255
  1673  0EDE  0672               	xorwf	memcpy@n+1,w
  1674  0EDF  1D03               	skipz
  1675  0EE0  2EE3               	goto	u1155
  1676  0EE1  30FF               	movlw	255
  1677  0EE2  0671               	xorwf	memcpy@n,w
  1678  0EE3                     u1155:	
  1679  0EE3  1903               	btfsc	3,2
  1680  0EE4  0008               	return
  1681  0EE5  0876               	movf	memcpy@s,w
  1682  0EE6  0084               	movwf	4
  1683  0EE7  120A  118A  200D   	fcall	stringdir
      +       120A  158A         
  1684  0EEC  00F3               	movwf	??_memcpy
  1685  0EED  0875               	movf	memcpy@d,w
  1686  0EEE  0084               	movwf	4
  1687  0EEF  0873               	movf	??_memcpy,w
  1688  0EF0  1383               	bcf	3,7	;select IRP bank0
  1689  0EF1  0080               	movwf	0
  1690  0EF2  3001               	movlw	1
  1691  0EF3  00F3               	movwf	??_memcpy
  1692  0EF4  0873               	movf	??_memcpy,w
  1693  0EF5  07F6               	addwf	memcpy@s,f
  1694  0EF6  3001               	movlw	1
  1695  0EF7  00F3               	movwf	??_memcpy
  1696  0EF8  0873               	movf	??_memcpy,w
  1697  0EF9  07F5               	addwf	memcpy@d,f
  1698  0EFA  2ED7               	goto	l1816
  1699  0EFB                     __end_of_memcpy:	
  1700                           ;	Return value of _memcpy is never used
  1701                           
  1702                           
  1703                           	psect	text6
  1704  02AD                     __ptext6:	
  1705 ;; *************** function _getIdentification *****************
  1706 ;; Defined at:
  1707 ;;		line 81 in file "..\Header Files\..\C Source Code\ZIGBEE_16F_MASTER.c"
  1708 ;; Parameters:    Size  Location     Type
  1709 ;;  result          1    wreg     PTR unsigned char 
  1710 ;;		 -> main@sensor(17), 
  1711 ;; Auto vars:     Size  Location     Type
  1712 ;;  result          1   12[BANK0 ] PTR unsigned char 
  1713 ;;		 -> main@sensor(17), 
  1714 ;;  iter            1   16[BANK0 ] unsigned char 
  1715 ;;  iter            1   15[BANK0 ] char 
  1716 ;;  iter            1   11[BANK0 ] unsigned char 
  1717 ;;  iter            1   14[BANK0 ] unsigned char 
  1718 ;;  iter            1   13[BANK0 ] char 
  1719 ;;  iter            1   10[BANK0 ] unsigned char 
  1720 ;;  iter            1    9[BANK0 ] unsigned char 
  1721 ;;  temp            8    0[BANK0 ] unsigned char [8]
  1722 ;;  offset          1    8[BANK0 ] unsigned char 
  1723 ;; Return value:  Size  Location     Type
  1724 ;;		None               void
  1725 ;; Registers used:
  1726 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1727 ;; Tracked objects:
  1728 ;;		On entry : 0/0
  1729 ;;		On exit  : 0/0
  1730 ;;		Unchanged: 0/0
  1731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1732 ;;      Params:         0       0       0       0       0
  1733 ;;      Locals:         0      17       0       0       0
  1734 ;;      Temps:          2       0       0       0       0
  1735 ;;      Totals:         2      17       0       0       0
  1736 ;;Total ram usage:       19 bytes
  1737 ;; Hardware stack levels used:    1
  1738 ;; Hardware stack levels required when called:    3
  1739 ;; This function calls:
  1740 ;;		_get_USART_char_timeout
  1741 ;;		_send_USART_string
  1742 ;;		_flush_RCREG
  1743 ;; This function is called by:
  1744 ;;		_main
  1745 ;; This function uses a non-reentrant model
  1746 ;;
  1747                           
  1748                           
  1749                           ;psect for function _getIdentification
  1750  02AD                     _getIdentification:	
  1751                           
  1752                           ;incstack = 0
  1753                           ; Regs used in _getIdentification: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1754                           ;getIdentification@result stored from wreg
  1755  02AD  1283               	bcf	3,5	;RP0=0, select bank0
  1756  02AE  1303               	bcf	3,6	;RP1=0, select bank0
  1757  02AF  00AC               	movwf	getIdentification@result
  1758                           
  1759                           ;ZIGBEE_16F_MASTER.c: 87: for(char iter = 0; iter < 16; iter++)
  1760  02B0  01A9               	clrf	getIdentification@iter
  1761  02B1  3010               	movlw	16
  1762  02B2  0229               	subwf	getIdentification@iter,w
  1763  02B3  1803               	btfsc	3,0
  1764  02B4  2AC7               	goto	l2292
  1765  02B5                     l2286:	
  1766                           
  1767                           ;ZIGBEE_16F_MASTER.c: 88: {result[iter] = '0';}
  1768  02B5  3030               	movlw	48
  1769  02B6  00FB               	movwf	??_getIdentification
  1770  02B7  0829               	movf	getIdentification@iter,w
  1771  02B8  072C               	addwf	getIdentification@result,w
  1772  02B9  00FC               	movwf	??_getIdentification+1
  1773  02BA  087C               	movf	??_getIdentification+1,w
  1774  02BB  0084               	movwf	4
  1775  02BC  087B               	movf	??_getIdentification,w
  1776  02BD  1383               	bcf	3,7	;select IRP bank0
  1777  02BE  0080               	movwf	0
  1778  02BF  3001               	movlw	1
  1779  02C0  00FB               	movwf	??_getIdentification
  1780  02C1  087B               	movf	??_getIdentification,w
  1781  02C2  07A9               	addwf	getIdentification@iter,f
  1782  02C3  3010               	movlw	16
  1783  02C4  0229               	subwf	getIdentification@iter,w
  1784  02C5  1C03               	skipc
  1785  02C6  2AB5               	goto	l2286
  1786  02C7                     l2292:	
  1787                           
  1788                           ;ZIGBEE_16F_MASTER.c: 91: result[16] = '\0';
  1789  02C7  082C               	movf	getIdentification@result,w
  1790  02C8  3E10               	addlw	16
  1791  02C9  0084               	movwf	4
  1792  02CA  1383               	bcf	3,7	;select IRP bank0
  1793  02CB  0180               	clrf	0
  1794                           
  1795                           ;ZIGBEE_16F_MASTER.c: 94: flush_RCREG();
  1796  02CC  120A  158A  25F6   	fcall	_flush_RCREG
      +       120A  118A         
  1797                           
  1798                           ;ZIGBEE_16F_MASTER.c: 95: send_USART_string("ATSH\r");
  1799  02D1  304D               	movlw	low (STR_3-__stringbase)
  1800  02D2  00F6               	movwf	?_send_USART_string
  1801  02D3  3080               	movlw	128
  1802  02D4  00F7               	movwf	?_send_USART_string+1
  1803  02D5  120A  158A  2729   	fcall	_send_USART_string
      +       120A  118A         
  1804                           
  1805                           ;ZIGBEE_16F_MASTER.c: 97: char temp[8];
  1806                           ;ZIGBEE_16F_MASTER.c: 98: char offset = 0;
  1807  02DA  1283               	bcf	3,5	;RP0=0, select bank0
  1808  02DB  1303               	bcf	3,6	;RP1=0, select bank0
  1809  02DC  01A8               	clrf	getIdentification@offset
  1810                           
  1811                           ;ZIGBEE_16F_MASTER.c: 102: for(char iter = 0; iter < 8; iter++)
  1812  02DD  01AA               	clrf	getIdentification@iter_124
  1813  02DE  3008               	movlw	8
  1814  02DF  022A               	subwf	getIdentification@iter_124,w
  1815  02E0  1803               	btfsc	3,0
  1816  02E1  2AF8               	goto	l2312
  1817  02E2                     l2306:	
  1818                           
  1819                           ;ZIGBEE_16F_MASTER.c: 103: {temp[iter] = get_USART_char_timeout();}
  1820  02E2  120A  158A  26FB   	fcall	_get_USART_char_timeout
      +       120A  118A         
  1821  02E7  00FB               	movwf	??_getIdentification
  1822  02E8  1283               	bcf	3,5	;RP0=0, select bank0
  1823  02E9  1303               	bcf	3,6	;RP1=0, select bank0
  1824  02EA  082A               	movf	getIdentification@iter_124,w
  1825  02EB  3E20               	addlw	getIdentification@temp& (0+255)
  1826  02EC  0084               	movwf	4
  1827  02ED  087B               	movf	??_getIdentification,w
  1828  02EE  1383               	bcf	3,7	;select IRP bank0
  1829  02EF  0080               	movwf	0
  1830  02F0  3001               	movlw	1
  1831  02F1  00FB               	movwf	??_getIdentification
  1832  02F2  087B               	movf	??_getIdentification,w
  1833  02F3  07AA               	addwf	getIdentification@iter_124,f
  1834  02F4  3008               	movlw	8
  1835  02F5  022A               	subwf	getIdentification@iter_124,w
  1836  02F6  1C03               	skipc
  1837  02F7  2AE2               	goto	l2306
  1838  02F8                     l2312:	
  1839                           
  1840                           ;ZIGBEE_16F_MASTER.c: 107: for(signed char iter = 7; iter >= 0; iter--)
  1841  02F8  3007               	movlw	7
  1842  02F9  00FB               	movwf	??_getIdentification
  1843  02FA  087B               	movf	??_getIdentification,w
  1844  02FB  00AD               	movwf	getIdentification@iter_125
  1845  02FC  1BAD               	btfsc	getIdentification@iter_125,7
  1846  02FD  2B16               	goto	l2326
  1847  02FE                     l2318:	
  1848                           
  1849                           ;ZIGBEE_16F_MASTER.c: 108: {
  1850                           ;ZIGBEE_16F_MASTER.c: 109: if(temp[iter] == '\0' || temp[iter] == '\r')
  1851  02FE  082D               	movf	getIdentification@iter_125,w
  1852  02FF  3E20               	addlw	getIdentification@temp& (0+255)
  1853  0300  0084               	movwf	4
  1854  0301  1383               	bcf	3,7	;select IRP bank0
  1855  0302  0880               	movf	0,f
  1856  0303  1903               	skipnz
  1857  0304  2B0C               	goto	l2322
  1858  0305  082D               	movf	getIdentification@iter_125,w
  1859  0306  3E20               	addlw	getIdentification@temp& (0+255)
  1860  0307  0084               	movwf	4
  1861  0308  0800               	movf	0,w
  1862  0309  3A0D               	xorlw	13
  1863  030A  1D03               	skipz
  1864  030B  2B10               	goto	l153
  1865  030C                     l2322:	
  1866                           
  1867                           ;ZIGBEE_16F_MASTER.c: 110: {offset++;}
  1868  030C  3001               	movlw	1
  1869  030D  00FB               	movwf	??_getIdentification
  1870  030E  087B               	movf	??_getIdentification,w
  1871  030F  07A8               	addwf	getIdentification@offset,f
  1872  0310                     l153:	
  1873  0310  30FF               	movlw	-1
  1874  0311  00FB               	movwf	??_getIdentification
  1875  0312  087B               	movf	??_getIdentification,w
  1876  0313  07AD               	addwf	getIdentification@iter_125,f
  1877  0314  1FAD               	btfss	getIdentification@iter_125,7
  1878  0315  2AFE               	goto	l2318
  1879  0316                     l2326:	
  1880                           
  1881                           ;ZIGBEE_16F_MASTER.c: 111: }
  1882                           ;ZIGBEE_16F_MASTER.c: 114: for(char iter = 0; iter < 8; iter++)
  1883  0316  01AE               	clrf	getIdentification@iter_126
  1884  0317  3008               	movlw	8
  1885  0318  022E               	subwf	getIdentification@iter_126,w
  1886  0319  1803               	btfsc	3,0
  1887  031A  2B31               	goto	l2338
  1888  031B                     l2332:	
  1889                           
  1890                           ;ZIGBEE_16F_MASTER.c: 115: {
  1891                           ;ZIGBEE_16F_MASTER.c: 116: result[iter+offset] = temp[iter];
  1892  031B  082E               	movf	getIdentification@iter_126,w
  1893  031C  3E20               	addlw	getIdentification@temp& (0+255)
  1894  031D  0084               	movwf	4
  1895  031E  1383               	bcf	3,7	;select IRP bank0
  1896  031F  0800               	movf	0,w
  1897  0320  00FB               	movwf	??_getIdentification
  1898  0321  0828               	movf	getIdentification@offset,w
  1899  0322  072E               	addwf	getIdentification@iter_126,w
  1900  0323  072C               	addwf	getIdentification@result,w
  1901  0324  00FC               	movwf	??_getIdentification+1
  1902  0325  087C               	movf	??_getIdentification+1,w
  1903  0326  0084               	movwf	4
  1904  0327  087B               	movf	??_getIdentification,w
  1905  0328  0080               	movwf	0
  1906  0329  3001               	movlw	1
  1907  032A  00FB               	movwf	??_getIdentification
  1908  032B  087B               	movf	??_getIdentification,w
  1909  032C  07AE               	addwf	getIdentification@iter_126,f
  1910  032D  3008               	movlw	8
  1911  032E  022E               	subwf	getIdentification@iter_126,w
  1912  032F  1C03               	skipc
  1913  0330  2B1B               	goto	l2332
  1914  0331                     l2338:	
  1915                           
  1916                           ;ZIGBEE_16F_MASTER.c: 117: }
  1917                           ;ZIGBEE_16F_MASTER.c: 120: flush_RCREG();
  1918  0331  120A  158A  25F6   	fcall	_flush_RCREG
      +       120A  118A         
  1919                           
  1920                           ;ZIGBEE_16F_MASTER.c: 121: send_USART_string("ATSL\r");
  1921  0336  3053               	movlw	low (STR_4-__stringbase)
  1922  0337  00F6               	movwf	?_send_USART_string
  1923  0338  3080               	movlw	128
  1924  0339  00F7               	movwf	?_send_USART_string+1
  1925  033A  120A  158A  2729   	fcall	_send_USART_string
      +       120A  118A         
  1926                           
  1927                           ;ZIGBEE_16F_MASTER.c: 123: offset = 0;
  1928  033F  1283               	bcf	3,5	;RP0=0, select bank0
  1929  0340  1303               	bcf	3,6	;RP1=0, select bank0
  1930  0341  01A8               	clrf	getIdentification@offset
  1931                           
  1932                           ;ZIGBEE_16F_MASTER.c: 127: for(char iter = 0; iter < 8; iter++)
  1933  0342  01AB               	clrf	getIdentification@iter_128
  1934  0343  3008               	movlw	8
  1935  0344  022B               	subwf	getIdentification@iter_128,w
  1936  0345  1803               	btfsc	3,0
  1937  0346  2B5D               	goto	l2356
  1938  0347                     l2350:	
  1939                           
  1940                           ;ZIGBEE_16F_MASTER.c: 128: {temp[iter] = get_USART_char_timeout();}
  1941  0347  120A  158A  26FB   	fcall	_get_USART_char_timeout
      +       120A  118A         
  1942  034C  00FB               	movwf	??_getIdentification
  1943  034D  1283               	bcf	3,5	;RP0=0, select bank0
  1944  034E  1303               	bcf	3,6	;RP1=0, select bank0
  1945  034F  082B               	movf	getIdentification@iter_128,w
  1946  0350  3E20               	addlw	getIdentification@temp& (0+255)
  1947  0351  0084               	movwf	4
  1948  0352  087B               	movf	??_getIdentification,w
  1949  0353  1383               	bcf	3,7	;select IRP bank0
  1950  0354  0080               	movwf	0
  1951  0355  3001               	movlw	1
  1952  0356  00FB               	movwf	??_getIdentification
  1953  0357  087B               	movf	??_getIdentification,w
  1954  0358  07AB               	addwf	getIdentification@iter_128,f
  1955  0359  3008               	movlw	8
  1956  035A  022B               	subwf	getIdentification@iter_128,w
  1957  035B  1C03               	skipc
  1958  035C  2B47               	goto	l2350
  1959  035D                     l2356:	
  1960                           
  1961                           ;ZIGBEE_16F_MASTER.c: 132: for(signed char iter = 7; iter >= 0; iter--)
  1962  035D  3007               	movlw	7
  1963  035E  00FB               	movwf	??_getIdentification
  1964  035F  087B               	movf	??_getIdentification,w
  1965  0360  00AF               	movwf	getIdentification@iter_129
  1966  0361  1BAF               	btfsc	getIdentification@iter_129,7
  1967  0362  2B7B               	goto	l2370
  1968  0363                     l2362:	
  1969                           
  1970                           ;ZIGBEE_16F_MASTER.c: 133: {
  1971                           ;ZIGBEE_16F_MASTER.c: 134: if(temp[iter] == '\0' || temp[iter] == '\r')
  1972  0363  082F               	movf	getIdentification@iter_129,w
  1973  0364  3E20               	addlw	getIdentification@temp& (0+255)
  1974  0365  0084               	movwf	4
  1975  0366  1383               	bcf	3,7	;select IRP bank0
  1976  0367  0880               	movf	0,f
  1977  0368  1903               	skipnz
  1978  0369  2B71               	goto	l2366
  1979  036A  082F               	movf	getIdentification@iter_129,w
  1980  036B  3E20               	addlw	getIdentification@temp& (0+255)
  1981  036C  0084               	movwf	4
  1982  036D  0800               	movf	0,w
  1983  036E  3A0D               	xorlw	13
  1984  036F  1D03               	skipz
  1985  0370  2B75               	goto	l162
  1986  0371                     l2366:	
  1987                           
  1988                           ;ZIGBEE_16F_MASTER.c: 135: {offset++;}
  1989  0371  3001               	movlw	1
  1990  0372  00FB               	movwf	??_getIdentification
  1991  0373  087B               	movf	??_getIdentification,w
  1992  0374  07A8               	addwf	getIdentification@offset,f
  1993  0375                     l162:	
  1994  0375  30FF               	movlw	-1
  1995  0376  00FB               	movwf	??_getIdentification
  1996  0377  087B               	movf	??_getIdentification,w
  1997  0378  07AF               	addwf	getIdentification@iter_129,f
  1998  0379  1FAF               	btfss	getIdentification@iter_129,7
  1999  037A  2B63               	goto	l2362
  2000  037B                     l2370:	
  2001                           
  2002                           ;ZIGBEE_16F_MASTER.c: 136: }
  2003                           ;ZIGBEE_16F_MASTER.c: 139: for(char iter = 0; iter < 8; iter++)
  2004  037B  01B0               	clrf	getIdentification@iter_130
  2005  037C                     L3:	
  2006  037C  3008               	movlw	8
  2007  037D  0230               	subwf	getIdentification@iter_130,w
  2008  037E  1803               	btfsc	3,0
  2009  037F  0008               	return
  2010                           
  2011                           ;ZIGBEE_16F_MASTER.c: 140: {
  2012                           ;ZIGBEE_16F_MASTER.c: 141: result[iter+8+offset] = temp[iter];
  2013  0380  0830               	movf	getIdentification@iter_130,w
  2014  0381  3E20               	addlw	getIdentification@temp& (0+255)
  2015  0382  0084               	movwf	4
  2016  0383  1383               	bcf	3,7	;select IRP bank0
  2017  0384  0800               	movf	0,w
  2018  0385  00FB               	movwf	??_getIdentification
  2019  0386  0828               	movf	getIdentification@offset,w
  2020  0387  0730               	addwf	getIdentification@iter_130,w
  2021  0388  3E08               	addlw	8
  2022  0389  072C               	addwf	getIdentification@result,w
  2023  038A  00FC               	movwf	??_getIdentification+1
  2024  038B  087C               	movf	??_getIdentification+1,w
  2025  038C  0084               	movwf	4
  2026  038D  087B               	movf	??_getIdentification,w
  2027  038E  0080               	movwf	0
  2028  038F  3001               	movlw	1
  2029  0390  00FB               	movwf	??_getIdentification
  2030  0391  087B               	movf	??_getIdentification,w
  2031  0392  07B0               	addwf	getIdentification@iter_130,f
  2032  0393  2B7C               	goto	L3
  2033  0394                     __end_of_getIdentification:	
  2034                           
  2035                           	psect	text7
  2036  0EFB                     __ptext7:	
  2037 ;; *************** function _get_USART_char_timeout *****************
  2038 ;; Defined at:
  2039 ;;		line 125 in file "..\Header Files\..\C Source Code\USART_16F_MASTER.c"
  2040 ;; Parameters:    Size  Location     Type
  2041 ;;		None
  2042 ;; Auto vars:     Size  Location     Type
  2043 ;;  timeout_int     2    1[COMMON] int 
  2044 ;; Return value:  Size  Location     Type
  2045 ;;                  1    wreg      unsigned char 
  2046 ;; Registers used:
  2047 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2048 ;; Tracked objects:
  2049 ;;		On entry : 0/0
  2050 ;;		On exit  : 0/0
  2051 ;;		Unchanged: 0/0
  2052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2053 ;;      Params:         0       0       0       0       0
  2054 ;;      Locals:         2       0       0       0       0
  2055 ;;      Temps:          0       0       0       0       0
  2056 ;;      Totals:         2       0       0       0       0
  2057 ;;Total ram usage:        2 bytes
  2058 ;; Hardware stack levels used:    1
  2059 ;; Hardware stack levels required when called:    1
  2060 ;; This function calls:
  2061 ;;		_clear_usart_errors
  2062 ;; This function is called by:
  2063 ;;		_getIdentification
  2064 ;; This function uses a non-reentrant model
  2065 ;;
  2066                           
  2067                           
  2068                           ;psect for function _get_USART_char_timeout
  2069  0EFB                     _get_USART_char_timeout:	
  2070                           
  2071                           ;USART_16F_MASTER.c: 127: for( int timeout_int = 1000000; timeout_int > 0; timeout_int--)
  2072                           
  2073                           ;incstack = 0
  2074                           ; Regs used in _get_USART_char_timeout: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2075  0EFB  3040               	movlw	64
  2076  0EFC  00F1               	movwf	get_USART_char_timeout@timeout_int
  2077  0EFD  3042               	movlw	66
  2078  0EFE  00F2               	movwf	get_USART_char_timeout@timeout_int+1
  2079  0EFF  0872               	movf	get_USART_char_timeout@timeout_int+1,w
  2080  0F00  3A80               	xorlw	128
  2081  0F01  00FF               	movwf	127
  2082  0F02  3080               	movlw	128
  2083  0F03  027F               	subwf	127,w
  2084  0F04  1D03               	skipz
  2085  0F05  2F08               	goto	u1385
  2086  0F06  3001               	movlw	1
  2087  0F07  0271               	subwf	get_USART_char_timeout@timeout_int,w
  2088  0F08                     u1385:	
  2089  0F08  1C03               	btfss	3,0
  2090  0F09  2F27               	goto	l1970
  2091  0F0A                     l103:	
  2092                           
  2093                           ;USART_16F_MASTER.c: 128: {
  2094                           ;USART_16F_MASTER.c: 129: if (RCIF == 1)
  2095  0F0A  1283               	bcf	3,5	;RP0=0, select bank0
  2096  0F0B  1303               	bcf	3,6	;RP1=0, select bank0
  2097  0F0C  1E8C               	btfss	12,5	;volatile
  2098  0F0D  2F10               	goto	l1962
  2099                           
  2100                           ;USART_16F_MASTER.c: 130: {return RCREG;}
  2101  0F0E  081A               	movf	26,w	;volatile
  2102  0F0F  0008               	return
  2103  0F10                     l1962:	
  2104                           
  2105                           ;USART_16F_MASTER.c: 131: clear_usart_errors();
  2106  0F10  120A  158A  264D   	fcall	_clear_usart_errors
      +       120A  158A         
  2107                           
  2108                           ;USART_16F_MASTER.c: 132: _delay((unsigned long)((1)*(4000000/4000000.0)));
  2109  0F15  0000               	nop
  2110  0F16  30FF               	movlw	255
  2111  0F17  07F1               	addwf	get_USART_char_timeout@timeout_int,f
  2112  0F18  1803               	skipnc
  2113  0F19  0AF2               	incf	get_USART_char_timeout@timeout_int+1,f
  2114  0F1A  30FF               	movlw	255
  2115  0F1B  07F2               	addwf	get_USART_char_timeout@timeout_int+1,f
  2116  0F1C  0872               	movf	get_USART_char_timeout@timeout_int+1,w
  2117  0F1D  3A80               	xorlw	128
  2118  0F1E  00FF               	movwf	127
  2119  0F1F  3080               	movlw	128
  2120  0F20  027F               	subwf	127,w
  2121  0F21  1D03               	skipz
  2122  0F22  2F25               	goto	u1405
  2123  0F23  3001               	movlw	1
  2124  0F24  0271               	subwf	get_USART_char_timeout@timeout_int,w
  2125  0F25                     u1405:	
  2126  0F25  1803               	skipnc
  2127  0F26  2F0A               	goto	l103
  2128  0F27                     l1970:	
  2129                           
  2130                           ;USART_16F_MASTER.c: 133: }
  2131                           ;USART_16F_MASTER.c: 135: return '\0';
  2132  0F27  3000               	movlw	0
  2133  0F28  0008               	return
  2134  0F29                     __end_of_get_USART_char_timeout:	
  2135                           
  2136                           	psect	text8
  2137  05C3                     __ptext8:	
  2138 ;; *************** function _getRSSI *****************
  2139 ;; Defined at:
  2140 ;;		line 12 in file "..\Header Files\..\C Source Code\ZIGBEE_16F_MASTER.c"
  2141 ;; Parameters:    Size  Location     Type
  2142 ;;  RSSI            1    wreg     PTR unsigned char 
  2143 ;;		 -> main@RSSI(5), 
  2144 ;;  dBm             1   15[BANK0 ] PTR unsigned char 
  2145 ;;		 -> main@dBm(7), 
  2146 ;;  percentage      1   16[BANK0 ] PTR unsigned char 
  2147 ;;		 -> main@percentage(7), 
  2148 ;; Auto vars:     Size  Location     Type
  2149 ;;  RSSI            1   25[BANK0 ] PTR unsigned char 
  2150 ;;		 -> main@RSSI(5), 
  2151 ;;  iter            1   24[BANK0 ] unsigned char 
  2152 ;;  RSSInum         3   19[BANK0 ] unsigned char [3]
  2153 ;;  dBmNum          2   26[BANK0 ] unsigned int 
  2154 ;;  dBmbuf          2   22[BANK0 ] unsigned char [2]
  2155 ;; Return value:  Size  Location     Type
  2156 ;;		None               void
  2157 ;; Registers used:
  2158 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2159 ;; Tracked objects:
  2160 ;;		On entry : 0/0
  2161 ;;		On exit  : 0/0
  2162 ;;		Unchanged: 0/0
  2163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2164 ;;      Params:         0       2       0       0       0
  2165 ;;      Locals:         0       9       0       0       0
  2166 ;;      Temps:          0       2       0       0       0
  2167 ;;      Totals:         0      13       0       0       0
  2168 ;;Total ram usage:       13 bytes
  2169 ;; Hardware stack levels used:    1
  2170 ;; Hardware stack levels required when called:    3
  2171 ;; This function calls:
  2172 ;;		_get_USART_char
  2173 ;;		_send_USART_string
  2174 ;;		_flush_RCREG
  2175 ;;		_strtol
  2176 ;;		_sprintf
  2177 ;; This function is called by:
  2178 ;;		_main
  2179 ;; This function uses a non-reentrant model
  2180 ;;
  2181                           
  2182                           
  2183                           ;psect for function _getRSSI
  2184  05C3                     _getRSSI:	
  2185                           
  2186                           ;incstack = 0
  2187                           ; Regs used in _getRSSI: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2188                           ;getRSSI@RSSI stored from wreg
  2189  05C3  1283               	bcf	3,5	;RP0=0, select bank0
  2190  05C4  1303               	bcf	3,6	;RP1=0, select bank0
  2191  05C5  00B9               	movwf	getRSSI@RSSI
  2192                           
  2193                           ;ZIGBEE_16F_MASTER.c: 14: RSSI[0] = '0';
  2194  05C6  3030               	movlw	48
  2195  05C7  00B1               	movwf	??_getRSSI
  2196  05C8  0839               	movf	getRSSI@RSSI,w
  2197  05C9  0084               	movwf	4
  2198  05CA  0831               	movf	??_getRSSI,w
  2199  05CB  1383               	bcf	3,7	;select IRP bank0
  2200  05CC  0080               	movwf	0
  2201                           
  2202                           ;ZIGBEE_16F_MASTER.c: 15: RSSI[1] = 'x';
  2203  05CD  3078               	movlw	120
  2204  05CE  00B1               	movwf	??_getRSSI
  2205  05CF  0A39               	incf	getRSSI@RSSI,w
  2206  05D0  0084               	movwf	4
  2207  05D1  0831               	movf	??_getRSSI,w
  2208  05D2  0080               	movwf	0
  2209                           
  2210                           ;ZIGBEE_16F_MASTER.c: 17: flush_RCREG();
  2211  05D3  120A  158A  25F6   	fcall	_flush_RCREG
      +       120A  118A         
  2212                           
  2213                           ;ZIGBEE_16F_MASTER.c: 18: send_USART_string("ATDB\r");
  2214  05D8  3047               	movlw	low (STR_1-__stringbase)
  2215  05D9  00F6               	movwf	?_send_USART_string
  2216  05DA  3080               	movlw	128
  2217  05DB  00F7               	movwf	?_send_USART_string+1
  2218  05DC  120A  158A  2729   	fcall	_send_USART_string
      +       120A  118A         
  2219                           
  2220                           ;ZIGBEE_16F_MASTER.c: 20: for(char iter = 0; iter < 2; iter++)
  2221  05E1  1283               	bcf	3,5	;RP0=0, select bank0
  2222  05E2  1303               	bcf	3,6	;RP1=0, select bank0
  2223  05E3  01B8               	clrf	getRSSI@iter
  2224  05E4  3002               	movlw	2
  2225  05E5  0238               	subwf	getRSSI@iter,w
  2226  05E6  1803               	btfsc	3,0
  2227  05E7  2E01               	goto	l2184
  2228  05E8                     l2178:	
  2229                           
  2230                           ;ZIGBEE_16F_MASTER.c: 21: {RSSI[iter+2] = get_USART_char();}
  2231  05E8  120A  158A  25CF   	fcall	_get_USART_char
      +       120A  118A         
  2232  05ED  1283               	bcf	3,5	;RP0=0, select bank0
  2233  05EE  1303               	bcf	3,6	;RP1=0, select bank0
  2234  05EF  00B1               	movwf	??_getRSSI
  2235  05F0  0838               	movf	getRSSI@iter,w
  2236  05F1  3E02               	addlw	2
  2237  05F2  0739               	addwf	getRSSI@RSSI,w
  2238  05F3  00B2               	movwf	??_getRSSI+1
  2239  05F4  0832               	movf	??_getRSSI+1,w
  2240  05F5  0084               	movwf	4
  2241  05F6  0831               	movf	??_getRSSI,w
  2242  05F7  1383               	bcf	3,7	;select IRP bank0
  2243  05F8  0080               	movwf	0
  2244  05F9  3001               	movlw	1
  2245  05FA  00B1               	movwf	??_getRSSI
  2246  05FB  0831               	movf	??_getRSSI,w
  2247  05FC  07B8               	addwf	getRSSI@iter,f
  2248  05FD  3002               	movlw	2
  2249  05FE  0238               	subwf	getRSSI@iter,w
  2250  05FF  1C03               	skipc
  2251  0600  2DE8               	goto	l2178
  2252  0601                     l2184:	
  2253                           
  2254                           ;ZIGBEE_16F_MASTER.c: 23: RSSI[4] = '\0';
  2255  0601  0839               	movf	getRSSI@RSSI,w
  2256  0602  3E04               	addlw	4
  2257  0603  0084               	movwf	4
  2258  0604  1383               	bcf	3,7	;select IRP bank0
  2259  0605  0180               	clrf	0
  2260                           
  2261                           ;ZIGBEE_16F_MASTER.c: 25: char RSSInum[2+1];
  2262                           ;ZIGBEE_16F_MASTER.c: 26: RSSInum[0] = RSSI[2];
  2263  0606  0839               	movf	getRSSI@RSSI,w
  2264  0607  3E02               	addlw	2
  2265  0608  0084               	movwf	4
  2266  0609  0800               	movf	0,w
  2267  060A  00B1               	movwf	??_getRSSI
  2268  060B  0831               	movf	??_getRSSI,w
  2269  060C  00B3               	movwf	getRSSI@RSSInum
  2270                           
  2271                           ;ZIGBEE_16F_MASTER.c: 27: RSSInum[1] = RSSI[3];
  2272  060D  0839               	movf	getRSSI@RSSI,w
  2273  060E  3E03               	addlw	3
  2274  060F  0084               	movwf	4
  2275  0610  0800               	movf	0,w
  2276  0611  00B1               	movwf	??_getRSSI
  2277  0612  0831               	movf	??_getRSSI,w
  2278  0613  00B4               	movwf	getRSSI@RSSInum+1
  2279                           
  2280                           ;ZIGBEE_16F_MASTER.c: 28: RSSInum[2] = RSSI[4];
  2281  0614  0839               	movf	getRSSI@RSSI,w
  2282  0615  3E04               	addlw	4
  2283  0616  0084               	movwf	4
  2284  0617  0800               	movf	0,w
  2285  0618  00B1               	movwf	??_getRSSI
  2286  0619  0831               	movf	??_getRSSI,w
  2287  061A  00B5               	movwf	getRSSI@RSSInum+2
  2288                           
  2289                           ;ZIGBEE_16F_MASTER.c: 32: unsigned int dBmNum = (int) strtol (RSSInum, (0), 16);
  2290  061B  01A0               	clrf	?_strtol
  2291  061C  3010               	movlw	16
  2292  061D  00A1               	movwf	?_strtol+1
  2293  061E  3000               	movlw	0
  2294  061F  00A2               	movwf	?_strtol+2
  2295  0620  3033               	movlw	getRSSI@RSSInum& (0+255)
  2296  0621  120A  118A  2394   	fcall	_strtol
      +       120A  118A         
  2297  0626  1283               	bcf	3,5	;RP0=0, select bank0
  2298  0627  1303               	bcf	3,6	;RP1=0, select bank0
  2299  0628  0821               	movf	?_strtol+1,w
  2300  0629  01BB               	clrf	getRSSI@dBmNum+1
  2301  062A  07BB               	addwf	getRSSI@dBmNum+1,f
  2302  062B  0820               	movf	?_strtol,w
  2303  062C  01BA               	clrf	getRSSI@dBmNum
  2304  062D  07BA               	addwf	getRSSI@dBmNum,f
  2305                           
  2306                           ;ZIGBEE_16F_MASTER.c: 33: char dBmbuf[2];
  2307                           ;ZIGBEE_16F_MASTER.c: 34: sprintf(dBmbuf , "%d", dBmNum);
  2308  062E  306D               	movlw	(STR_2-__stringbase)& (0+255)
  2309  062F  00B1               	movwf	??_getRSSI
  2310  0630  0831               	movf	??_getRSSI,w
  2311  0631  00A0               	movwf	?_sprintf
  2312  0632  083B               	movf	getRSSI@dBmNum+1,w
  2313  0633  01A2               	clrf	?_sprintf+2
  2314  0634  07A2               	addwf	?_sprintf+2,f
  2315  0635  083A               	movf	getRSSI@dBmNum,w
  2316  0636  01A1               	clrf	?_sprintf+1
  2317  0637  07A1               	addwf	?_sprintf+1,f
  2318  0638  3036               	movlw	getRSSI@dBmbuf& (0+255)
  2319  0639  120A  118A  21D4   	fcall	_sprintf
      +       120A  118A         
  2320                           
  2321                           ;ZIGBEE_16F_MASTER.c: 35: dBm[0] = '-';
  2322  063E  302D               	movlw	45
  2323  063F  1283               	bcf	3,5	;RP0=0, select bank0
  2324  0640  1303               	bcf	3,6	;RP1=0, select bank0
  2325  0641  00B1               	movwf	??_getRSSI
  2326  0642  082F               	movf	getRSSI@dBm,w
  2327  0643  0084               	movwf	4
  2328  0644  0831               	movf	??_getRSSI,w
  2329  0645  1383               	bcf	3,7	;select IRP bank0
  2330  0646  0080               	movwf	0
  2331                           
  2332                           ;ZIGBEE_16F_MASTER.c: 36: dBm[1] = dBmbuf[0];
  2333  0647  0836               	movf	getRSSI@dBmbuf,w
  2334  0648  00B1               	movwf	??_getRSSI
  2335  0649  0A2F               	incf	getRSSI@dBm,w
  2336  064A  0084               	movwf	4
  2337  064B  0831               	movf	??_getRSSI,w
  2338  064C  0080               	movwf	0
  2339                           
  2340                           ;ZIGBEE_16F_MASTER.c: 37: dBm[2] = dBmbuf[1];
  2341  064D  0837               	movf	getRSSI@dBmbuf+1,w
  2342  064E  00B1               	movwf	??_getRSSI
  2343  064F  082F               	movf	getRSSI@dBm,w
  2344  0650  3E02               	addlw	2
  2345  0651  0084               	movwf	4
  2346  0652  0831               	movf	??_getRSSI,w
  2347  0653  0080               	movwf	0
  2348                           
  2349                           ;ZIGBEE_16F_MASTER.c: 38: dBm[3] = 'd';
  2350  0654  3064               	movlw	100
  2351  0655  00B1               	movwf	??_getRSSI
  2352  0656  082F               	movf	getRSSI@dBm,w
  2353  0657  3E03               	addlw	3
  2354  0658  0084               	movwf	4
  2355  0659  0831               	movf	??_getRSSI,w
  2356  065A  0080               	movwf	0
  2357                           
  2358                           ;ZIGBEE_16F_MASTER.c: 39: dBm[4] = 'B';
  2359  065B  3042               	movlw	66
  2360  065C  00B1               	movwf	??_getRSSI
  2361  065D  082F               	movf	getRSSI@dBm,w
  2362  065E  3E04               	addlw	4
  2363  065F  0084               	movwf	4
  2364  0660  0831               	movf	??_getRSSI,w
  2365  0661  0080               	movwf	0
  2366                           
  2367                           ;ZIGBEE_16F_MASTER.c: 40: dBm[5] = 'm';
  2368  0662  306D               	movlw	109
  2369  0663  00B1               	movwf	??_getRSSI
  2370  0664  082F               	movf	getRSSI@dBm,w
  2371  0665  3E05               	addlw	5
  2372  0666  0084               	movwf	4
  2373  0667  0831               	movf	??_getRSSI,w
  2374  0668  0080               	movwf	0
  2375                           
  2376                           ;ZIGBEE_16F_MASTER.c: 41: dBm[6] = '\0';
  2377  0669  082F               	movf	getRSSI@dBm,w
  2378  066A  3E06               	addlw	6
  2379  066B  0084               	movwf	4
  2380  066C  0180               	clrf	0
  2381                           
  2382                           ;ZIGBEE_16F_MASTER.c: 46: if(dBmNum > 25 && dBmNum <= 35)
  2383  066D  3000               	movlw	0
  2384  066E  023B               	subwf	getRSSI@dBmNum+1,w
  2385  066F  301A               	movlw	26
  2386  0670  1903               	skipnz
  2387  0671  023A               	subwf	getRSSI@dBmNum,w
  2388  0672  1C03               	skipc
  2389  0673  2EA8               	goto	l2218
  2390  0674  3000               	movlw	0
  2391  0675  023B               	subwf	getRSSI@dBmNum+1,w
  2392  0676  3024               	movlw	36
  2393  0677  1903               	skipnz
  2394  0678  023A               	subwf	getRSSI@dBmNum,w
  2395  0679  1803               	skipnc
  2396  067A  2EA8               	goto	l2218
  2397                           
  2398                           ;ZIGBEE_16F_MASTER.c: 47: {
  2399                           ;ZIGBEE_16F_MASTER.c: 48: percentage[0] = '('; percentage[1] = '1'; percentage[2] = '0';
      +                           percentage[3] = '0'; percentage[4] = '%'; percentage[5] = ')'; percentage[6] = '\0';
  2400  067B  3028               	movlw	40
  2401  067C  00B1               	movwf	??_getRSSI
  2402  067D  0830               	movf	getRSSI@percentage,w
  2403  067E  0084               	movwf	4
  2404  067F  0831               	movf	??_getRSSI,w
  2405  0680  0080               	movwf	0
  2406  0681  3031               	movlw	49
  2407  0682  00B1               	movwf	??_getRSSI
  2408  0683  0A30               	incf	getRSSI@percentage,w
  2409  0684  0084               	movwf	4
  2410  0685  0831               	movf	??_getRSSI,w
  2411  0686  0080               	movwf	0
  2412  0687  3030               	movlw	48
  2413  0688  00B1               	movwf	??_getRSSI
  2414  0689  0830               	movf	getRSSI@percentage,w
  2415  068A  3E02               	addlw	2
  2416  068B  0084               	movwf	4
  2417  068C  0831               	movf	??_getRSSI,w
  2418  068D  0080               	movwf	0
  2419  068E  3030               	movlw	48
  2420  068F  00B1               	movwf	??_getRSSI
  2421  0690  0830               	movf	getRSSI@percentage,w
  2422  0691  3E03               	addlw	3
  2423  0692  0084               	movwf	4
  2424  0693  0831               	movf	??_getRSSI,w
  2425  0694  0080               	movwf	0
  2426  0695  3025               	movlw	37
  2427  0696  00B1               	movwf	??_getRSSI
  2428  0697  0830               	movf	getRSSI@percentage,w
  2429  0698  3E04               	addlw	4
  2430  0699  0084               	movwf	4
  2431  069A  0831               	movf	??_getRSSI,w
  2432  069B  0080               	movwf	0
  2433  069C  3029               	movlw	41
  2434  069D  00B1               	movwf	??_getRSSI
  2435  069E  0830               	movf	getRSSI@percentage,w
  2436  069F  3E05               	addlw	5
  2437  06A0  0084               	movwf	4
  2438  06A1  0831               	movf	??_getRSSI,w
  2439  06A2  0080               	movwf	0
  2440  06A3  0830               	movf	getRSSI@percentage,w
  2441  06A4  3E06               	addlw	6
  2442  06A5  0084               	movwf	4
  2443  06A6  0180               	clrf	0
  2444                           
  2445                           ;ZIGBEE_16F_MASTER.c: 49: }
  2446  06A7  0008               	return
  2447  06A8                     l2218:	
  2448                           
  2449                           ;ZIGBEE_16F_MASTER.c: 50: else if(dBmNum > 35 && dBmNum <= 45)
  2450  06A8  3000               	movlw	0
  2451  06A9  023B               	subwf	getRSSI@dBmNum+1,w
  2452  06AA  3024               	movlw	36
  2453  06AB  1903               	skipnz
  2454  06AC  023A               	subwf	getRSSI@dBmNum,w
  2455  06AD  1C03               	skipc
  2456  06AE  2EE0               	goto	l2228
  2457  06AF  3000               	movlw	0
  2458  06B0  023B               	subwf	getRSSI@dBmNum+1,w
  2459  06B1  302E               	movlw	46
  2460  06B2  1903               	skipnz
  2461  06B3  023A               	subwf	getRSSI@dBmNum,w
  2462  06B4  1803               	skipnc
  2463  06B5  2EE0               	goto	l2228
  2464                           
  2465                           ;ZIGBEE_16F_MASTER.c: 51: {
  2466                           ;ZIGBEE_16F_MASTER.c: 52: percentage[0] = '('; percentage[1] = '8'; percentage[2] = '5';
      +                           percentage[3] = '%'; percentage[4] = ')'; percentage[5] = '\0'; percentage[6] = '\0';
  2467  06B6  3028               	movlw	40
  2468  06B7  00B1               	movwf	??_getRSSI
  2469  06B8  0830               	movf	getRSSI@percentage,w
  2470  06B9  0084               	movwf	4
  2471  06BA  0831               	movf	??_getRSSI,w
  2472  06BB  0080               	movwf	0
  2473  06BC  3038               	movlw	56
  2474  06BD  00B1               	movwf	??_getRSSI
  2475  06BE  0A30               	incf	getRSSI@percentage,w
  2476  06BF  0084               	movwf	4
  2477  06C0  0831               	movf	??_getRSSI,w
  2478  06C1  0080               	movwf	0
  2479  06C2  3035               	movlw	53
  2480  06C3  00B1               	movwf	??_getRSSI
  2481  06C4  0830               	movf	getRSSI@percentage,w
  2482  06C5  3E02               	addlw	2
  2483  06C6  0084               	movwf	4
  2484  06C7  0831               	movf	??_getRSSI,w
  2485  06C8  0080               	movwf	0
  2486  06C9  3025               	movlw	37
  2487  06CA  00B1               	movwf	??_getRSSI
  2488  06CB  0830               	movf	getRSSI@percentage,w
  2489  06CC  3E03               	addlw	3
  2490  06CD  0084               	movwf	4
  2491  06CE  0831               	movf	??_getRSSI,w
  2492  06CF  0080               	movwf	0
  2493  06D0  3029               	movlw	41
  2494  06D1  00B1               	movwf	??_getRSSI
  2495  06D2  0830               	movf	getRSSI@percentage,w
  2496  06D3  3E04               	addlw	4
  2497  06D4  0084               	movwf	4
  2498  06D5  0831               	movf	??_getRSSI,w
  2499  06D6  0080               	movwf	0
  2500  06D7  0830               	movf	getRSSI@percentage,w
  2501  06D8  3E05               	addlw	5
  2502  06D9  0084               	movwf	4
  2503  06DA  0180               	clrf	0
  2504  06DB  0830               	movf	getRSSI@percentage,w
  2505  06DC  3E06               	addlw	6
  2506  06DD  0084               	movwf	4
  2507  06DE  0180               	clrf	0
  2508                           
  2509                           ;ZIGBEE_16F_MASTER.c: 53: }
  2510  06DF  0008               	return
  2511  06E0                     l2228:	
  2512                           
  2513                           ;ZIGBEE_16F_MASTER.c: 54: else if(dBmNum > 45 && dBmNum <= 55)
  2514  06E0  3000               	movlw	0
  2515  06E1  023B               	subwf	getRSSI@dBmNum+1,w
  2516  06E2  302E               	movlw	46
  2517  06E3  1903               	skipnz
  2518  06E4  023A               	subwf	getRSSI@dBmNum,w
  2519  06E5  1C03               	skipc
  2520  06E6  2F18               	goto	l2238
  2521  06E7  3000               	movlw	0
  2522  06E8  023B               	subwf	getRSSI@dBmNum+1,w
  2523  06E9  3038               	movlw	56
  2524  06EA  1903               	skipnz
  2525  06EB  023A               	subwf	getRSSI@dBmNum,w
  2526  06EC  1803               	skipnc
  2527  06ED  2F18               	goto	l2238
  2528                           
  2529                           ;ZIGBEE_16F_MASTER.c: 55: {
  2530                           ;ZIGBEE_16F_MASTER.c: 56: percentage[0] = '('; percentage[1] = '6'; percentage[2] = '0';
      +                           percentage[3] = '%'; percentage[4] = ')'; percentage[5] = '\0'; percentage[6] = '\0';
  2531  06EE  3028               	movlw	40
  2532  06EF  00B1               	movwf	??_getRSSI
  2533  06F0  0830               	movf	getRSSI@percentage,w
  2534  06F1  0084               	movwf	4
  2535  06F2  0831               	movf	??_getRSSI,w
  2536  06F3  0080               	movwf	0
  2537  06F4  3036               	movlw	54
  2538  06F5  00B1               	movwf	??_getRSSI
  2539  06F6  0A30               	incf	getRSSI@percentage,w
  2540  06F7  0084               	movwf	4
  2541  06F8  0831               	movf	??_getRSSI,w
  2542  06F9  0080               	movwf	0
  2543  06FA  3030               	movlw	48
  2544  06FB  00B1               	movwf	??_getRSSI
  2545  06FC  0830               	movf	getRSSI@percentage,w
  2546  06FD  3E02               	addlw	2
  2547  06FE  0084               	movwf	4
  2548  06FF  0831               	movf	??_getRSSI,w
  2549  0700  0080               	movwf	0
  2550  0701  3025               	movlw	37
  2551  0702  00B1               	movwf	??_getRSSI
  2552  0703  0830               	movf	getRSSI@percentage,w
  2553  0704  3E03               	addlw	3
  2554  0705  0084               	movwf	4
  2555  0706  0831               	movf	??_getRSSI,w
  2556  0707  0080               	movwf	0
  2557  0708  3029               	movlw	41
  2558  0709  00B1               	movwf	??_getRSSI
  2559  070A  0830               	movf	getRSSI@percentage,w
  2560  070B  3E04               	addlw	4
  2561  070C  0084               	movwf	4
  2562  070D  0831               	movf	??_getRSSI,w
  2563  070E  0080               	movwf	0
  2564  070F  0830               	movf	getRSSI@percentage,w
  2565  0710  3E05               	addlw	5
  2566  0711  0084               	movwf	4
  2567  0712  0180               	clrf	0
  2568  0713  0830               	movf	getRSSI@percentage,w
  2569  0714  3E06               	addlw	6
  2570  0715  0084               	movwf	4
  2571  0716  0180               	clrf	0
  2572                           
  2573                           ;ZIGBEE_16F_MASTER.c: 57: }
  2574  0717  0008               	return
  2575  0718                     l2238:	
  2576                           
  2577                           ;ZIGBEE_16F_MASTER.c: 58: else if(dBmNum > 55 && dBmNum <= 65)
  2578  0718  3000               	movlw	0
  2579  0719  023B               	subwf	getRSSI@dBmNum+1,w
  2580  071A  3038               	movlw	56
  2581  071B  1903               	skipnz
  2582  071C  023A               	subwf	getRSSI@dBmNum,w
  2583  071D  1C03               	skipc
  2584  071E  2F50               	goto	l2248
  2585  071F  3000               	movlw	0
  2586  0720  023B               	subwf	getRSSI@dBmNum+1,w
  2587  0721  3042               	movlw	66
  2588  0722  1903               	skipnz
  2589  0723  023A               	subwf	getRSSI@dBmNum,w
  2590  0724  1803               	skipnc
  2591  0725  2F50               	goto	l2248
  2592                           
  2593                           ;ZIGBEE_16F_MASTER.c: 59: {
  2594                           ;ZIGBEE_16F_MASTER.c: 60: percentage[0] = '('; percentage[1] = '4'; percentage[2] = '5';
      +                           percentage[3] = '%'; percentage[4] = ')'; percentage[5] = '\0'; percentage[6] = '\0';
  2595  0726  3028               	movlw	40
  2596  0727  00B1               	movwf	??_getRSSI
  2597  0728  0830               	movf	getRSSI@percentage,w
  2598  0729  0084               	movwf	4
  2599  072A  0831               	movf	??_getRSSI,w
  2600  072B  0080               	movwf	0
  2601  072C  3034               	movlw	52
  2602  072D  00B1               	movwf	??_getRSSI
  2603  072E  0A30               	incf	getRSSI@percentage,w
  2604  072F  0084               	movwf	4
  2605  0730  0831               	movf	??_getRSSI,w
  2606  0731  0080               	movwf	0
  2607  0732  3035               	movlw	53
  2608  0733  00B1               	movwf	??_getRSSI
  2609  0734  0830               	movf	getRSSI@percentage,w
  2610  0735  3E02               	addlw	2
  2611  0736  0084               	movwf	4
  2612  0737  0831               	movf	??_getRSSI,w
  2613  0738  0080               	movwf	0
  2614  0739  3025               	movlw	37
  2615  073A  00B1               	movwf	??_getRSSI
  2616  073B  0830               	movf	getRSSI@percentage,w
  2617  073C  3E03               	addlw	3
  2618  073D  0084               	movwf	4
  2619  073E  0831               	movf	??_getRSSI,w
  2620  073F  0080               	movwf	0
  2621  0740  3029               	movlw	41
  2622  0741  00B1               	movwf	??_getRSSI
  2623  0742  0830               	movf	getRSSI@percentage,w
  2624  0743  3E04               	addlw	4
  2625  0744  0084               	movwf	4
  2626  0745  0831               	movf	??_getRSSI,w
  2627  0746  0080               	movwf	0
  2628  0747  0830               	movf	getRSSI@percentage,w
  2629  0748  3E05               	addlw	5
  2630  0749  0084               	movwf	4
  2631  074A  0180               	clrf	0
  2632  074B  0830               	movf	getRSSI@percentage,w
  2633  074C  3E06               	addlw	6
  2634  074D  0084               	movwf	4
  2635  074E  0180               	clrf	0
  2636                           
  2637                           ;ZIGBEE_16F_MASTER.c: 61: }
  2638  074F  0008               	return
  2639  0750                     l2248:	
  2640                           
  2641                           ;ZIGBEE_16F_MASTER.c: 62: else if(dBmNum > 65 && dBmNum <= 75)
  2642  0750  3000               	movlw	0
  2643  0751  023B               	subwf	getRSSI@dBmNum+1,w
  2644  0752  3042               	movlw	66
  2645  0753  1903               	skipnz
  2646  0754  023A               	subwf	getRSSI@dBmNum,w
  2647  0755  1C03               	skipc
  2648  0756  2F88               	goto	l2258
  2649  0757  3000               	movlw	0
  2650  0758  023B               	subwf	getRSSI@dBmNum+1,w
  2651  0759  304C               	movlw	76
  2652  075A  1903               	skipnz
  2653  075B  023A               	subwf	getRSSI@dBmNum,w
  2654  075C  1803               	skipnc
  2655  075D  2F88               	goto	l2258
  2656                           
  2657                           ;ZIGBEE_16F_MASTER.c: 63: {
  2658                           ;ZIGBEE_16F_MASTER.c: 64: percentage[0] = '('; percentage[1] = '3'; percentage[2] = '0';
      +                           percentage[3] = '%'; percentage[4] = ')'; percentage[5] = '\0'; percentage[6] = '\0';
  2659  075E  3028               	movlw	40
  2660  075F  00B1               	movwf	??_getRSSI
  2661  0760  0830               	movf	getRSSI@percentage,w
  2662  0761  0084               	movwf	4
  2663  0762  0831               	movf	??_getRSSI,w
  2664  0763  0080               	movwf	0
  2665  0764  3033               	movlw	51
  2666  0765  00B1               	movwf	??_getRSSI
  2667  0766  0A30               	incf	getRSSI@percentage,w
  2668  0767  0084               	movwf	4
  2669  0768  0831               	movf	??_getRSSI,w
  2670  0769  0080               	movwf	0
  2671  076A  3030               	movlw	48
  2672  076B  00B1               	movwf	??_getRSSI
  2673  076C  0830               	movf	getRSSI@percentage,w
  2674  076D  3E02               	addlw	2
  2675  076E  0084               	movwf	4
  2676  076F  0831               	movf	??_getRSSI,w
  2677  0770  0080               	movwf	0
  2678  0771  3025               	movlw	37
  2679  0772  00B1               	movwf	??_getRSSI
  2680  0773  0830               	movf	getRSSI@percentage,w
  2681  0774  3E03               	addlw	3
  2682  0775  0084               	movwf	4
  2683  0776  0831               	movf	??_getRSSI,w
  2684  0777  0080               	movwf	0
  2685  0778  3029               	movlw	41
  2686  0779  00B1               	movwf	??_getRSSI
  2687  077A  0830               	movf	getRSSI@percentage,w
  2688  077B  3E04               	addlw	4
  2689  077C  0084               	movwf	4
  2690  077D  0831               	movf	??_getRSSI,w
  2691  077E  0080               	movwf	0
  2692  077F  0830               	movf	getRSSI@percentage,w
  2693  0780  3E05               	addlw	5
  2694  0781  0084               	movwf	4
  2695  0782  0180               	clrf	0
  2696  0783  0830               	movf	getRSSI@percentage,w
  2697  0784  3E06               	addlw	6
  2698  0785  0084               	movwf	4
  2699  0786  0180               	clrf	0
  2700                           
  2701                           ;ZIGBEE_16F_MASTER.c: 65: }
  2702  0787  0008               	return
  2703  0788                     l2258:	
  2704                           
  2705                           ;ZIGBEE_16F_MASTER.c: 66: else if(dBmNum > 75 && dBmNum <= 85)
  2706  0788  3000               	movlw	0
  2707  0789  023B               	subwf	getRSSI@dBmNum+1,w
  2708  078A  304C               	movlw	76
  2709  078B  1903               	skipnz
  2710  078C  023A               	subwf	getRSSI@dBmNum,w
  2711  078D  1C03               	skipc
  2712  078E  2FC0               	goto	l2268
  2713  078F  3000               	movlw	0
  2714  0790  023B               	subwf	getRSSI@dBmNum+1,w
  2715  0791  3056               	movlw	86
  2716  0792  1903               	skipnz
  2717  0793  023A               	subwf	getRSSI@dBmNum,w
  2718  0794  1803               	skipnc
  2719  0795  2FC0               	goto	l2268
  2720                           
  2721                           ;ZIGBEE_16F_MASTER.c: 67: {
  2722                           ;ZIGBEE_16F_MASTER.c: 68: percentage[0] = '('; percentage[1] = '1'; percentage[2] = '5';
      +                           percentage[3] = '%'; percentage[4] = ')'; percentage[5] = '\0'; percentage[6] = '\0';
  2723  0796  3028               	movlw	40
  2724  0797  00B1               	movwf	??_getRSSI
  2725  0798  0830               	movf	getRSSI@percentage,w
  2726  0799  0084               	movwf	4
  2727  079A  0831               	movf	??_getRSSI,w
  2728  079B  0080               	movwf	0
  2729  079C  3031               	movlw	49
  2730  079D  00B1               	movwf	??_getRSSI
  2731  079E  0A30               	incf	getRSSI@percentage,w
  2732  079F  0084               	movwf	4
  2733  07A0  0831               	movf	??_getRSSI,w
  2734  07A1  0080               	movwf	0
  2735  07A2  3035               	movlw	53
  2736  07A3  00B1               	movwf	??_getRSSI
  2737  07A4  0830               	movf	getRSSI@percentage,w
  2738  07A5  3E02               	addlw	2
  2739  07A6  0084               	movwf	4
  2740  07A7  0831               	movf	??_getRSSI,w
  2741  07A8  0080               	movwf	0
  2742  07A9  3025               	movlw	37
  2743  07AA  00B1               	movwf	??_getRSSI
  2744  07AB  0830               	movf	getRSSI@percentage,w
  2745  07AC  3E03               	addlw	3
  2746  07AD  0084               	movwf	4
  2747  07AE  0831               	movf	??_getRSSI,w
  2748  07AF  0080               	movwf	0
  2749  07B0  3029               	movlw	41
  2750  07B1  00B1               	movwf	??_getRSSI
  2751  07B2  0830               	movf	getRSSI@percentage,w
  2752  07B3  3E04               	addlw	4
  2753  07B4  0084               	movwf	4
  2754  07B5  0831               	movf	??_getRSSI,w
  2755  07B6  0080               	movwf	0
  2756  07B7  0830               	movf	getRSSI@percentage,w
  2757  07B8  3E05               	addlw	5
  2758  07B9  0084               	movwf	4
  2759  07BA  0180               	clrf	0
  2760  07BB  0830               	movf	getRSSI@percentage,w
  2761  07BC  3E06               	addlw	6
  2762  07BD  0084               	movwf	4
  2763  07BE  0180               	clrf	0
  2764                           
  2765                           ;ZIGBEE_16F_MASTER.c: 69: }
  2766  07BF  0008               	return
  2767  07C0                     l2268:	
  2768                           
  2769                           ;ZIGBEE_16F_MASTER.c: 70: else if(dBmNum > 85 && dBmNum <= 95)
  2770  07C0  3000               	movlw	0
  2771  07C1  023B               	subwf	getRSSI@dBmNum+1,w
  2772  07C2  3056               	movlw	86
  2773  07C3  1903               	skipnz
  2774  07C4  023A               	subwf	getRSSI@dBmNum,w
  2775  07C5  1C03               	skipc
  2776  07C6  0008               	return
  2777  07C7  3000               	movlw	0
  2778  07C8  023B               	subwf	getRSSI@dBmNum+1,w
  2779  07C9  3060               	movlw	96
  2780  07CA  1903               	skipnz
  2781  07CB  023A               	subwf	getRSSI@dBmNum,w
  2782  07CC  1803               	skipnc
  2783  07CD  0008               	return
  2784                           
  2785                           ;ZIGBEE_16F_MASTER.c: 71: {
  2786                           ;ZIGBEE_16F_MASTER.c: 72: percentage[0] = '('; percentage[1] = '0'; percentage[2] = '%';
      +                           percentage[3] = ')'; percentage[4] = '\0'; percentage[5] = '\0'; percentage[6] = '\0';
  2787  07CE  3028               	movlw	40
  2788  07CF  00B1               	movwf	??_getRSSI
  2789  07D0  0830               	movf	getRSSI@percentage,w
  2790  07D1  0084               	movwf	4
  2791  07D2  0831               	movf	??_getRSSI,w
  2792  07D3  0080               	movwf	0
  2793  07D4  3030               	movlw	48
  2794  07D5  00B1               	movwf	??_getRSSI
  2795  07D6  0A30               	incf	getRSSI@percentage,w
  2796  07D7  0084               	movwf	4
  2797  07D8  0831               	movf	??_getRSSI,w
  2798  07D9  0080               	movwf	0
  2799  07DA  3025               	movlw	37
  2800  07DB  00B1               	movwf	??_getRSSI
  2801  07DC  0830               	movf	getRSSI@percentage,w
  2802  07DD  3E02               	addlw	2
  2803  07DE  0084               	movwf	4
  2804  07DF  0831               	movf	??_getRSSI,w
  2805  07E0  0080               	movwf	0
  2806  07E1  3029               	movlw	41
  2807  07E2  00B1               	movwf	??_getRSSI
  2808  07E3  0830               	movf	getRSSI@percentage,w
  2809  07E4  3E03               	addlw	3
  2810  07E5  0084               	movwf	4
  2811  07E6  0831               	movf	??_getRSSI,w
  2812  07E7  0080               	movwf	0
  2813  07E8  0830               	movf	getRSSI@percentage,w
  2814  07E9  3E04               	addlw	4
  2815  07EA  0084               	movwf	4
  2816  07EB  0180               	clrf	0
  2817  07EC  0830               	movf	getRSSI@percentage,w
  2818  07ED  3E05               	addlw	5
  2819  07EE  0084               	movwf	4
  2820  07EF  0180               	clrf	0
  2821  07F0  0830               	movf	getRSSI@percentage,w
  2822  07F1  3E06               	addlw	6
  2823  07F2  0084               	movwf	4
  2824  07F3  0180               	clrf	0
  2825                           
  2826                           ;ZIGBEE_16F_MASTER.c: 74: else
  2827                           ;ZIGBEE_16F_MASTER.c: 75: {
  2828                           
  2829                           ;ZIGBEE_16F_MASTER.c: 73: }
  2830  07F4  0008               	return
  2831  07F5                     __end_of_getRSSI:	
  2832                           
  2833                           	psect	text9
  2834  01D4                     __ptext9:	
  2835 ;; *************** function _sprintf *****************
  2836 ;; Defined at:
  2837 ;;		line 493 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
  2838 ;; Parameters:    Size  Location     Type
  2839 ;;  sp              1    wreg     PTR unsigned char 
  2840 ;;		 -> getRSSI@dBmbuf(2), 
  2841 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  2842 ;;		 -> STR_2(3), 
  2843 ;; Auto vars:     Size  Location     Type
  2844 ;;  sp              1   13[BANK0 ] PTR unsigned char 
  2845 ;;		 -> getRSSI@dBmbuf(2), 
  2846 ;;  _val            4    9[BANK0 ] struct .
  2847 ;;  c               1   14[BANK0 ] char 
  2848 ;;  prec            1    8[BANK0 ] char 
  2849 ;;  flag            1    7[BANK0 ] unsigned char 
  2850 ;;  ap              1    6[BANK0 ] PTR void [1]
  2851 ;;		 -> ?_sprintf(2), 
  2852 ;; Return value:  Size  Location     Type
  2853 ;;                  2    0[BANK0 ] int 
  2854 ;; Registers used:
  2855 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2856 ;; Tracked objects:
  2857 ;;		On entry : 0/0
  2858 ;;		On exit  : 0/0
  2859 ;;		Unchanged: 0/0
  2860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2861 ;;      Params:         0       3       0       0       0
  2862 ;;      Locals:         0       9       0       0       0
  2863 ;;      Temps:          0       3       0       0       0
  2864 ;;      Totals:         0      15       0       0       0
  2865 ;;Total ram usage:       15 bytes
  2866 ;; Hardware stack levels used:    1
  2867 ;; Hardware stack levels required when called:    1
  2868 ;; This function calls:
  2869 ;;		___lwdiv
  2870 ;;		___lwmod
  2871 ;; This function is called by:
  2872 ;;		_getRSSI
  2873 ;; This function uses a non-reentrant model
  2874 ;;
  2875                           
  2876                           
  2877                           ;psect for function _sprintf
  2878  01D4                     _sprintf:	
  2879                           
  2880                           ;incstack = 0
  2881                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2882                           ;sprintf@sp stored from wreg
  2883  01D4  1283               	bcf	3,5	;RP0=0, select bank0
  2884  01D5  1303               	bcf	3,6	;RP1=0, select bank0
  2885  01D6  00AD               	movwf	sprintf@sp
  2886                           
  2887                           ;doprnt.c: 494: va_list ap;
  2888                           ;doprnt.c: 499: signed char c;
  2889                           ;doprnt.c: 506: signed char prec;
  2890                           ;doprnt.c: 508: unsigned char flag;
  2891                           ;doprnt.c: 527: union {
  2892                           ;doprnt.c: 528: unsigned int _val;
  2893                           ;doprnt.c: 529: struct {
  2894                           ;doprnt.c: 530: const char * _cp;
  2895                           ;doprnt.c: 531: unsigned _len;
  2896                           ;doprnt.c: 532: } _str;
  2897                           ;doprnt.c: 533: } _val;
  2898                           ;doprnt.c: 542: *ap = __va_start();
  2899  01D7  3021               	movlw	(?_sprintf+1)& (0+255)
  2900  01D8  00A3               	movwf	??_sprintf
  2901  01D9  0823               	movf	??_sprintf,w
  2902  01DA  00A6               	movwf	sprintf@ap
  2903  01DB                     l2160:	
  2904                           ;doprnt.c: 545: while(c = *f++) {
  2905                           
  2906  01DB  3001               	movlw	1
  2907  01DC  07A0               	addwf	sprintf@f,f
  2908  01DD  30FF               	movlw	-1
  2909  01DE  0720               	addwf	sprintf@f,w
  2910  01DF  0084               	movwf	4
  2911  01E0  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  2912  01E5  00A3               	movwf	??_sprintf
  2913  01E6  0823               	movf	??_sprintf,w
  2914  01E7  00AE               	movwf	sprintf@c
  2915  01E8  08AE               	movf	sprintf@c,f
  2916  01E9  1903               	btfsc	3,2
  2917  01EA  2AA8               	goto	l2162
  2918                           
  2919                           ;doprnt.c: 547: if(c != '%')
  2920  01EB  082E               	movf	sprintf@c,w
  2921  01EC  3A25               	xorlw	37
  2922  01ED  1903               	skipnz
  2923  01EE  29FB               	goto	l2116
  2924                           
  2925                           ;doprnt.c: 549: {
  2926                           ;doprnt.c: 550: ((*sp++ = (c)));
  2927  01EF  082E               	movf	sprintf@c,w
  2928  01F0  00A3               	movwf	??_sprintf
  2929  01F1  082D               	movf	sprintf@sp,w
  2930  01F2  0084               	movwf	4
  2931  01F3  0823               	movf	??_sprintf,w
  2932  01F4  1383               	bcf	3,7	;select IRP bank0
  2933  01F5  0080               	movwf	0
  2934  01F6  3001               	movlw	1
  2935  01F7  00A3               	movwf	??_sprintf
  2936  01F8  0823               	movf	??_sprintf,w
  2937  01F9  07AD               	addwf	sprintf@sp,f
  2938                           
  2939                           ;doprnt.c: 551: continue;
  2940  01FA  29DB               	goto	l2160
  2941  01FB                     l2116:	
  2942                           
  2943                           ;doprnt.c: 552: }
  2944                           ;doprnt.c: 557: flag = 0;
  2945  01FB  01A7               	clrf	sprintf@flag
  2946                           
  2947                           ;doprnt.c: 831: }
  2948                           
  2949                           ;doprnt.c: 822: continue;
  2950                           
  2951                           ;doprnt.c: 811: default:
  2952                           
  2953                           ;doprnt.c: 707: case 'i':
  2954                           ;doprnt.c: 708: break;
  2955                           
  2956                           ;doprnt.c: 706: case 'd':
  2957                           
  2958                           ;doprnt.c: 647: goto alldone;
  2959                           
  2960                           ;doprnt.c: 646: case 0:
  2961                           
  2962                           ;doprnt.c: 644: switch(c = *f++) {
  2963  01FC  3001               	movlw	1
  2964  01FD  07A0               	addwf	sprintf@f,f
  2965  01FE  30FF               	movlw	-1
  2966  01FF  0720               	addwf	sprintf@f,w
  2967  0200  0084               	movwf	4
  2968  0201  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  2969  0206  00AE               	movwf	sprintf@c
  2970                           
  2971                           ; Switch size 1, requested type "space"
  2972                           ; Number of cases is 3, Range of values is 0 to 105
  2973                           ; switch strategies available:
  2974                           ; Name         Instructions Cycles
  2975                           ; simple_byte           10     6 (average)
  2976                           ; jumptable            260     6 (fixed)
  2977                           ;	Chosen strategy is simple_byte
  2978  0207  3A00               	xorlw	0	; case 0
  2979  0208  1903               	skipnz
  2980  0209  2AA8               	goto	l2162
  2981  020A  3A64               	xorlw	100	; case 100
  2982  020B  1903               	skipnz
  2983  020C  2A11               	goto	l2122
  2984  020D  3A0D               	xorlw	13	; case 105
  2985  020E  1903               	skipnz
  2986  020F  2A11               	goto	l2122
  2987  0210  29DB               	goto	l2160
  2988  0211                     l2122:	
  2989                           
  2990                           ;doprnt.c: 1260: {
  2991                           ;doprnt.c: 1266: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2992  0211  0826               	movf	sprintf@ap,w
  2993  0212  0084               	movwf	4
  2994  0213  1383               	bcf	3,7	;select IRP bank0
  2995  0214  0800               	movf	0,w
  2996  0215  00A9               	movwf	sprintf@_val
  2997  0216  0A84               	incf	4,f
  2998  0217  0800               	movf	0,w
  2999  0218  00AA               	movwf	sprintf@_val+1
  3000  0219  3002               	movlw	2
  3001  021A  00A3               	movwf	??_sprintf
  3002  021B  0823               	movf	??_sprintf,w
  3003  021C  07A6               	addwf	sprintf@ap,f
  3004                           
  3005                           ;doprnt.c: 1268: if((int)_val._val < 0) {
  3006  021D  1FAA               	btfss	sprintf@_val+1,7
  3007  021E  2A28               	goto	l2132
  3008                           
  3009                           ;doprnt.c: 1269: flag |= 0x03;
  3010  021F  3003               	movlw	3
  3011  0220  00A3               	movwf	??_sprintf
  3012  0221  0823               	movf	??_sprintf,w
  3013  0222  04A7               	iorwf	sprintf@flag,f
  3014                           
  3015                           ;doprnt.c: 1270: _val._val = -_val._val;
  3016  0223  09A9               	comf	sprintf@_val,f
  3017  0224  09AA               	comf	sprintf@_val+1,f
  3018  0225  0AA9               	incf	sprintf@_val,f
  3019  0226  1903               	skipnz
  3020  0227  0AAA               	incf	sprintf@_val+1,f
  3021  0228                     l2132:	
  3022                           
  3023                           ;doprnt.c: 1271: }
  3024                           ;doprnt.c: 1273: }
  3025                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3026  0228  01AE               	clrf	sprintf@c
  3027  0229  0AAE               	incf	sprintf@c,f
  3028  022A  082E               	movf	sprintf@c,w
  3029  022B  3A05               	xorlw	5
  3030  022C  1903               	btfsc	3,2
  3031  022D  2A4F               	goto	l2144
  3032  022E                     l2136:	
  3033                           
  3034                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
  3035  022E  082E               	movf	sprintf@c,w
  3036  022F  00A3               	movwf	??_sprintf
  3037  0230  0723               	addwf	??_sprintf,w
  3038  0231  3E01               	addlw	low (_dpowers-__stringbase)
  3039  0232  0084               	movwf	4
  3040  0233  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  3041  0238  00A4               	movwf	??_sprintf+1
  3042  0239  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  3043  023E  00A5               	movwf	??_sprintf+2
  3044  023F  0825               	movf	??_sprintf+2,w
  3045  0240  022A               	subwf	sprintf@_val+1,w
  3046  0241  1D03               	skipz
  3047  0242  2A45               	goto	u1715
  3048  0243  0824               	movf	??_sprintf+1,w
  3049  0244  0229               	subwf	sprintf@_val,w
  3050  0245                     u1715:	
  3051  0245  1C03               	btfss	3,0
  3052  0246  2A4F               	goto	l2144
  3053                           
  3054                           ;doprnt.c: 1314: break;
  3055  0247  3001               	movlw	1
  3056  0248  00A3               	movwf	??_sprintf
  3057  0249  0823               	movf	??_sprintf,w
  3058  024A  07AE               	addwf	sprintf@c,f
  3059  024B  082E               	movf	sprintf@c,w
  3060  024C  3A05               	xorlw	5
  3061  024D  1D03               	skipz
  3062  024E  2A2E               	goto	l2136
  3063  024F                     l2144:	
  3064                           
  3065                           ;doprnt.c: 1429: {
  3066                           ;doprnt.c: 1445: if(flag & 0x03)
  3067  024F  0827               	movf	sprintf@flag,w
  3068  0250  3903               	andlw	3
  3069  0251  1903               	btfsc	3,2
  3070  0252  2A5E               	goto	l2150
  3071                           
  3072                           ;doprnt.c: 1446: ((*sp++ = ('-')));
  3073  0253  302D               	movlw	45
  3074  0254  00A3               	movwf	??_sprintf
  3075  0255  082D               	movf	sprintf@sp,w
  3076  0256  0084               	movwf	4
  3077  0257  0823               	movf	??_sprintf,w
  3078  0258  1383               	bcf	3,7	;select IRP bank0
  3079  0259  0080               	movwf	0
  3080  025A  3001               	movlw	1
  3081  025B  00A3               	movwf	??_sprintf
  3082  025C  0823               	movf	??_sprintf,w
  3083  025D  07AD               	addwf	sprintf@sp,f
  3084  025E                     l2150:	
  3085                           
  3086                           ;doprnt.c: 1476: }
  3087                           ;doprnt.c: 1479: prec = c;
  3088  025E  082E               	movf	sprintf@c,w
  3089  025F  00A3               	movwf	??_sprintf
  3090  0260  0823               	movf	??_sprintf,w
  3091  0261  00A8               	movwf	sprintf@prec
  3092  0262                     l2158:	
  3093                           ;doprnt.c: 1481: while(prec--) {
  3094                           
  3095  0262  30FF               	movlw	-1
  3096  0263  00A3               	movwf	??_sprintf
  3097  0264  0823               	movf	??_sprintf,w
  3098  0265  07A8               	addwf	sprintf@prec,f
  3099  0266  0828               	movf	sprintf@prec,w
  3100  0267  3AFF               	xorlw	-1
  3101  0268  1903               	btfsc	3,2
  3102  0269  29DB               	goto	l2160
  3103                           
  3104                           ;doprnt.c: 1485: {
  3105                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
  3106  026A  300A               	movlw	10
  3107  026B  00F8               	movwf	?___lwmod
  3108  026C  3000               	movlw	0
  3109  026D  00F9               	movwf	?___lwmod+1
  3110  026E  0828               	movf	sprintf@prec,w
  3111  026F  00A3               	movwf	??_sprintf
  3112  0270  0723               	addwf	??_sprintf,w
  3113  0271  3E01               	addlw	low (_dpowers-__stringbase)
  3114  0272  0084               	movwf	4
  3115  0273  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  3116  0278  00F0               	movwf	?___lwdiv
  3117  0279  120A  118A  200D   	fcall	stringdir
      +       120A  118A         
  3118  027E  00F1               	movwf	?___lwdiv+1
  3119  027F  082A               	movf	sprintf@_val+1,w
  3120  0280  01F3               	clrf	?___lwdiv+3
  3121  0281  07F3               	addwf	?___lwdiv+3,f
  3122  0282  0829               	movf	sprintf@_val,w
  3123  0283  01F2               	clrf	?___lwdiv+2
  3124  0284  07F2               	addwf	?___lwdiv+2,f
  3125  0285  120A  158A  27C2   	fcall	___lwdiv
      +       120A  118A         
  3126  028A  0871               	movf	?___lwdiv+1,w
  3127  028B  01FB               	clrf	?___lwmod+3
  3128  028C  07FB               	addwf	?___lwmod+3,f
  3129  028D  0870               	movf	?___lwdiv,w
  3130  028E  01FA               	clrf	?___lwmod+2
  3131  028F  07FA               	addwf	?___lwmod+2,f
  3132  0290  120A  158A  2758   	fcall	___lwmod
      +       120A  118A         
  3133  0295  0878               	movf	?___lwmod,w
  3134  0296  3E30               	addlw	48
  3135  0297  1283               	bcf	3,5	;RP0=0, select bank0
  3136  0298  1303               	bcf	3,6	;RP1=0, select bank0
  3137  0299  00A4               	movwf	??_sprintf+1
  3138  029A  0824               	movf	??_sprintf+1,w
  3139  029B  00AE               	movwf	sprintf@c
  3140                           
  3141                           ;doprnt.c: 1530: }
  3142                           ;doprnt.c: 1531: ((*sp++ = (c)));
  3143  029C  082E               	movf	sprintf@c,w
  3144  029D  00A3               	movwf	??_sprintf
  3145  029E  082D               	movf	sprintf@sp,w
  3146  029F  0084               	movwf	4
  3147  02A0  0823               	movf	??_sprintf,w
  3148  02A1  1383               	bcf	3,7	;select IRP bank0
  3149  02A2  0080               	movwf	0
  3150  02A3  3001               	movlw	1
  3151  02A4  00A3               	movwf	??_sprintf
  3152  02A5  0823               	movf	??_sprintf,w
  3153  02A6  07AD               	addwf	sprintf@sp,f
  3154  02A7  2A62               	goto	l2158
  3155  02A8                     l2162:	
  3156                           ;doprnt.c: 1532: }
  3157                           ;doprnt.c: 1540: }
  3158                           ;doprnt.c: 1542: alldone:
  3159                           
  3160                           
  3161                           ;doprnt.c: 1545: *sp = 0;
  3162  02A8  082D               	movf	sprintf@sp,w
  3163  02A9  0084               	movwf	4
  3164  02AA  1383               	bcf	3,7	;select IRP bank0
  3165  02AB  0180               	clrf	0
  3166  02AC  0008               	return
  3167  02AD                     __end_of_sprintf:	
  3168                           ;doprnt.c: 1547: return 0;
  3169                           ;	Return value of _sprintf is never used
  3170                           
  3171                           
  3172                           	psect	text10
  3173  0F58                     __ptext10:	
  3174 ;; *************** function ___lwmod *****************
  3175 ;; Defined at:
  3176 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic\lwmod.c"
  3177 ;; Parameters:    Size  Location     Type
  3178 ;;  divisor         2    8[COMMON] unsigned int 
  3179 ;;  dividend        2   10[COMMON] unsigned int 
  3180 ;; Auto vars:     Size  Location     Type
  3181 ;;  counter         1   13[COMMON] unsigned char 
  3182 ;; Return value:  Size  Location     Type
  3183 ;;                  2    8[COMMON] unsigned int 
  3184 ;; Registers used:
  3185 ;;		wreg, status,2, status,0
  3186 ;; Tracked objects:
  3187 ;;		On entry : 0/0
  3188 ;;		On exit  : 0/0
  3189 ;;		Unchanged: 0/0
  3190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3191 ;;      Params:         4       0       0       0       0
  3192 ;;      Locals:         1       0       0       0       0
  3193 ;;      Temps:          1       0       0       0       0
  3194 ;;      Totals:         6       0       0       0       0
  3195 ;;Total ram usage:        6 bytes
  3196 ;; Hardware stack levels used:    1
  3197 ;; This function calls:
  3198 ;;		Nothing
  3199 ;; This function is called by:
  3200 ;;		_sprintf
  3201 ;; This function uses a non-reentrant model
  3202 ;;
  3203                           
  3204                           
  3205                           ;psect for function ___lwmod
  3206  0F58                     ___lwmod:	
  3207                           
  3208                           ;incstack = 0
  3209                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3210  0F58  0879               	movf	___lwmod@divisor+1,w
  3211  0F59  0478               	iorwf	___lwmod@divisor,w
  3212  0F5A  1903               	skipnz
  3213  0F5B  2F85               	goto	l1998
  3214  0F5C  01FD               	clrf	___lwmod@counter
  3215  0F5D  0AFD               	incf	___lwmod@counter,f
  3216  0F5E                     l1988:	
  3217  0F5E  1BF9               	btfsc	___lwmod@divisor+1,7
  3218  0F5F  2F6C               	goto	l1990
  3219  0F60  3001               	movlw	1
  3220  0F61                     u1435:	
  3221  0F61  1003               	clrc
  3222  0F62  0DF8               	rlf	___lwmod@divisor,f
  3223  0F63  0DF9               	rlf	___lwmod@divisor+1,f
  3224  0F64  3EFF               	addlw	-1
  3225  0F65  1D03               	skipz
  3226  0F66  2F61               	goto	u1435
  3227  0F67  3001               	movlw	1
  3228  0F68  00FC               	movwf	??___lwmod
  3229  0F69  087C               	movf	??___lwmod,w
  3230  0F6A  07FD               	addwf	___lwmod@counter,f
  3231  0F6B  2F5E               	goto	l1988
  3232  0F6C                     l1990:	
  3233  0F6C  0879               	movf	___lwmod@divisor+1,w
  3234  0F6D  027B               	subwf	___lwmod@dividend+1,w
  3235  0F6E  1D03               	skipz
  3236  0F6F  2F72               	goto	u1455
  3237  0F70  0878               	movf	___lwmod@divisor,w
  3238  0F71  027A               	subwf	___lwmod@dividend,w
  3239  0F72                     u1455:	
  3240  0F72  1C03               	skipc
  3241  0F73  2F7A               	goto	l1994
  3242  0F74  0878               	movf	___lwmod@divisor,w
  3243  0F75  02FA               	subwf	___lwmod@dividend,f
  3244  0F76  0879               	movf	___lwmod@divisor+1,w
  3245  0F77  1C03               	skipc
  3246  0F78  03FB               	decf	___lwmod@dividend+1,f
  3247  0F79  02FB               	subwf	___lwmod@dividend+1,f
  3248  0F7A                     l1994:	
  3249  0F7A  3001               	movlw	1
  3250  0F7B                     u1465:	
  3251  0F7B  1003               	clrc
  3252  0F7C  0CF9               	rrf	___lwmod@divisor+1,f
  3253  0F7D  0CF8               	rrf	___lwmod@divisor,f
  3254  0F7E  3EFF               	addlw	-1
  3255  0F7F  1D03               	skipz
  3256  0F80  2F7B               	goto	u1465
  3257  0F81  3001               	movlw	1
  3258  0F82  02FD               	subwf	___lwmod@counter,f
  3259  0F83  1D03               	btfss	3,2
  3260  0F84  2F6C               	goto	l1990
  3261  0F85                     l1998:	
  3262  0F85  087B               	movf	___lwmod@dividend+1,w
  3263  0F86  01F9               	clrf	?___lwmod+1
  3264  0F87  07F9               	addwf	?___lwmod+1,f
  3265  0F88  087A               	movf	___lwmod@dividend,w
  3266  0F89  01F8               	clrf	?___lwmod
  3267  0F8A  07F8               	addwf	?___lwmod,f
  3268  0F8B  0008               	return
  3269  0F8C                     __end_of___lwmod:	
  3270                           
  3271                           	psect	text11
  3272  0FC2                     __ptext11:	
  3273 ;; *************** function ___lwdiv *****************
  3274 ;; Defined at:
  3275 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic\lwdiv.c"
  3276 ;; Parameters:    Size  Location     Type
  3277 ;;  divisor         2    0[COMMON] unsigned int 
  3278 ;;  dividend        2    2[COMMON] unsigned int 
  3279 ;; Auto vars:     Size  Location     Type
  3280 ;;  quotient        2    5[COMMON] unsigned int 
  3281 ;;  counter         1    7[COMMON] unsigned char 
  3282 ;; Return value:  Size  Location     Type
  3283 ;;                  2    0[COMMON] unsigned int 
  3284 ;; Registers used:
  3285 ;;		wreg, status,2, status,0
  3286 ;; Tracked objects:
  3287 ;;		On entry : 0/0
  3288 ;;		On exit  : 0/0
  3289 ;;		Unchanged: 0/0
  3290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3291 ;;      Params:         4       0       0       0       0
  3292 ;;      Locals:         3       0       0       0       0
  3293 ;;      Temps:          1       0       0       0       0
  3294 ;;      Totals:         8       0       0       0       0
  3295 ;;Total ram usage:        8 bytes
  3296 ;; Hardware stack levels used:    1
  3297 ;; This function calls:
  3298 ;;		Nothing
  3299 ;; This function is called by:
  3300 ;;		_sprintf
  3301 ;; This function uses a non-reentrant model
  3302 ;;
  3303                           
  3304                           
  3305                           ;psect for function ___lwdiv
  3306  0FC2                     ___lwdiv:	
  3307                           
  3308                           ;incstack = 0
  3309                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3310  0FC2  01F5               	clrf	___lwdiv@quotient
  3311  0FC3  01F6               	clrf	___lwdiv@quotient+1
  3312  0FC4  0871               	movf	___lwdiv@divisor+1,w
  3313  0FC5  0470               	iorwf	___lwdiv@divisor,w
  3314  0FC6  1903               	skipnz
  3315  0FC7  2FF9               	goto	l1874
  3316  0FC8  01F7               	clrf	___lwdiv@counter
  3317  0FC9  0AF7               	incf	___lwdiv@counter,f
  3318  0FCA                     l1862:	
  3319  0FCA  1BF1               	btfsc	___lwdiv@divisor+1,7
  3320  0FCB  2FD8               	goto	l1864
  3321  0FCC  3001               	movlw	1
  3322  0FCD                     u1225:	
  3323  0FCD  1003               	clrc
  3324  0FCE  0DF0               	rlf	___lwdiv@divisor,f
  3325  0FCF  0DF1               	rlf	___lwdiv@divisor+1,f
  3326  0FD0  3EFF               	addlw	-1
  3327  0FD1  1D03               	skipz
  3328  0FD2  2FCD               	goto	u1225
  3329  0FD3  3001               	movlw	1
  3330  0FD4  00F4               	movwf	??___lwdiv
  3331  0FD5  0874               	movf	??___lwdiv,w
  3332  0FD6  07F7               	addwf	___lwdiv@counter,f
  3333  0FD7  2FCA               	goto	l1862
  3334  0FD8                     l1864:	
  3335  0FD8  3001               	movlw	1
  3336  0FD9                     u1245:	
  3337  0FD9  1003               	clrc
  3338  0FDA  0DF5               	rlf	___lwdiv@quotient,f
  3339  0FDB  0DF6               	rlf	___lwdiv@quotient+1,f
  3340  0FDC  3EFF               	addlw	-1
  3341  0FDD  1D03               	skipz
  3342  0FDE  2FD9               	goto	u1245
  3343  0FDF  0871               	movf	___lwdiv@divisor+1,w
  3344  0FE0  0273               	subwf	___lwdiv@dividend+1,w
  3345  0FE1  1D03               	skipz
  3346  0FE2  2FE5               	goto	u1255
  3347  0FE3  0870               	movf	___lwdiv@divisor,w
  3348  0FE4  0272               	subwf	___lwdiv@dividend,w
  3349  0FE5                     u1255:	
  3350  0FE5  1C03               	skipc
  3351  0FE6  2FEE               	goto	l1870
  3352  0FE7  0870               	movf	___lwdiv@divisor,w
  3353  0FE8  02F2               	subwf	___lwdiv@dividend,f
  3354  0FE9  0871               	movf	___lwdiv@divisor+1,w
  3355  0FEA  1C03               	skipc
  3356  0FEB  03F3               	decf	___lwdiv@dividend+1,f
  3357  0FEC  02F3               	subwf	___lwdiv@dividend+1,f
  3358  0FED  1475               	bsf	___lwdiv@quotient,0
  3359  0FEE                     l1870:	
  3360  0FEE  3001               	movlw	1
  3361  0FEF                     u1265:	
  3362  0FEF  1003               	clrc
  3363  0FF0  0CF1               	rrf	___lwdiv@divisor+1,f
  3364  0FF1  0CF0               	rrf	___lwdiv@divisor,f
  3365  0FF2  3EFF               	addlw	-1
  3366  0FF3  1D03               	skipz
  3367  0FF4  2FEF               	goto	u1265
  3368  0FF5  3001               	movlw	1
  3369  0FF6  02F7               	subwf	___lwdiv@counter,f
  3370  0FF7  1D03               	btfss	3,2
  3371  0FF8  2FD8               	goto	l1864
  3372  0FF9                     l1874:	
  3373  0FF9  0876               	movf	___lwdiv@quotient+1,w
  3374  0FFA  01F1               	clrf	?___lwdiv+1
  3375  0FFB  07F1               	addwf	?___lwdiv+1,f
  3376  0FFC  0875               	movf	___lwdiv@quotient,w
  3377  0FFD  01F0               	clrf	?___lwdiv
  3378  0FFE  07F0               	addwf	?___lwdiv,f
  3379  0FFF  0008               	return
  3380  1000                     __end_of___lwdiv:	
  3381                           
  3382                           	psect	text12
  3383  0394                     __ptext12:	
  3384 ;; *************** function _strtol *****************
  3385 ;; Defined at:
  3386 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strtol.c"
  3387 ;; Parameters:    Size  Location     Type
  3388 ;;  s               1    wreg     PTR const unsigned char 
  3389 ;;		 -> getRSSI@RSSInum(3), 
  3390 ;;  endptr          1    0[BANK0 ] PTR PTR unsigned char 
  3391 ;;		 -> NULL(0), 
  3392 ;;  base            2    1[BANK0 ] int 
  3393 ;; Auto vars:     Size  Location     Type
  3394 ;;  s               1   13[BANK0 ] PTR const unsigned char 
  3395 ;;		 -> getRSSI@RSSInum(3), 
  3396 ;;  a               4    9[BANK0 ] long 
  3397 ;;  c               1   14[BANK0 ] unsigned char 
  3398 ;;  sign            1    8[BANK0 ] unsigned char 
  3399 ;; Return value:  Size  Location     Type
  3400 ;;                  4    0[BANK0 ] long 
  3401 ;; Registers used:
  3402 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3403 ;; Tracked objects:
  3404 ;;		On entry : 0/0
  3405 ;;		On exit  : 0/0
  3406 ;;		Unchanged: 0/0
  3407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3408 ;;      Params:         0       4       0       0       0
  3409 ;;      Locals:         0       7       0       0       0
  3410 ;;      Temps:          0       4       0       0       0
  3411 ;;      Totals:         0      15       0       0       0
  3412 ;;Total ram usage:       15 bytes
  3413 ;; Hardware stack levels used:    1
  3414 ;; Hardware stack levels required when called:    2
  3415 ;; This function calls:
  3416 ;;		___lmul
  3417 ;;		_isspace
  3418 ;;		_isalpha
  3419 ;;		_toupper
  3420 ;;		_isdigit
  3421 ;; This function is called by:
  3422 ;;		_getRSSI
  3423 ;; This function uses a non-reentrant model
  3424 ;;
  3425                           
  3426                           
  3427                           ;psect for function _strtol
  3428  0394                     _strtol:	
  3429                           
  3430                           ;incstack = 0
  3431                           ; Regs used in _strtol: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3432                           ;strtol@s stored from wreg
  3433  0394  1283               	bcf	3,5	;RP0=0, select bank0
  3434  0395  1303               	bcf	3,6	;RP1=0, select bank0
  3435  0396  00AD               	movwf	strtol@s
  3436  0397                     l673:	
  3437  0397  1283               	bcf	3,5	;RP0=0, select bank0
  3438  0398  1303               	bcf	3,6	;RP1=0, select bank0
  3439  0399  082D               	movf	strtol@s,w
  3440  039A  0084               	movwf	4
  3441  039B  1383               	bcf	3,7	;select IRP bank0
  3442  039C  0800               	movf	0,w
  3443  039D  00A4               	movwf	??_strtol
  3444  039E  0824               	movf	??_strtol,w
  3445  039F  00AE               	movwf	strtol@c
  3446  03A0  3001               	movlw	1
  3447  03A1  00A4               	movwf	??_strtol
  3448  03A2  0824               	movf	??_strtol,w
  3449  03A3  07AD               	addwf	strtol@s,f
  3450  03A4  082E               	movf	strtol@c,w
  3451  03A5  120A  158A  2614   	fcall	_isspace
      +       120A  118A         
  3452  03AA  1C03               	btfss	3,0
  3453  03AB  2BAF               	goto	l2030
  3454  03AC  1283               	bcf	3,5	;RP0=0, select bank0
  3455  03AD  1303               	bcf	3,6	;RP1=0, select bank0
  3456  03AE  2B97               	goto	l673
  3457  03AF                     l2030:	
  3458  03AF  3000               	movlw	0
  3459  03B0  1283               	bcf	3,5	;RP0=0, select bank0
  3460  03B1  1303               	bcf	3,6	;RP1=0, select bank0
  3461  03B2  00AC               	movwf	strtol@a+3
  3462  03B3  3000               	movlw	0
  3463  03B4  00AB               	movwf	strtol@a+2
  3464  03B5  3000               	movlw	0
  3465  03B6  00AA               	movwf	strtol@a+1
  3466  03B7  3000               	movlw	0
  3467  03B8  00A9               	movwf	strtol@a
  3468  03B9  01A8               	clrf	strtol@sign
  3469  03BA  082E               	movf	strtol@c,w
  3470  03BB  3A2D               	xorlw	45
  3471  03BC  1D03               	skipz
  3472  03BD  2BC1               	goto	l2042
  3473  03BE  01A8               	clrf	strtol@sign
  3474  03BF  0AA8               	incf	strtol@sign,f
  3475  03C0  2BC5               	goto	l2044
  3476  03C1                     l2042:	
  3477  03C1  082E               	movf	strtol@c,w
  3478  03C2  3A2B               	xorlw	43
  3479  03C3  1D03               	skipz
  3480  03C4  2BD0               	goto	l2048
  3481  03C5                     l2044:	
  3482  03C5  082D               	movf	strtol@s,w
  3483  03C6  0084               	movwf	4
  3484  03C7  1383               	bcf	3,7	;select IRP bank0
  3485  03C8  0800               	movf	0,w
  3486  03C9  00A4               	movwf	??_strtol
  3487  03CA  0824               	movf	??_strtol,w
  3488  03CB  00AE               	movwf	strtol@c
  3489  03CC  3001               	movlw	1
  3490  03CD  00A4               	movwf	??_strtol
  3491  03CE  0824               	movf	??_strtol,w
  3492  03CF  07AD               	addwf	strtol@s,f
  3493  03D0                     l2048:	
  3494  03D0  082E               	movf	strtol@c,w
  3495  03D1  3A30               	xorlw	48
  3496  03D2  1D03               	skipz
  3497  03D3  2C07               	goto	l2072
  3498  03D4  082D               	movf	strtol@s,w
  3499  03D5  0084               	movwf	4
  3500  03D6  1383               	bcf	3,7	;select IRP bank0
  3501  03D7  0800               	movf	0,w
  3502  03D8  00A4               	movwf	??_strtol
  3503  03D9  0824               	movf	??_strtol,w
  3504  03DA  00AE               	movwf	strtol@c
  3505  03DB  3001               	movlw	1
  3506  03DC  00A4               	movwf	??_strtol
  3507  03DD  0824               	movf	??_strtol,w
  3508  03DE  07AD               	addwf	strtol@s,f
  3509  03DF  0822               	movf	strtol@base+1,w
  3510  03E0  0421               	iorwf	strtol@base,w
  3511  03E1  1903               	skipnz
  3512  03E2  2BE8               	goto	l2058
  3513  03E3  3010               	movlw	16
  3514  03E4  0621               	xorwf	strtol@base,w
  3515  03E5  0422               	iorwf	strtol@base+1,w
  3516  03E6  1D03               	skipz
  3517  03E7  2BFF               	goto	l2068
  3518  03E8                     l2058:	
  3519  03E8  082E               	movf	strtol@c,w
  3520  03E9  3A78               	xorlw	120
  3521  03EA  1903               	skipnz
  3522  03EB  2BF0               	goto	l2062
  3523  03EC  082E               	movf	strtol@c,w
  3524  03ED  3A58               	xorlw	88
  3525  03EE  1D03               	skipz
  3526  03EF  2BFF               	goto	l2068
  3527  03F0                     l2062:	
  3528  03F0  3010               	movlw	16
  3529  03F1  00A1               	movwf	strtol@base
  3530  03F2  3000               	movlw	0
  3531  03F3  00A2               	movwf	strtol@base+1
  3532  03F4  082D               	movf	strtol@s,w
  3533  03F5  0084               	movwf	4
  3534  03F6  0800               	movf	0,w
  3535  03F7  00A4               	movwf	??_strtol
  3536  03F8  0824               	movf	??_strtol,w
  3537  03F9  00AE               	movwf	strtol@c
  3538  03FA  3001               	movlw	1
  3539  03FB  00A4               	movwf	??_strtol
  3540  03FC  0824               	movf	??_strtol,w
  3541  03FD  07AD               	addwf	strtol@s,f
  3542  03FE  2C07               	goto	l2072
  3543  03FF                     l2068:	
  3544  03FF  0822               	movf	strtol@base+1,w
  3545  0400  0421               	iorwf	strtol@base,w
  3546  0401  1D03               	skipz
  3547  0402  2C07               	goto	l2072
  3548  0403  3008               	movlw	8
  3549  0404  00A1               	movwf	strtol@base
  3550  0405  3000               	movlw	0
  3551  0406  00A2               	movwf	strtol@base+1
  3552  0407                     l2072:	
  3553  0407  0822               	movf	strtol@base+1,w
  3554  0408  0421               	iorwf	strtol@base,w
  3555  0409  1D03               	skipz
  3556  040A  2C0F               	goto	l2076
  3557  040B  300A               	movlw	10
  3558  040C  00A1               	movwf	strtol@base
  3559  040D  3000               	movlw	0
  3560  040E  00A2               	movwf	strtol@base+1
  3561  040F                     l2076:	
  3562  040F  082E               	movf	strtol@c,w
  3563  0410  120A  158A  2626   	fcall	_isalpha
      +       120A  118A         
  3564  0415  1C03               	btfss	3,0
  3565  0416  2C26               	goto	l2080
  3566  0417  1283               	bcf	3,5	;RP0=0, select bank0
  3567  0418  1303               	bcf	3,6	;RP1=0, select bank0
  3568  0419  082E               	movf	strtol@c,w
  3569  041A  120A  158A  2605   	fcall	_toupper
      +       120A  118A         
  3570  041F  3EC9               	addlw	201
  3571  0420  1283               	bcf	3,5	;RP0=0, select bank0
  3572  0421  1303               	bcf	3,6	;RP1=0, select bank0
  3573  0422  00A4               	movwf	??_strtol
  3574  0423  0824               	movf	??_strtol,w
  3575  0424  00AE               	movwf	strtol@c
  3576  0425  2C34               	goto	l2084
  3577  0426                     l2080:	
  3578  0426  1283               	bcf	3,5	;RP0=0, select bank0
  3579  0427  1303               	bcf	3,6	;RP1=0, select bank0
  3580  0428  082E               	movf	strtol@c,w
  3581  0429  120A  158A  25E8   	fcall	_isdigit
      +       120A  118A         
  3582  042E  1C03               	btfss	3,0
  3583  042F  2C82               	goto	l2094
  3584  0430  3030               	movlw	48
  3585  0431  1283               	bcf	3,5	;RP0=0, select bank0
  3586  0432  1303               	bcf	3,6	;RP1=0, select bank0
  3587  0433  02AE               	subwf	strtol@c,f
  3588  0434                     l2084:	
  3589  0434  0822               	movf	strtol@base+1,w
  3590  0435  3A80               	xorlw	128
  3591  0436  3C80               	sublw	128
  3592  0437  1D03               	skipz
  3593  0438  2C3B               	goto	u1645
  3594  0439  0821               	movf	strtol@base,w
  3595  043A  022E               	subwf	strtol@c,w
  3596  043B                     u1645:	
  3597  043B  1803               	btfsc	3,0
  3598  043C  2C82               	goto	l2094
  3599  043D  1283               	bcf	3,5	;RP0=0, select bank0
  3600  043E  1303               	bcf	3,6	;RP1=0, select bank0
  3601  043F  082E               	movf	strtol@c,w
  3602  0440  00A4               	movwf	??_strtol
  3603  0441  01A5               	clrf	??_strtol+1
  3604  0442  01A6               	clrf	??_strtol+2
  3605  0443  01A7               	clrf	??_strtol+3
  3606  0444  0821               	movf	strtol@base,w
  3607  0445  00F0               	movwf	?___lmul
  3608  0446  0822               	movf	strtol@base+1,w
  3609  0447  00F1               	movwf	?___lmul+1
  3610  0448  3000               	movlw	0
  3611  0449  1BF1               	btfsc	?___lmul+1,7
  3612  044A  30FF               	movlw	255
  3613  044B  00F2               	movwf	?___lmul+2
  3614  044C  00F3               	movwf	?___lmul+3
  3615  044D  082C               	movf	strtol@a+3,w
  3616  044E  00F7               	movwf	?___lmul+7
  3617  044F  082B               	movf	strtol@a+2,w
  3618  0450  00F6               	movwf	?___lmul+6
  3619  0451  082A               	movf	strtol@a+1,w
  3620  0452  00F5               	movwf	?___lmul+5
  3621  0453  0829               	movf	strtol@a,w
  3622  0454  00F4               	movwf	?___lmul+4
  3623  0455  120A  118A  20A0   	fcall	___lmul
      +       120A  118A         
  3624  045A  0870               	movf	?___lmul,w
  3625  045B  1283               	bcf	3,5	;RP0=0, select bank0
  3626  045C  1303               	bcf	3,6	;RP1=0, select bank0
  3627  045D  07A4               	addwf	??_strtol,f
  3628  045E  0871               	movf	?___lmul+1,w
  3629  045F  1803               	skipnc
  3630  0460  0F71               	incfsz	?___lmul+1,w
  3631  0461  2C63               	goto	u1650
  3632  0462  2C64               	goto	u1651
  3633  0463                     u1650:	
  3634  0463  07A5               	addwf	??_strtol+1,f
  3635  0464                     u1651:	
  3636  0464  0872               	movf	?___lmul+2,w
  3637  0465  1803               	skipnc
  3638  0466  0F72               	incfsz	?___lmul+2,w
  3639  0467  2C69               	goto	u1652
  3640  0468  2C6A               	goto	u1653
  3641  0469                     u1652:	
  3642  0469  07A6               	addwf	??_strtol+2,f
  3643  046A                     u1653:	
  3644  046A  0873               	movf	?___lmul+3,w
  3645  046B  1803               	skipnc
  3646  046C  0A73               	incf	?___lmul+3,w
  3647  046D  07A7               	addwf	??_strtol+3,f
  3648  046E  0827               	movf	??_strtol+3,w
  3649  046F  00AC               	movwf	strtol@a+3
  3650  0470  0826               	movf	??_strtol+2,w
  3651  0471  00AB               	movwf	strtol@a+2
  3652  0472  0825               	movf	??_strtol+1,w
  3653  0473  00AA               	movwf	strtol@a+1
  3654  0474  0824               	movf	??_strtol,w
  3655  0475  00A9               	movwf	strtol@a
  3656  0476  082D               	movf	strtol@s,w
  3657  0477  0084               	movwf	4
  3658  0478  1383               	bcf	3,7	;select IRP bank0
  3659  0479  0800               	movf	0,w
  3660  047A  00A4               	movwf	??_strtol
  3661  047B  0824               	movf	??_strtol,w
  3662  047C  00AE               	movwf	strtol@c
  3663  047D  3001               	movlw	1
  3664  047E  00A4               	movwf	??_strtol
  3665  047F  0824               	movf	??_strtol,w
  3666  0480  07AD               	addwf	strtol@s,f
  3667  0481  2C0F               	goto	l2076
  3668  0482                     l2094:	
  3669  0482  1283               	bcf	3,5	;RP0=0, select bank0
  3670  0483  1303               	bcf	3,6	;RP1=0, select bank0
  3671  0484  0820               	movf	strtol@endptr,w
  3672  0485  1903               	btfsc	3,2
  3673  0486  2C8E               	goto	l2098
  3674  0487  032D               	decf	strtol@s,w
  3675  0488  00A4               	movwf	??_strtol
  3676  0489  0820               	movf	strtol@endptr,w
  3677  048A  0084               	movwf	4
  3678  048B  0824               	movf	??_strtol,w
  3679  048C  1383               	bcf	3,7	;select IRP bank0
  3680  048D  0080               	movwf	0
  3681  048E                     l2098:	
  3682  048E  0828               	movf	strtol@sign,w
  3683  048F  1903               	btfsc	3,2
  3684  0490  2CA1               	goto	l2104
  3685  0491  0929               	comf	strtol@a,w
  3686  0492  00A0               	movwf	?_strtol
  3687  0493  092A               	comf	strtol@a+1,w
  3688  0494  00A1               	movwf	?_strtol+1
  3689  0495  092B               	comf	strtol@a+2,w
  3690  0496  00A2               	movwf	?_strtol+2
  3691  0497  092C               	comf	strtol@a+3,w
  3692  0498  00A3               	movwf	?_strtol+3
  3693  0499  0AA0               	incf	?_strtol,f
  3694  049A  1903               	skipnz
  3695  049B  0AA1               	incf	?_strtol+1,f
  3696  049C  1903               	skipnz
  3697  049D  0AA2               	incf	?_strtol+2,f
  3698  049E  1903               	skipnz
  3699  049F  0AA3               	incf	?_strtol+3,f
  3700  04A0  0008               	return
  3701  04A1                     l2104:	
  3702  04A1  082C               	movf	strtol@a+3,w
  3703  04A2  00A3               	movwf	?_strtol+3
  3704  04A3  082B               	movf	strtol@a+2,w
  3705  04A4  00A2               	movwf	?_strtol+2
  3706  04A5  082A               	movf	strtol@a+1,w
  3707  04A6  00A1               	movwf	?_strtol+1
  3708  04A7  0829               	movf	strtol@a,w
  3709  04A8  00A0               	movwf	?_strtol
  3710  04A9  0008               	return
  3711  04AA                     __end_of_strtol:	
  3712                           
  3713                           	psect	text13
  3714  0DE8                     __ptext13:	
  3715 ;; *************** function _isdigit *****************
  3716 ;; Defined at:
  3717 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isdigit.c"
  3718 ;; Parameters:    Size  Location     Type
  3719 ;;  c               1    wreg     unsigned char 
  3720 ;; Auto vars:     Size  Location     Type
  3721 ;;  c               1    1[COMMON] unsigned char 
  3722 ;; Return value:  Size  Location     Type
  3723 ;;		None               void
  3724 ;; Registers used:
  3725 ;;		wreg, status,2, status,0
  3726 ;; Tracked objects:
  3727 ;;		On entry : 0/0
  3728 ;;		On exit  : 0/0
  3729 ;;		Unchanged: 0/0
  3730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3731 ;;      Params:         0       0       0       0       0
  3732 ;;      Locals:         2       0       0       0       0
  3733 ;;      Temps:          0       0       0       0       0
  3734 ;;      Totals:         2       0       0       0       0
  3735 ;;Total ram usage:        2 bytes
  3736 ;; Hardware stack levels used:    1
  3737 ;; This function calls:
  3738 ;;		Nothing
  3739 ;; This function is called by:
  3740 ;;		_strtol
  3741 ;; This function uses a non-reentrant model
  3742 ;;
  3743                           
  3744                           
  3745                           ;psect for function _isdigit
  3746  0DE8                     _isdigit:	
  3747                           
  3748                           ;incstack = 0
  3749                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3750                           ;isdigit@c stored from wreg
  3751  0DE8  00F1               	movwf	isdigit@c
  3752  0DE9  01F0               	clrf	_isdigit$469
  3753  0DEA  303A               	movlw	58
  3754  0DEB  0271               	subwf	isdigit@c,w
  3755  0DEC  1803               	skipnc
  3756  0DED  2DF4               	goto	l1910
  3757  0DEE  3030               	movlw	48
  3758  0DEF  0271               	subwf	isdigit@c,w
  3759  0DF0  1C03               	skipc
  3760  0DF1  2DF4               	goto	l1910
  3761  0DF2  01F0               	clrf	_isdigit$469
  3762  0DF3  0AF0               	incf	_isdigit$469,f
  3763  0DF4                     l1910:	
  3764  0DF4  0C70               	rrf	_isdigit$469,w
  3765  0DF5  0008               	return
  3766  0DF6                     __end_of_isdigit:	
  3767                           
  3768                           	psect	text14
  3769  0E05                     __ptext14:	
  3770 ;; *************** function _toupper *****************
  3771 ;; Defined at:
  3772 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\toupper.c"
  3773 ;; Parameters:    Size  Location     Type
  3774 ;;  c               1    wreg     unsigned char 
  3775 ;; Auto vars:     Size  Location     Type
  3776 ;;  c               1    1[COMMON] unsigned char 
  3777 ;; Return value:  Size  Location     Type
  3778 ;;                  1    wreg      unsigned char 
  3779 ;; Registers used:
  3780 ;;		wreg, status,2, status,0
  3781 ;; Tracked objects:
  3782 ;;		On entry : 0/0
  3783 ;;		On exit  : 0/0
  3784 ;;		Unchanged: 0/0
  3785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3786 ;;      Params:         0       0       0       0       0
  3787 ;;      Locals:         1       0       0       0       0
  3788 ;;      Temps:          1       0       0       0       0
  3789 ;;      Totals:         2       0       0       0       0
  3790 ;;Total ram usage:        2 bytes
  3791 ;; Hardware stack levels used:    1
  3792 ;; This function calls:
  3793 ;;		Nothing
  3794 ;; This function is called by:
  3795 ;;		_strtol
  3796 ;; This function uses a non-reentrant model
  3797 ;;
  3798                           
  3799                           
  3800                           ;psect for function _toupper
  3801  0E05                     _toupper:	
  3802                           
  3803                           ;incstack = 0
  3804                           ; Regs used in _toupper: [wreg+status,2+status,0]
  3805                           ;toupper@c stored from wreg
  3806  0E05  00F1               	movwf	toupper@c
  3807  0E06  307B               	movlw	123
  3808  0E07  0271               	subwf	toupper@c,w
  3809  0E08  1803               	skipnc
  3810  0E09  2E12               	goto	l1898
  3811  0E0A  3061               	movlw	97
  3812  0E0B  0271               	subwf	toupper@c,w
  3813  0E0C  1C03               	skipc
  3814  0E0D  2E12               	goto	l1898
  3815  0E0E  30DF               	movlw	223
  3816  0E0F  00F0               	movwf	??_toupper
  3817  0E10  0870               	movf	??_toupper,w
  3818  0E11  05F1               	andwf	toupper@c,f
  3819  0E12                     l1898:	
  3820  0E12  0871               	movf	toupper@c,w
  3821  0E13  0008               	return
  3822  0E14                     __end_of_toupper:	
  3823                           
  3824                           	psect	text15
  3825  0E26                     __ptext15:	
  3826 ;; *************** function _isalpha *****************
  3827 ;; Defined at:
  3828 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isalpha.c"
  3829 ;; Parameters:    Size  Location     Type
  3830 ;;  c               1    wreg     unsigned char 
  3831 ;; Auto vars:     Size  Location     Type
  3832 ;;  c               1    3[COMMON] unsigned char 
  3833 ;; Return value:  Size  Location     Type
  3834 ;;		None               void
  3835 ;; Registers used:
  3836 ;;		wreg, status,2, status,0, pclath, cstack
  3837 ;; Tracked objects:
  3838 ;;		On entry : 0/0
  3839 ;;		On exit  : 0/0
  3840 ;;		Unchanged: 0/0
  3841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3842 ;;      Params:         0       0       0       0       0
  3843 ;;      Locals:         2       0       0       0       0
  3844 ;;      Temps:          0       0       0       0       0
  3845 ;;      Totals:         2       0       0       0       0
  3846 ;;Total ram usage:        2 bytes
  3847 ;; Hardware stack levels used:    1
  3848 ;; Hardware stack levels required when called:    1
  3849 ;; This function calls:
  3850 ;;		_isupper
  3851 ;; This function is called by:
  3852 ;;		_strtol
  3853 ;; This function uses a non-reentrant model
  3854 ;;
  3855                           
  3856                           
  3857                           ;psect for function _isalpha
  3858  0E26                     _isalpha:	
  3859                           
  3860                           ;incstack = 0
  3861                           ; Regs used in _isalpha: [wreg+status,2+status,0+pclath+cstack]
  3862                           ;isalpha@c stored from wreg
  3863  0E26  00F3               	movwf	isalpha@c
  3864  0E27  01F2               	clrf	_isalpha$466
  3865  0E28  0AF2               	incf	_isalpha$466,f
  3866  0E29  307B               	movlw	123
  3867  0E2A  0273               	subwf	isalpha@c,w
  3868  0E2B  1803               	skipnc
  3869  0E2C  2E31               	goto	l2008
  3870  0E2D  3061               	movlw	97
  3871  0E2E  0273               	subwf	isalpha@c,w
  3872  0E2F  1803               	skipnc
  3873  0E30  2E37               	goto	l2012
  3874  0E31                     l2008:	
  3875  0E31  0873               	movf	isalpha@c,w
  3876  0E32  120A  158A  25DA   	fcall	_isupper
  3877  0E35  1C03               	btfss	3,0
  3878  0E36  01F2               	clrf	_isalpha$466
  3879  0E37                     l2012:	
  3880  0E37  0C72               	rrf	_isalpha$466,w
  3881  0E38  0008               	return
  3882  0E39                     __end_of_isalpha:	
  3883                           
  3884                           	psect	text16
  3885  0DDA                     __ptext16:	
  3886 ;; *************** function _isupper *****************
  3887 ;; Defined at:
  3888 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isupper.c"
  3889 ;; Parameters:    Size  Location     Type
  3890 ;;  c               1    wreg     unsigned char 
  3891 ;; Auto vars:     Size  Location     Type
  3892 ;;  c               1    1[COMMON] unsigned char 
  3893 ;; Return value:  Size  Location     Type
  3894 ;;		None               void
  3895 ;; Registers used:
  3896 ;;		wreg, status,2, status,0
  3897 ;; Tracked objects:
  3898 ;;		On entry : 0/0
  3899 ;;		On exit  : 0/0
  3900 ;;		Unchanged: 0/0
  3901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3902 ;;      Params:         0       0       0       0       0
  3903 ;;      Locals:         2       0       0       0       0
  3904 ;;      Temps:          0       0       0       0       0
  3905 ;;      Totals:         2       0       0       0       0
  3906 ;;Total ram usage:        2 bytes
  3907 ;; Hardware stack levels used:    1
  3908 ;; This function calls:
  3909 ;;		Nothing
  3910 ;; This function is called by:
  3911 ;;		_isalpha
  3912 ;; This function uses a non-reentrant model
  3913 ;;
  3914                           
  3915                           
  3916                           ;psect for function _isupper
  3917  0DDA                     _isupper:	
  3918                           
  3919                           ;incstack = 0
  3920                           ; Regs used in _isupper: [wreg+status,2+status,0]
  3921                           ;isupper@c stored from wreg
  3922  0DDA  00F1               	movwf	isupper@c
  3923  0DDB  01F0               	clrf	_isupper$475
  3924  0DDC  305B               	movlw	91
  3925  0DDD  0271               	subwf	isupper@c,w
  3926  0DDE  1803               	skipnc
  3927  0DDF  2DE6               	goto	l1922
  3928  0DE0  3041               	movlw	65
  3929  0DE1  0271               	subwf	isupper@c,w
  3930  0DE2  1C03               	skipc
  3931  0DE3  2DE6               	goto	l1922
  3932  0DE4  01F0               	clrf	_isupper$475
  3933  0DE5  0AF0               	incf	_isupper$475,f
  3934  0DE6                     l1922:	
  3935  0DE6  0C70               	rrf	_isupper$475,w
  3936  0DE7  0008               	return
  3937  0DE8                     __end_of_isupper:	
  3938                           
  3939                           	psect	text17
  3940  0E14                     __ptext17:	
  3941 ;; *************** function _isspace *****************
  3942 ;; Defined at:
  3943 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isspace.c"
  3944 ;; Parameters:    Size  Location     Type
  3945 ;;  c               1    wreg     unsigned char 
  3946 ;; Auto vars:     Size  Location     Type
  3947 ;;  c               1    1[COMMON] unsigned char 
  3948 ;; Return value:  Size  Location     Type
  3949 ;;		None               void
  3950 ;; Registers used:
  3951 ;;		wreg, status,2, status,0
  3952 ;; Tracked objects:
  3953 ;;		On entry : 0/0
  3954 ;;		On exit  : 0/0
  3955 ;;		Unchanged: 0/0
  3956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3957 ;;      Params:         0       0       0       0       0
  3958 ;;      Locals:         2       0       0       0       0
  3959 ;;      Temps:          0       0       0       0       0
  3960 ;;      Totals:         2       0       0       0       0
  3961 ;;Total ram usage:        2 bytes
  3962 ;; Hardware stack levels used:    1
  3963 ;; This function calls:
  3964 ;;		Nothing
  3965 ;; This function is called by:
  3966 ;;		_strtol
  3967 ;; This function uses a non-reentrant model
  3968 ;;
  3969                           
  3970                           
  3971                           ;psect for function _isspace
  3972  0E14                     _isspace:	
  3973                           
  3974                           ;incstack = 0
  3975                           ; Regs used in _isspace: [wreg+status,2+status,0]
  3976                           ;isspace@c stored from wreg
  3977  0E14  00F1               	movwf	isspace@c
  3978  0E15  01F0               	clrf	_isspace$472
  3979  0E16  0AF0               	incf	_isspace$472,f
  3980  0E17  0871               	movf	isspace@c,w
  3981  0E18  3A20               	xorlw	32
  3982  0E19  1903               	skipnz
  3983  0E1A  2E24               	goto	l1888
  3984  0E1B  300E               	movlw	14
  3985  0E1C  0271               	subwf	isspace@c,w
  3986  0E1D  1803               	skipnc
  3987  0E1E  2E23               	goto	l1886
  3988  0E1F  3009               	movlw	9
  3989  0E20  0271               	subwf	isspace@c,w
  3990  0E21  1803               	skipnc
  3991  0E22  2E24               	goto	l1888
  3992  0E23                     l1886:	
  3993  0E23  01F0               	clrf	_isspace$472
  3994  0E24                     l1888:	
  3995  0E24  0C70               	rrf	_isspace$472,w
  3996  0E25  0008               	return
  3997  0E26                     __end_of_isspace:	
  3998                           
  3999                           	psect	text18
  4000  00A0                     __ptext18:	
  4001 ;; *************** function ___lmul *****************
  4002 ;; Defined at:
  4003 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic\lmul.c"
  4004 ;; Parameters:    Size  Location     Type
  4005 ;;  multiplier      4    0[COMMON] unsigned long 
  4006 ;;  multiplicand    4    4[COMMON] unsigned long 
  4007 ;; Auto vars:     Size  Location     Type
  4008 ;;  product         4    9[COMMON] unsigned long 
  4009 ;; Return value:  Size  Location     Type
  4010 ;;                  4    0[COMMON] unsigned long 
  4011 ;; Registers used:
  4012 ;;		wreg, status,2, status,0
  4013 ;; Tracked objects:
  4014 ;;		On entry : 0/0
  4015 ;;		On exit  : 0/0
  4016 ;;		Unchanged: 0/0
  4017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4018 ;;      Params:         8       0       0       0       0
  4019 ;;      Locals:         4       0       0       0       0
  4020 ;;      Temps:          1       0       0       0       0
  4021 ;;      Totals:        13       0       0       0       0
  4022 ;;Total ram usage:       13 bytes
  4023 ;; Hardware stack levels used:    1
  4024 ;; This function calls:
  4025 ;;		Nothing
  4026 ;; This function is called by:
  4027 ;;		_strtol
  4028 ;; This function uses a non-reentrant model
  4029 ;;
  4030                           
  4031                           
  4032                           ;psect for function ___lmul
  4033  00A0                     ___lmul:	
  4034                           
  4035                           ;incstack = 0
  4036                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4037  00A0  3000               	movlw	0
  4038  00A1  00FC               	movwf	___lmul@product+3
  4039  00A2  3000               	movlw	0
  4040  00A3  00FB               	movwf	___lmul@product+2
  4041  00A4  3000               	movlw	0
  4042  00A5  00FA               	movwf	___lmul@product+1
  4043  00A6  3000               	movlw	0
  4044  00A7  00F9               	movwf	___lmul@product
  4045  00A8                     l1840:	
  4046  00A8  1C70               	btfss	___lmul@multiplier,0
  4047  00A9  28BE               	goto	l1844
  4048  00AA  0874               	movf	___lmul@multiplicand,w
  4049  00AB  07F9               	addwf	___lmul@product,f
  4050  00AC  0875               	movf	___lmul@multiplicand+1,w
  4051  00AD  1103               	clrz
  4052  00AE  1803               	skipnc
  4053  00AF  3E01               	addlw	1
  4054  00B0  1D03               	btfss	3,2
  4055  00B1  07FA               	addwf	___lmul@product+1,f
  4056  00B2  0876               	movf	___lmul@multiplicand+2,w
  4057  00B3  1103               	clrz
  4058  00B4  1803               	skipnc
  4059  00B5  3E01               	addlw	1
  4060  00B6  1D03               	btfss	3,2
  4061  00B7  07FB               	addwf	___lmul@product+2,f
  4062  00B8  0877               	movf	___lmul@multiplicand+3,w
  4063  00B9  1103               	clrz
  4064  00BA  1803               	skipnc
  4065  00BB  3E01               	addlw	1
  4066  00BC  1D03               	btfss	3,2
  4067  00BD  07FC               	addwf	___lmul@product+3,f
  4068  00BE                     l1844:	
  4069  00BE  3001               	movlw	1
  4070  00BF  00F8               	movwf	??___lmul
  4071  00C0                     u1185:	
  4072  00C0  1003               	clrc
  4073  00C1  0DF4               	rlf	___lmul@multiplicand,f
  4074  00C2  0DF5               	rlf	___lmul@multiplicand+1,f
  4075  00C3  0DF6               	rlf	___lmul@multiplicand+2,f
  4076  00C4  0DF7               	rlf	___lmul@multiplicand+3,f
  4077  00C5  0BF8               	decfsz	??___lmul,f
  4078  00C6  28C0               	goto	u1185
  4079  00C7  3001               	movlw	1
  4080  00C8                     u1195:	
  4081  00C8  1003               	clrc
  4082  00C9  0CF3               	rrf	___lmul@multiplier+3,f
  4083  00CA  0CF2               	rrf	___lmul@multiplier+2,f
  4084  00CB  0CF1               	rrf	___lmul@multiplier+1,f
  4085  00CC  0CF0               	rrf	___lmul@multiplier,f
  4086  00CD  3EFF               	addlw	-1
  4087  00CE  1D03               	skipz
  4088  00CF  28C8               	goto	u1195
  4089  00D0  0873               	movf	___lmul@multiplier+3,w
  4090  00D1  0472               	iorwf	___lmul@multiplier+2,w
  4091  00D2  0471               	iorwf	___lmul@multiplier+1,w
  4092  00D3  0470               	iorwf	___lmul@multiplier,w
  4093  00D4  1D03               	skipz
  4094  00D5  28A8               	goto	l1840
  4095  00D6  087C               	movf	___lmul@product+3,w
  4096  00D7  00F3               	movwf	?___lmul+3
  4097  00D8  087B               	movf	___lmul@product+2,w
  4098  00D9  00F2               	movwf	?___lmul+2
  4099  00DA  087A               	movf	___lmul@product+1,w
  4100  00DB  00F1               	movwf	?___lmul+1
  4101  00DC  0879               	movf	___lmul@product,w
  4102  00DD  00F0               	movwf	?___lmul
  4103  00DE  0008               	return
  4104  00DF                     __end_of___lmul:	
  4105                           
  4106                           	psect	text19
  4107  0DF6                     __ptext19:	
  4108 ;; *************** function _flush_RCREG *****************
  4109 ;; Defined at:
  4110 ;;		line 181 in file "..\Header Files\..\C Source Code\USART_16F_MASTER.c"
  4111 ;; Parameters:    Size  Location     Type
  4112 ;;		None
  4113 ;; Auto vars:     Size  Location     Type
  4114 ;;		None
  4115 ;; Return value:  Size  Location     Type
  4116 ;;		None               void
  4117 ;; Registers used:
  4118 ;;		wreg
  4119 ;; Tracked objects:
  4120 ;;		On entry : 0/0
  4121 ;;		On exit  : 0/0
  4122 ;;		Unchanged: 0/0
  4123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4124 ;;      Params:         0       0       0       0       0
  4125 ;;      Locals:         0       0       0       0       0
  4126 ;;      Temps:          1       0       0       0       0
  4127 ;;      Totals:         1       0       0       0       0
  4128 ;;Total ram usage:        1 bytes
  4129 ;; Hardware stack levels used:    1
  4130 ;; This function calls:
  4131 ;;		Nothing
  4132 ;; This function is called by:
  4133 ;;		_getRSSI
  4134 ;;		_getIdentification
  4135 ;;		_setDestination
  4136 ;;		_enterCommandMode
  4137 ;;		_exitCommandMode
  4138 ;;		_main
  4139 ;; This function uses a non-reentrant model
  4140 ;;
  4141                           
  4142                           
  4143                           ;psect for function _flush_RCREG
  4144  0DF6                     _flush_RCREG:	
  4145                           
  4146                           ;USART_16F_MASTER.c: 183: dummy=RCREG;
  4147                           
  4148                           ;incstack = 0
  4149                           ; Regs used in _flush_RCREG: [wreg]
  4150  0DF6  1283               	bcf	3,5	;RP0=0, select bank0
  4151  0DF7  1303               	bcf	3,6	;RP1=0, select bank0
  4152  0DF8  081A               	movf	26,w	;volatile
  4153  0DF9  00F0               	movwf	??_flush_RCREG
  4154  0DFA  0870               	movf	??_flush_RCREG,w
  4155  0DFB  00CF               	movwf	_dummy
  4156                           
  4157                           ;USART_16F_MASTER.c: 184: dummy=RCREG;
  4158  0DFC  081A               	movf	26,w	;volatile
  4159  0DFD  00F0               	movwf	??_flush_RCREG
  4160  0DFE  0870               	movf	??_flush_RCREG,w
  4161  0DFF  00CF               	movwf	_dummy
  4162                           
  4163                           ;USART_16F_MASTER.c: 185: dummy=RCREG;
  4164  0E00  081A               	movf	26,w	;volatile
  4165  0E01  00F0               	movwf	??_flush_RCREG
  4166  0E02  0870               	movf	??_flush_RCREG,w
  4167  0E03  00CF               	movwf	_dummy
  4168  0E04  0008               	return
  4169  0E05                     __end_of_flush_RCREG:	
  4170                           
  4171                           	psect	text20
  4172  0F29                     __ptext20:	
  4173 ;; *************** function _send_USART_string *****************
  4174 ;; Defined at:
  4175 ;;		line 151 in file "..\Header Files\..\C Source Code\USART_16F_MASTER.c"
  4176 ;; Parameters:    Size  Location     Type
  4177 ;;  string          2    6[COMMON] PTR const unsigned char 
  4178 ;;		 -> STR_15(8), STR_14(10), STR_13(10), STR_12(15), 
  4179 ;;		 -> main@percentage(7), main@dBm(7), main@RSSI(5), main@mobile(17), 
  4180 ;;		 -> main@broadcastNumber(4), main@sensor(17), STR_10(6), STR_9(4), 
  4181 ;;		 -> STR_8(2), setDestination@subbuff2(9), STR_7(5), STR_6(2), 
  4182 ;;		 -> setDestination@subbuff(9), STR_5(5), STR_4(6), STR_3(6), 
  4183 ;;		 -> STR_1(6), 
  4184 ;; Auto vars:     Size  Location     Type
  4185 ;;  iter            1   10[COMMON] unsigned char 
  4186 ;; Return value:  Size  Location     Type
  4187 ;;		None               void
  4188 ;; Registers used:
  4189 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4190 ;; Tracked objects:
  4191 ;;		On entry : 0/0
  4192 ;;		On exit  : 0/0
  4193 ;;		Unchanged: 0/0
  4194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4195 ;;      Params:         2       0       0       0       0
  4196 ;;      Locals:         1       0       0       0       0
  4197 ;;      Temps:          2       0       0       0       0
  4198 ;;      Totals:         5       0       0       0       0
  4199 ;;Total ram usage:        5 bytes
  4200 ;; Hardware stack levels used:    1
  4201 ;; Hardware stack levels required when called:    2
  4202 ;; This function calls:
  4203 ;;		_send_USART_char
  4204 ;;		_strlen
  4205 ;; This function is called by:
  4206 ;;		_getRSSI
  4207 ;;		_getIdentification
  4208 ;;		_setDestination
  4209 ;;		_enterCommandMode
  4210 ;;		_exitCommandMode
  4211 ;;		_main
  4212 ;; This function uses a non-reentrant model
  4213 ;;
  4214                           
  4215                           
  4216                           ;psect for function _send_USART_string
  4217  0F29                     _send_USART_string:	
  4218                           
  4219                           ;USART_16F_MASTER.c: 152: for(unsigned char iter = 0 ; iter < strlen(string) ; iter++)
  4220                           
  4221                           ;incstack = 0
  4222                           ; Regs used in _send_USART_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4223  0F29  01FA               	clrf	send_USART_string@iter
  4224  0F2A                     l2022:	
  4225  0F2A  0877               	movf	send_USART_string@string+1,w
  4226  0F2B  01F1               	clrf	?_strlen+1
  4227  0F2C  07F1               	addwf	?_strlen+1,f
  4228  0F2D  0876               	movf	send_USART_string@string,w
  4229  0F2E  01F0               	clrf	?_strlen
  4230  0F2F  07F0               	addwf	?_strlen,f
  4231  0F30  120A  158A  26A5   	fcall	_strlen
      +       120A  158A         
  4232  0F35  087A               	movf	send_USART_string@iter,w
  4233  0F36  00F8               	movwf	??_send_USART_string
  4234  0F37  01F9               	clrf	??_send_USART_string+1
  4235  0F38  0871               	movf	?_strlen+1,w
  4236  0F39  0279               	subwf	??_send_USART_string+1,w
  4237  0F3A  1D03               	skipz
  4238  0F3B  2F3E               	goto	u1515
  4239  0F3C  0870               	movf	?_strlen,w
  4240  0F3D  0278               	subwf	??_send_USART_string,w
  4241  0F3E                     u1515:	
  4242  0F3E  1803               	btfsc	3,0
  4243  0F3F  0008               	return
  4244                           
  4245                           ;USART_16F_MASTER.c: 153: {send_USART_char(string[iter]);}
  4246  0F40  087A               	movf	send_USART_string@iter,w
  4247  0F41  0776               	addwf	send_USART_string@string,w
  4248  0F42  0084               	movwf	4
  4249  0F43  0877               	movf	send_USART_string@string+1,w
  4250  0F44  1803               	skipnc
  4251  0F45  0A77               	incf	send_USART_string@string+1,w
  4252  0F46  1283               	bcf	3,5	;RP0=0, select bank0
  4253  0F47  1303               	bcf	3,6	;RP1=0, select bank0
  4254  0F48  00FF               	movwf	127
  4255  0F49  120A  118A  2003   	fcall	stringtab
      +       120A  158A         
  4256  0F4E  120A  158A  2639   	fcall	_send_USART_char
      +       120A  158A         
  4257  0F53  3001               	movlw	1
  4258  0F54  00F8               	movwf	??_send_USART_string
  4259  0F55  0878               	movf	??_send_USART_string,w
  4260  0F56  07FA               	addwf	send_USART_string@iter,f
  4261  0F57  2F2A               	goto	l2022
  4262  0F58                     __end_of_send_USART_string:	
  4263                           
  4264                           	psect	text21
  4265  0EA5                     __ptext21:	
  4266 ;; *************** function _strlen *****************
  4267 ;; Defined at:
  4268 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strlen.c"
  4269 ;; Parameters:    Size  Location     Type
  4270 ;;  s               2    0[COMMON] PTR const unsigned char 
  4271 ;;		 -> STR_15(8), STR_14(10), STR_13(10), STR_12(15), 
  4272 ;;		 -> main@percentage(7), main@dBm(7), main@RSSI(5), main@mobile(17), 
  4273 ;;		 -> main@broadcastNumber(4), main@sensor(17), STR_10(6), STR_9(4), 
  4274 ;;		 -> STR_8(2), setDestination@subbuff2(9), STR_7(5), STR_6(2), 
  4275 ;;		 -> setDestination@subbuff(9), STR_5(5), STR_4(6), STR_3(6), 
  4276 ;;		 -> STR_1(6), 
  4277 ;; Auto vars:     Size  Location     Type
  4278 ;;  cp              2    4[COMMON] PTR const unsigned char 
  4279 ;;		 -> STR_15(8), STR_14(10), STR_13(10), STR_12(15), 
  4280 ;;		 -> main@percentage(7), main@dBm(7), main@RSSI(5), main@mobile(17), 
  4281 ;;		 -> main@broadcastNumber(4), main@sensor(17), STR_10(6), STR_9(4), 
  4282 ;;		 -> STR_8(2), setDestination@subbuff2(9), STR_7(5), STR_6(2), 
  4283 ;;		 -> setDestination@subbuff(9), STR_5(5), STR_4(6), STR_3(6), 
  4284 ;;		 -> STR_1(6), 
  4285 ;; Return value:  Size  Location     Type
  4286 ;;                  2    0[COMMON] unsigned int 
  4287 ;; Registers used:
  4288 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  4289 ;; Tracked objects:
  4290 ;;		On entry : 0/0
  4291 ;;		On exit  : 0/0
  4292 ;;		Unchanged: 0/0
  4293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4294 ;;      Params:         2       0       0       0       0
  4295 ;;      Locals:         2       0       0       0       0
  4296 ;;      Temps:          2       0       0       0       0
  4297 ;;      Totals:         6       0       0       0       0
  4298 ;;Total ram usage:        6 bytes
  4299 ;; Hardware stack levels used:    2
  4300 ;; This function calls:
  4301 ;;		Nothing
  4302 ;; This function is called by:
  4303 ;;		_send_USART_string
  4304 ;; This function uses a non-reentrant model
  4305 ;;
  4306                           
  4307                           
  4308                           ;psect for function _strlen
  4309  0EA5                     _strlen:	
  4310                           
  4311                           ;incstack = 0
  4312                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  4313  0EA5  0871               	movf	strlen@s+1,w
  4314  0EA6  01F5               	clrf	strlen@cp+1
  4315  0EA7  07F5               	addwf	strlen@cp+1,f
  4316  0EA8  0870               	movf	strlen@s,w
  4317  0EA9  01F4               	clrf	strlen@cp
  4318  0EAA  07F4               	addwf	strlen@cp,f
  4319  0EAB                     l1800:	
  4320  0EAB  0875               	movf	strlen@cp+1,w
  4321  0EAC  1283               	bcf	3,5	;RP0=0, select bank0
  4322  0EAD  1303               	bcf	3,6	;RP1=0, select bank0
  4323  0EAE  00FF               	movwf	127
  4324  0EAF  0874               	movf	strlen@cp,w
  4325  0EB0  0084               	movwf	4
  4326  0EB1  120A  118A  2003   	fcall	stringtab
      +       120A  158A         
  4327  0EB6  3800               	iorlw	0
  4328  0EB7  1903               	btfsc	3,2
  4329  0EB8  2EBE               	goto	l1802
  4330  0EB9  3001               	movlw	1
  4331  0EBA  07F4               	addwf	strlen@cp,f
  4332  0EBB  1803               	skipnc
  4333  0EBC  0AF5               	incf	strlen@cp+1,f
  4334  0EBD  2EAB               	goto	l1800
  4335  0EBE                     l1802:	
  4336  0EBE  0970               	comf	strlen@s,w
  4337  0EBF  00F2               	movwf	??_strlen
  4338  0EC0  0971               	comf	strlen@s+1,w
  4339  0EC1  00F3               	movwf	??_strlen+1
  4340  0EC2  0AF2               	incf	??_strlen,f
  4341  0EC3  1903               	skipnz
  4342  0EC4  0AF3               	incf	??_strlen+1,f
  4343  0EC5  0874               	movf	strlen@cp,w
  4344  0EC6  0772               	addwf	??_strlen,w
  4345  0EC7  00F0               	movwf	?_strlen
  4346  0EC8  0875               	movf	strlen@cp+1,w
  4347  0EC9  1803               	skipnc
  4348  0ECA  0A75               	incf	strlen@cp+1,w
  4349  0ECB  0773               	addwf	??_strlen+1,w
  4350  0ECC  00F1               	movwf	?_strlen+1
  4351  0ECD  0008               	return
  4352  0ECE                     __end_of_strlen:	
  4353                           
  4354                           	psect	text22
  4355  0E39                     __ptext22:	
  4356 ;; *************** function _send_USART_char *****************
  4357 ;; Defined at:
  4358 ;;		line 141 in file "..\Header Files\..\C Source Code\USART_16F_MASTER.c"
  4359 ;; Parameters:    Size  Location     Type
  4360 ;;  character       1    wreg     unsigned char 
  4361 ;; Auto vars:     Size  Location     Type
  4362 ;;  character       1    2[COMMON] unsigned char 
  4363 ;; Return value:  Size  Location     Type
  4364 ;;		None               void
  4365 ;; Registers used:
  4366 ;;		wreg, status,2, status,0, pclath, cstack
  4367 ;; Tracked objects:
  4368 ;;		On entry : 0/0
  4369 ;;		On exit  : 0/0
  4370 ;;		Unchanged: 0/0
  4371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4372 ;;      Params:         0       0       0       0       0
  4373 ;;      Locals:         1       0       0       0       0
  4374 ;;      Temps:          1       0       0       0       0
  4375 ;;      Totals:         2       0       0       0       0
  4376 ;;Total ram usage:        2 bytes
  4377 ;; Hardware stack levels used:    1
  4378 ;; Hardware stack levels required when called:    1
  4379 ;; This function calls:
  4380 ;;		_clear_usart_errors
  4381 ;; This function is called by:
  4382 ;;		_send_USART_string
  4383 ;;		_main
  4384 ;; This function uses a non-reentrant model
  4385 ;;
  4386                           
  4387                           
  4388                           ;psect for function _send_USART_char
  4389  0E39                     _send_USART_char:	
  4390                           
  4391                           ;incstack = 0
  4392                           ; Regs used in _send_USART_char: [wreg+status,2+status,0+pclath+cstack]
  4393                           ;send_USART_char@character stored from wreg
  4394  0E39  00F2               	movwf	send_USART_char@character
  4395  0E3A                     l109:	
  4396                           ;USART_16F_MASTER.c: 142: do
  4397                           
  4398                           
  4399                           ;USART_16F_MASTER.c: 143: {clear_usart_errors();}
  4400  0E3A  120A  158A  264D   	fcall	_clear_usart_errors
      +       120A  158A         
  4401                           
  4402                           ;USART_16F_MASTER.c: 144: while(TXIF == 0);
  4403  0E3F  1283               	bcf	3,5	;RP0=0, select bank0
  4404  0E40  1303               	bcf	3,6	;RP1=0, select bank0
  4405  0E41  1E0C               	btfss	12,4	;volatile
  4406  0E42  2E3A               	goto	l109
  4407                           
  4408                           ;USART_16F_MASTER.c: 146: TXREG = character;
  4409  0E43  0872               	movf	send_USART_char@character,w
  4410  0E44  0099               	movwf	25	;volatile
  4411                           
  4412                           ;USART_16F_MASTER.c: 147: _delay((unsigned long)((1)*(4000000/4000.0)));
  4413  0E45  30F9               	movlw	249
  4414  0E46  00F1               	movwf	??_send_USART_char
  4415  0E47                     u2287:	
  4416  0E47  0000               	nop
  4417  0E48  0BF1               	decfsz	??_send_USART_char,f
  4418  0E49  2E47               	goto	u2287
  4419  0E4A  2E4B               	nop2	;nop
  4420  0E4B  0000               	nop
  4421  0E4C  0008               	return
  4422  0E4D                     __end_of_send_USART_char:	
  4423                           
  4424                           	psect	text23
  4425  0DCF                     __ptext23:	
  4426 ;; *************** function _get_USART_char *****************
  4427 ;; Defined at:
  4428 ;;		line 115 in file "..\Header Files\..\C Source Code\USART_16F_MASTER.c"
  4429 ;; Parameters:    Size  Location     Type
  4430 ;;		None
  4431 ;; Auto vars:     Size  Location     Type
  4432 ;;		None
  4433 ;; Return value:  Size  Location     Type
  4434 ;;                  1    wreg      unsigned char 
  4435 ;; Registers used:
  4436 ;;		wreg, status,2, status,0, pclath, cstack
  4437 ;; Tracked objects:
  4438 ;;		On entry : 0/0
  4439 ;;		On exit  : 0/0
  4440 ;;		Unchanged: 0/0
  4441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4442 ;;      Params:         0       0       0       0       0
  4443 ;;      Locals:         0       0       0       0       0
  4444 ;;      Temps:          0       0       0       0       0
  4445 ;;      Totals:         0       0       0       0       0
  4446 ;;Total ram usage:        0 bytes
  4447 ;; Hardware stack levels used:    1
  4448 ;; Hardware stack levels required when called:    1
  4449 ;; This function calls:
  4450 ;;		_clear_usart_errors
  4451 ;; This function is called by:
  4452 ;;		_getRSSI
  4453 ;;		_setDestination
  4454 ;;		_enterCommandMode
  4455 ;;		_exitCommandMode
  4456 ;;		_main
  4457 ;; This function uses a non-reentrant model
  4458 ;;
  4459                           
  4460                           
  4461                           ;psect for function _get_USART_char
  4462  0DCF                     _get_USART_char:	
  4463  0DCF                     l98:	
  4464                           ;incstack = 0
  4465                           ; Regs used in _get_USART_char: [wreg+status,2+status,0+pclath+cstack]
  4466                           ;USART_16F_MASTER.c: 116: do
  4467                           
  4468                           
  4469                           ;USART_16F_MASTER.c: 117: {clear_usart_errors();}
  4470  0DCF  120A  158A  264D   	fcall	_clear_usart_errors
      +       120A  158A         
  4471                           
  4472                           ;USART_16F_MASTER.c: 118: while(RCIF == 0);
  4473  0DD4  1283               	bcf	3,5	;RP0=0, select bank0
  4474  0DD5  1303               	bcf	3,6	;RP1=0, select bank0
  4475  0DD6  1E8C               	btfss	12,5	;volatile
  4476  0DD7  2DCF               	goto	l98
  4477                           
  4478                           ;USART_16F_MASTER.c: 120: return RCREG;
  4479  0DD8  081A               	movf	26,w	;volatile
  4480  0DD9  0008               	return
  4481  0DDA                     __end_of_get_USART_char:	
  4482                           
  4483                           	psect	text24
  4484  0E4D                     __ptext24:	
  4485 ;; *************** function _clear_usart_errors *****************
  4486 ;; Defined at:
  4487 ;;		line 161 in file "..\Header Files\..\C Source Code\USART_16F_MASTER.c"
  4488 ;; Parameters:    Size  Location     Type
  4489 ;;		None
  4490 ;; Auto vars:     Size  Location     Type
  4491 ;;		None
  4492 ;; Return value:  Size  Location     Type
  4493 ;;		None               void
  4494 ;; Registers used:
  4495 ;;		wreg
  4496 ;; Tracked objects:
  4497 ;;		On entry : 0/0
  4498 ;;		On exit  : 0/0
  4499 ;;		Unchanged: 0/0
  4500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4501 ;;      Params:         0       0       0       0       0
  4502 ;;      Locals:         0       0       0       0       0
  4503 ;;      Temps:          1       0       0       0       0
  4504 ;;      Totals:         1       0       0       0       0
  4505 ;;Total ram usage:        1 bytes
  4506 ;; Hardware stack levels used:    1
  4507 ;; This function calls:
  4508 ;;		Nothing
  4509 ;; This function is called by:
  4510 ;;		_get_USART_char
  4511 ;;		_get_USART_char_timeout
  4512 ;;		_send_USART_char
  4513 ;; This function uses a non-reentrant model
  4514 ;;
  4515                           
  4516                           
  4517                           ;psect for function _clear_usart_errors
  4518  0E4D                     _clear_usart_errors:	
  4519                           
  4520                           ;USART_16F_MASTER.c: 163: if (OERR == 1)
  4521                           
  4522                           ;incstack = 0
  4523                           ; Regs used in _clear_usart_errors: [wreg]
  4524  0E4D  1283               	bcf	3,5	;RP0=0, select bank0
  4525  0E4E  1303               	bcf	3,6	;RP1=0, select bank0
  4526  0E4F  1C98               	btfss	24,1	;volatile
  4527  0E50  2E59               	goto	l120
  4528                           
  4529                           ;USART_16F_MASTER.c: 164: {
  4530                           ;USART_16F_MASTER.c: 166: TXEN=0;
  4531  0E51  1683               	bsf	3,5	;RP0=1, select bank1
  4532  0E52  1303               	bcf	3,6	;RP1=0, select bank1
  4533  0E53  1298               	bcf	24,5	;volatile
  4534                           
  4535                           ;USART_16F_MASTER.c: 167: TXEN=1;
  4536  0E54  1698               	bsf	24,5	;volatile
  4537                           
  4538                           ;USART_16F_MASTER.c: 168: CREN=0;
  4539  0E55  1283               	bcf	3,5	;RP0=0, select bank0
  4540  0E56  1303               	bcf	3,6	;RP1=0, select bank0
  4541  0E57  1218               	bcf	24,4	;volatile
  4542                           
  4543                           ;USART_16F_MASTER.c: 169: CREN=1;
  4544  0E58  1618               	bsf	24,4	;volatile
  4545  0E59                     l120:	
  4546                           
  4547                           ;USART_16F_MASTER.c: 170: }
  4548                           ;USART_16F_MASTER.c: 172: if (FERR == 1)
  4549  0E59  1D18               	btfss	24,2	;volatile
  4550  0E5A  0008               	return
  4551                           
  4552                           ;USART_16F_MASTER.c: 173: {
  4553                           ;USART_16F_MASTER.c: 174: dummy=RCREG;
  4554  0E5B  081A               	movf	26,w	;volatile
  4555  0E5C  00F0               	movwf	??_clear_usart_errors
  4556  0E5D  0870               	movf	??_clear_usart_errors,w
  4557  0E5E  00CF               	movwf	_dummy
  4558                           
  4559                           ;USART_16F_MASTER.c: 175: TXEN=0;
  4560  0E5F  1683               	bsf	3,5	;RP0=1, select bank1
  4561  0E60  1303               	bcf	3,6	;RP1=0, select bank1
  4562  0E61  1298               	bcf	24,5	;volatile
  4563                           
  4564                           ;USART_16F_MASTER.c: 176: TXEN=1;
  4565  0E62  1698               	bsf	24,5	;volatile
  4566  0E63  0008               	return
  4567  0E64                     __end_of_clear_usart_errors:	
  4568                           
  4569                           	psect	text25
  4570  0082                     __ptext25:	
  4571 ;; *************** function _USART_Init *****************
  4572 ;; Defined at:
  4573 ;;		line 18 in file "..\Header Files\..\C Source Code\USART_16F_MASTER.c"
  4574 ;; Parameters:    Size  Location     Type
  4575 ;;		None
  4576 ;; Auto vars:     Size  Location     Type
  4577 ;;		None
  4578 ;; Return value:  Size  Location     Type
  4579 ;;		None               void
  4580 ;; Registers used:
  4581 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4582 ;; Tracked objects:
  4583 ;;		On entry : 0/0
  4584 ;;		On exit  : 0/0
  4585 ;;		Unchanged: 0/0
  4586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4587 ;;      Params:         0       0       0       0       0
  4588 ;;      Locals:         0       0       0       0       0
  4589 ;;      Temps:          0       0       0       0       0
  4590 ;;      Totals:         0       0       0       0       0
  4591 ;;Total ram usage:        0 bytes
  4592 ;; Hardware stack levels used:    1
  4593 ;; Hardware stack levels required when called:    1
  4594 ;; This function calls:
  4595 ;;		_Setup_Baud_Gen
  4596 ;; This function is called by:
  4597 ;;		_main
  4598 ;; This function uses a non-reentrant model
  4599 ;;
  4600                           
  4601                           
  4602                           ;psect for function _USART_Init
  4603  0082                     _USART_Init:	
  4604                           
  4605                           ;USART_16F_MASTER.c: 58: Setup_Baud_Gen(9600);
  4606                           
  4607                           ;incstack = 0
  4608                           ; Regs used in _USART_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4609  0082  3080               	movlw	128
  4610  0083  00F0               	movwf	?_Setup_Baud_Gen
  4611  0084  3025               	movlw	37
  4612  0085  00F1               	movwf	?_Setup_Baud_Gen+1
  4613  0086  120A  118A  20DF   	fcall	_Setup_Baud_Gen
  4614                           
  4615                           ;USART_16F_MASTER.c: 62: SYNC = 0;
  4616  0089  1683               	bsf	3,5	;RP0=1, select bank1
  4617  008A  1303               	bcf	3,6	;RP1=0, select bank1
  4618  008B  1218               	bcf	24,4	;volatile
  4619                           
  4620                           ;USART_16F_MASTER.c: 64: SPEN = 1;
  4621  008C  1283               	bcf	3,5	;RP0=0, select bank0
  4622  008D  1303               	bcf	3,6	;RP1=0, select bank0
  4623  008E  1798               	bsf	24,7	;volatile
  4624                           
  4625                           ;USART_16F_MASTER.c: 67: TXIE = 0;
  4626  008F  1683               	bsf	3,5	;RP0=1, select bank1
  4627  0090  1303               	bcf	3,6	;RP1=0, select bank1
  4628  0091  120C               	bcf	12,4	;volatile
  4629                           
  4630                           ;USART_16F_MASTER.c: 68: RCIE = 0;
  4631  0092  128C               	bcf	12,5	;volatile
  4632                           
  4633                           ;USART_16F_MASTER.c: 72: RX9=0;
  4634  0093  1283               	bcf	3,5	;RP0=0, select bank0
  4635  0094  1303               	bcf	3,6	;RP1=0, select bank0
  4636  0095  1318               	bcf	24,6	;volatile
  4637                           
  4638                           ;USART_16F_MASTER.c: 74: TX9=0;
  4639  0096  1683               	bsf	3,5	;RP0=1, select bank1
  4640  0097  1303               	bcf	3,6	;RP1=0, select bank1
  4641  0098  1318               	bcf	24,6	;volatile
  4642                           
  4643                           ;USART_16F_MASTER.c: 78: CREN = 1;
  4644  0099  1283               	bcf	3,5	;RP0=0, select bank0
  4645  009A  1303               	bcf	3,6	;RP1=0, select bank0
  4646  009B  1618               	bsf	24,4	;volatile
  4647                           
  4648                           ;USART_16F_MASTER.c: 80: TXEN = 1;
  4649  009C  1683               	bsf	3,5	;RP0=1, select bank1
  4650  009D  1303               	bcf	3,6	;RP1=0, select bank1
  4651  009E  1698               	bsf	24,5	;volatile
  4652  009F  0008               	return
  4653  00A0                     __end_of_USART_Init:	
  4654                           
  4655                           	psect	text26
  4656  00DF                     __ptext26:	
  4657 ;; *************** function _Setup_Baud_Gen *****************
  4658 ;; Defined at:
  4659 ;;		line 85 in file "..\Header Files\..\C Source Code\USART_16F_MASTER.c"
  4660 ;; Parameters:    Size  Location     Type
  4661 ;;  BAUD            2    0[COMMON] int 
  4662 ;; Auto vars:     Size  Location     Type
  4663 ;;		None
  4664 ;; Return value:  Size  Location     Type
  4665 ;;		None               void
  4666 ;; Registers used:
  4667 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4668 ;; Tracked objects:
  4669 ;;		On entry : 0/0
  4670 ;;		On exit  : 0/0
  4671 ;;		Unchanged: 0/0
  4672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4673 ;;      Params:         2       0       0       0       0
  4674 ;;      Locals:         0       0       0       0       0
  4675 ;;      Temps:          0       0       0       0       0
  4676 ;;      Totals:         2       0       0       0       0
  4677 ;;Total ram usage:        2 bytes
  4678 ;; Hardware stack levels used:    1
  4679 ;; This function calls:
  4680 ;;		Nothing
  4681 ;; This function is called by:
  4682 ;;		_USART_Init
  4683 ;; This function uses a non-reentrant model
  4684 ;;
  4685                           
  4686                           
  4687                           ;psect for function _Setup_Baud_Gen
  4688  00DF                     _Setup_Baud_Gen:	
  4689                           
  4690                           ;USART_16F_MASTER.c: 87: {
  4691                           ;USART_16F_MASTER.c: 89: BRGH = 1;
  4692                           
  4693                           ;incstack = 0
  4694                           ; Regs used in _Setup_Baud_Gen: [wreg-fsr0h+status,2+status,0]
  4695  00DF  1683               	bsf	3,5	;RP0=1, select bank1
  4696  00E0  1303               	bcf	3,6	;RP1=0, select bank1
  4697  00E1  1518               	bsf	24,2	;volatile
  4698                           
  4699                           ;USART_16F_MASTER.c: 90: BRG16 = 0;
  4700  00E2  1683               	bsf	3,5	;RP0=1, select bank3
  4701  00E3  1703               	bsf	3,6	;RP1=1, select bank3
  4702  00E4  1187               	bcf	7,3	;volatile
  4703                           
  4704                           ;USART_16F_MASTER.c: 91: SPBRGH = 0;
  4705  00E5  1683               	bsf	3,5	;RP0=1, select bank1
  4706  00E6  1303               	bcf	3,6	;RP1=0, select bank1
  4707  00E7  019A               	clrf	26	;volatile
  4708                           
  4709                           ;USART_16F_MASTER.c: 93: switch(BAUD)
  4710  00E8  28FB               	goto	l1766
  4711  00E9                     l1752:	
  4712                           ;USART_16F_MASTER.c: 94: {
  4713                           ;USART_16F_MASTER.c: 95: case 1200: SPBRG = 207; break;
  4714                           
  4715  00E9  30CF               	movlw	207
  4716  00EA  0099               	movwf	25	;volatile
  4717  00EB  0008               	return
  4718  00EC                     l1754:	
  4719                           ;USART_16F_MASTER.c: 96: case 2400: SPBRG = 103; break;
  4720                           
  4721  00EC  3067               	movlw	103
  4722  00ED  0099               	movwf	25	;volatile
  4723  00EE  0008               	return
  4724  00EF                     l1756:	
  4725                           ;USART_16F_MASTER.c: 97: case 9600: SPBRG = 25; break;
  4726                           
  4727  00EF  3019               	movlw	25
  4728  00F0  0099               	movwf	25	;volatile
  4729  00F1  0008               	return
  4730  00F2                     l1758:	
  4731                           ;USART_16F_MASTER.c: 98: case 10417: SPBRG = 23; break;
  4732                           
  4733  00F2  3017               	movlw	23
  4734  00F3  0099               	movwf	25	;volatile
  4735  00F4  0008               	return
  4736  00F5                     l1760:	
  4737                           ;USART_16F_MASTER.c: 99: case 19200: SPBRG = 12; break;
  4738                           
  4739  00F5  300C               	movlw	12
  4740  00F6  0099               	movwf	25	;volatile
  4741  00F7  0008               	return
  4742  00F8                     l1762:	
  4743                           ;USART_16F_MASTER.c: 102: default: SPBRG = 25; break;
  4744                           
  4745  00F8  3019               	movlw	25
  4746  00F9  0099               	movwf	25	;volatile
  4747                           
  4748                           ;USART_16F_MASTER.c: 103: }
  4749  00FA  0008               	return
  4750  00FB                     l1766:	
  4751                           
  4752                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 5 sub-sw
      +                          itches
  4753                           ; Switch size 1, requested type "space"
  4754                           ; Number of cases is 5, Range of values is 4 to 75
  4755                           ; switch strategies available:
  4756                           ; Name         Instructions Cycles
  4757                           ; simple_byte           16     9 (average)
  4758                           ; direct_byte          227    11 (fixed)
  4759                           ; jumptable            263     9 (fixed)
  4760                           ;	Chosen strategy is simple_byte
  4761  00FB  0871               	movf	Setup_Baud_Gen@BAUD+1,w
  4762  00FC  3A04               	xorlw	4	; case 4
  4763  00FD  1903               	skipnz
  4764  00FE  290C               	goto	l2650
  4765  00FF  3A0D               	xorlw	13	; case 9
  4766  0100  1903               	skipnz
  4767  0101  2911               	goto	l2652
  4768  0102  3A2C               	xorlw	44	; case 37
  4769  0103  1903               	skipnz
  4770  0104  2916               	goto	l2654
  4771  0105  3A0D               	xorlw	13	; case 40
  4772  0106  1903               	skipnz
  4773  0107  291B               	goto	l2656
  4774  0108  3A63               	xorlw	99	; case 75
  4775  0109  1903               	skipnz
  4776  010A  2920               	goto	l2658
  4777  010B  28F8               	goto	l1762
  4778  010C                     l2650:	
  4779                           
  4780                           ; Switch size 1, requested type "space"
  4781                           ; Number of cases is 1, Range of values is 176 to 176
  4782                           ; switch strategies available:
  4783                           ; Name         Instructions Cycles
  4784                           ; simple_byte            4     3 (average)
  4785                           ; direct_byte           14    11 (fixed)
  4786                           ; jumptable            263     9 (fixed)
  4787                           ;	Chosen strategy is simple_byte
  4788  010C  0870               	movf	Setup_Baud_Gen@BAUD,w
  4789  010D  3AB0               	xorlw	176	; case 176
  4790  010E  1903               	skipnz
  4791  010F  28E9               	goto	l1752
  4792  0110  28F8               	goto	l1762
  4793  0111                     l2652:	
  4794                           
  4795                           ; Switch size 1, requested type "space"
  4796                           ; Number of cases is 1, Range of values is 96 to 96
  4797                           ; switch strategies available:
  4798                           ; Name         Instructions Cycles
  4799                           ; simple_byte            4     3 (average)
  4800                           ; direct_byte           14    11 (fixed)
  4801                           ; jumptable            263     9 (fixed)
  4802                           ;	Chosen strategy is simple_byte
  4803  0111  0870               	movf	Setup_Baud_Gen@BAUD,w
  4804  0112  3A60               	xorlw	96	; case 96
  4805  0113  1903               	skipnz
  4806  0114  28EC               	goto	l1754
  4807  0115  28F8               	goto	l1762
  4808  0116                     l2654:	
  4809                           
  4810                           ; Switch size 1, requested type "space"
  4811                           ; Number of cases is 1, Range of values is 128 to 128
  4812                           ; switch strategies available:
  4813                           ; Name         Instructions Cycles
  4814                           ; simple_byte            4     3 (average)
  4815                           ; direct_byte           14    11 (fixed)
  4816                           ; jumptable            263     9 (fixed)
  4817                           ;	Chosen strategy is simple_byte
  4818  0116  0870               	movf	Setup_Baud_Gen@BAUD,w
  4819  0117  3A80               	xorlw	128	; case 128
  4820  0118  1903               	skipnz
  4821  0119  28EF               	goto	l1756
  4822  011A  28F8               	goto	l1762
  4823  011B                     l2656:	
  4824                           
  4825                           ; Switch size 1, requested type "space"
  4826                           ; Number of cases is 1, Range of values is 177 to 177
  4827                           ; switch strategies available:
  4828                           ; Name         Instructions Cycles
  4829                           ; simple_byte            4     3 (average)
  4830                           ; direct_byte           14    11 (fixed)
  4831                           ; jumptable            263     9 (fixed)
  4832                           ;	Chosen strategy is simple_byte
  4833  011B  0870               	movf	Setup_Baud_Gen@BAUD,w
  4834  011C  3AB1               	xorlw	177	; case 177
  4835  011D  1903               	skipnz
  4836  011E  28F2               	goto	l1758
  4837  011F  28F8               	goto	l1762
  4838  0120                     l2658:	
  4839                           
  4840                           ; Switch size 1, requested type "space"
  4841                           ; Number of cases is 1, Range of values is 0 to 0
  4842                           ; switch strategies available:
  4843                           ; Name         Instructions Cycles
  4844                           ; simple_byte            4     3 (average)
  4845                           ; direct_byte           11     8 (fixed)
  4846                           ; jumptable            260     6 (fixed)
  4847                           ;	Chosen strategy is simple_byte
  4848  0120  0870               	movf	Setup_Baud_Gen@BAUD,w
  4849  0121  3A00               	xorlw	0	; case 0
  4850  0122  1903               	skipnz
  4851  0123  28F5               	goto	l1760
  4852  0124  28F8               	goto	l1762
  4853  0125  0008               	return
  4854  0126                     __end_of_Setup_Baud_Gen:	
  4855  007E                     btemp	set	126	;btemp
  4856  007E                     wtemp0	set	126


Data Sizes:
    Strings     101
    Constant    10
    Data        0
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     31      48
    BANK1            80     60      60
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    ?___lmul	unsigned long  size(1) Largest target is 0

    ?___lwdiv	unsigned int  size(1) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 0

    ?_memcpy	PTR void  size(1) Largest target is 9
		 -> setDestination@subbuff2(BANK0[9]), setDestination@subbuff(BANK0[9]), 

    ?_strtol	long  size(1) Largest target is 0

    ?_strlen	unsigned int  size(2) Largest target is 17
		 -> STR_15(CODE[8]), STR_14(CODE[10]), STR_13(CODE[10]), STR_12(CODE[15]), 
		 -> main@percentage(BANK1[7]), main@dBm(BANK1[7]), main@RSSI(BANK1[5]), main@mobile(BANK1[17]), 
		 -> main@broadcastNumber(BANK1[4]), main@sensor(BANK1[17]), STR_10(CODE[6]), STR_9(CODE[4]), 
		 -> STR_8(CODE[2]), setDestination@subbuff2(BANK0[9]), STR_7(CODE[5]), STR_6(CODE[2]), 
		 -> setDestination@subbuff(BANK0[9]), STR_5(CODE[5]), STR_4(CODE[6]), STR_3(CODE[6]), 
		 -> STR_1(CODE[6]), 

    strtol@endptr	PTR PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(1) Largest target is 3
		 -> getRSSI@RSSInum(BANK0[3]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_15(CODE[8]), STR_14(CODE[10]), STR_13(CODE[10]), STR_12(CODE[15]), 
		 -> main@percentage(BANK1[7]), main@dBm(BANK1[7]), main@RSSI(BANK1[5]), main@mobile(BANK1[17]), 
		 -> main@broadcastNumber(BANK1[4]), main@sensor(BANK1[17]), STR_10(CODE[6]), STR_9(CODE[4]), 
		 -> STR_8(CODE[2]), setDestination@subbuff2(BANK0[9]), STR_7(CODE[5]), STR_6(CODE[2]), 
		 -> setDestination@subbuff(BANK0[9]), STR_5(CODE[5]), STR_4(CODE[6]), STR_3(CODE[6]), 
		 -> STR_1(CODE[6]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_15(CODE[8]), STR_14(CODE[10]), STR_13(CODE[10]), STR_12(CODE[15]), 
		 -> main@percentage(BANK1[7]), main@dBm(BANK1[7]), main@RSSI(BANK1[5]), main@mobile(BANK1[17]), 
		 -> main@broadcastNumber(BANK1[4]), main@sensor(BANK1[17]), STR_10(CODE[6]), STR_9(CODE[4]), 
		 -> STR_8(CODE[2]), setDestination@subbuff2(BANK0[9]), STR_7(CODE[5]), STR_6(CODE[2]), 
		 -> setDestination@subbuff(BANK0[9]), STR_5(CODE[5]), STR_4(CODE[6]), STR_3(CODE[6]), 
		 -> STR_1(CODE[6]), 

    memcpy@d1	PTR void  size(1) Largest target is 9
		 -> setDestination@subbuff2(BANK0[9]), setDestination@subbuff(BANK0[9]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 9
		 -> setDestination@subbuff2(BANK0[9]), setDestination@subbuff(BANK0[9]), 

    memcpy@s1	PTR const void  size(1) Largest target is 17
		 -> STR_11(CODE[17]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_11(CODE[17]), 

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_2(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 2
		 -> getRSSI@dBmbuf(BANK0[2]), 

    ?_sprintf	int  size(1) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S180$_cp	PTR const unsigned char  size(1) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 0

    sp__memcpy	PTR void  size(1) Largest target is 9
		 -> setDestination@subbuff2(BANK0[9]), setDestination@subbuff(BANK0[9]), 

    setDestination@destination	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_11(CODE[17]), 

    getIdentification@result	PTR unsigned char  size(1) Largest target is 17
		 -> main@sensor(BANK1[17]), 

    getRSSI@percentage	PTR unsigned char  size(1) Largest target is 7
		 -> main@percentage(BANK1[7]), 

    getRSSI@dBm	PTR unsigned char  size(1) Largest target is 7
		 -> main@dBm(BANK1[7]), 

    getRSSI@RSSI	PTR unsigned char  size(1) Largest target is 5
		 -> main@RSSI(BANK1[5]), 

    send_USART_string@string	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_15(CODE[8]), STR_14(CODE[10]), STR_13(CODE[10]), STR_12(CODE[15]), 
		 -> main@percentage(BANK1[7]), main@dBm(BANK1[7]), main@RSSI(BANK1[5]), main@mobile(BANK1[17]), 
		 -> main@broadcastNumber(BANK1[4]), main@sensor(BANK1[17]), STR_10(CODE[6]), STR_9(CODE[4]), 
		 -> STR_8(CODE[2]), setDestination@subbuff2(BANK0[9]), STR_7(CODE[5]), STR_6(CODE[2]), 
		 -> setDestination@subbuff(BANK0[9]), STR_5(CODE[5]), STR_4(CODE[6]), STR_3(CODE[6]), 
		 -> STR_1(CODE[6]), 


Critical Paths under _main in COMMON

    _main->_enterCommandMode
    _exitCommandMode->_send_USART_string
    _enterCommandMode->_send_USART_string
    _setDestination->_send_USART_string
    _getIdentification->_send_USART_string
    _get_USART_char_timeout->_clear_usart_errors
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _strtol->___lmul
    _isalpha->_isupper
    _send_USART_string->_strlen
    _send_USART_char->_clear_usart_errors
    _get_USART_char->_clear_usart_errors
    _USART_Init->_Setup_Baud_Gen

Critical Paths under _main in BANK0

    _main->_getRSSI
    _getRSSI->_strtol
    _getRSSI->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                63    63      0    7299
                                             28 BANK0      3     3      0
                                              0 BANK1     60    60      0
                         _USART_Init
                     _get_USART_char
                    _send_USART_char
                  _send_USART_string
                        _flush_RCREG
                            _getRSSI
                  _getIdentification
                     _setDestination
                   _enterCommandMode
                    _exitCommandMode
                 _PIC_Initialization
 ---------------------------------------------------------------------------------
 (1) _PIC_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _exitCommandMode                                      2     2      0     270
                                             11 COMMON     2     2      0
                     _get_USART_char
                  _send_USART_string
                        _flush_RCREG
 ---------------------------------------------------------------------------------
 (1) _enterCommandMode                                     3     3      0     270
                                             11 COMMON     3     3      0
                     _get_USART_char
                  _send_USART_string
                        _flush_RCREG
 ---------------------------------------------------------------------------------
 (1) _setDestination                                      23    23      0     646
                                             11 COMMON     2     2      0
                                              0 BANK0     21    21      0
                     _get_USART_char
                  _send_USART_string
                        _flush_RCREG
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _memcpy                                               7     4      3     120
                                              0 COMMON     7     4      3
 ---------------------------------------------------------------------------------
 (1) _getIdentification                                   19    19      0    1134
                                             11 COMMON     2     2      0
                                              0 BANK0     17    17      0
             _get_USART_char_timeout
                  _send_USART_string
                        _flush_RCREG
 ---------------------------------------------------------------------------------
 (2) _get_USART_char_timeout                               2     2      0      46
                                              1 COMMON     2     2      0
                 _clear_usart_errors
 ---------------------------------------------------------------------------------
 (1) _getRSSI                                             13    11      2    4093
                                             15 BANK0     13    11      2
                     _get_USART_char
                  _send_USART_string
                        _flush_RCREG
                             _strtol
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             15    12      3     798
                                              0 BANK0     15    12      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     159
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     162
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _strtol                                              15    11      4    1156
                                              0 BANK0     15    11      4
                             ___lmul
                            _isspace
                            _isalpha
                            _toupper
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _toupper                                              2     2      0      67
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _isalpha                                              2     2      0     158
                                              2 COMMON     2     2      0
                            _isupper
 ---------------------------------------------------------------------------------
 (4) _isupper                                              2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _isspace                                              2     2      0      90
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              13     5      8      92
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (2) _flush_RCREG                                          1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _send_USART_string                                    5     3      2     202
                                              6 COMMON     5     3      2
                    _send_USART_char
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _strlen                                               6     4      2      90
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (3) _send_USART_char                                      2     2      0      22
                                              1 COMMON     2     2      0
                 _clear_usart_errors
 ---------------------------------------------------------------------------------
 (2) _get_USART_char                                       0     0      0       0
                 _clear_usart_errors
 ---------------------------------------------------------------------------------
 (4) _clear_usart_errors                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                           0     0      0      22
                     _Setup_Baud_Gen
 ---------------------------------------------------------------------------------
 (2) _Setup_Baud_Gen                                       2     0      2      22
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USART_Init
     _Setup_Baud_Gen
   _get_USART_char
     _clear_usart_errors
   _send_USART_char
     _clear_usart_errors
   _send_USART_string
     _send_USART_char
       _clear_usart_errors
     _strlen
   _flush_RCREG
   _getRSSI
     _get_USART_char
       _clear_usart_errors
     _send_USART_string
       _send_USART_char
         _clear_usart_errors
       _strlen
     _flush_RCREG
     _strtol
       ___lmul
       _isspace
       _isalpha
         _isupper
       _toupper
       _isdigit
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
   _getIdentification
     _get_USART_char_timeout
       _clear_usart_errors
     _send_USART_string
       _send_USART_char
         _clear_usart_errors
       _strlen
     _flush_RCREG
   _setDestination
     _get_USART_char
       _clear_usart_errors
     _send_USART_string
       _send_USART_char
         _clear_usart_errors
       _strlen
     _flush_RCREG
     _memcpy
   _enterCommandMode
     _get_USART_char
       _clear_usart_errors
     _send_USART_string
       _send_USART_char
         _clear_usart_errors
       _strlen
     _flush_RCREG
   _exitCommandMode
     _get_USART_char
       _clear_usart_errors
     _send_USART_string
       _send_USART_char
         _clear_usart_errors
       _strlen
     _flush_RCREG
   _PIC_Initialization

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       4       2        0.0%
ABS                  0      0      7A       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1F      30       5       60.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     3C      3C       7       75.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      7E      12        0.0%


Microchip Technology PIC Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Sat Feb 01 23:03:52 2014

                                pc 0002                                 l98 0DCF  
                               fsr 0004                                l103 0F0A  
                              l120 0E59                                l109 0E3A  
                              l153 0310                                l162 0375  
                              l673 0397                                _GIE 005F  
                              _RX9 00C6                                _TX9 04C6  
                              fsr0 0004                                indf 0000  
                   _setDestination 0126                       __CFG_LVP$OFF 0000  
         __end_of_enterCommandMode 0FC2                        main@command 00D2  
                             l2012 0E37                               l2022 0F2A  
                             l2030 03AF                               l2008 0E31  
                             l2104 04A1                               l2042 03C1  
                             l2122 0211                               l2044 03C5  
                             l2132 0228                               l2116 01FB  
                             l2062 03F0                               l2150 025E  
                             l2080 0426                               l2072 0407  
                             l2048 03D0                               l2144 024F  
                             l2136 022E                               l2160 01DB  
                             l2312 02F8                               l2400 0163  
                             l2058 03E8                               l2162 02A8  
                             l2218 06A8                               l2322 030C  
                             l2306 02E2                               l2084 0434  
                             l2076 040F                               l2068 03FF  
                             l2228 06E0                               l2332 031B  
                             l2094 0482                               l2158 0262  
                             l2238 0718                               l2350 0347  
                             l2326 0316                               l2318 02FE  
                             l2430 01CA                               l2406 0179  
                             l2510 0525                               l1800 0EAB  
                             l2248 0750                               l2184 0601  
                             l2424 01B4                               l2504 051F  
                             l1802 0EBE                               l2098 048E  
                             l2258 0788                               l2178 05E8  
                             l2370 037B                               l2362 0363  
                             l2338 0331                               l2268 07C0  
                             l2356 035D                               l2292 02C7  
                             l2516 0541                               l1910 0DF4  
                             l2366 0371                               l2286 02B5  
                             l1760 00F5                               l1752 00E9  
                             l1840 00A8                               l1816 0ED7  
                             l2650 010C                               l1762 00F8  
                             l1754 00EC                               l1922 0DE6  
                             l2652 0111                               l1756 00EF  
                             l1844 00BE                               l2654 0116  
                             l1758 00F2                               l1766 00FB  
                             l1870 0FEE                               l1862 0FCA  
                             l2486 04E9                               l2656 011B  
                             l1864 0FD8                               l2658 0120  
                             l1874 0FF9                               l1962 0F10  
                             l1970 0F27                               l2498 0503  
                             l1886 0E23                               l1990 0F6C  
                             l1888 0E24                               l1898 0E12  
                             l1994 0F7A                               l1988 0F5E  
                             l1998 0F85                               STR_1 0059  
                             STR_2 007F                               STR_3 005F  
                             STR_4 0065                               STR_5 0071  
                             STR_6 005D                               STR_7 0076  
                             STR_8 005D                               STR_9 007B  
                             _BRGH 04C2                               _CREN 00C4  
                             _FERR 00C2                               u1225 0FCD  
                             u1155 0EE3                               u1245 0FD9  
                             u1405 0F25                               u1255 0FE5  
                             u1185 00C0                               u1265 0FEF  
                             u1515 0F3E                               u1195 00C8  
                             u1435 0F61                               u2237 04BD  
                             u1455 0F72                               u2247 04E2  
                             u1465 0F7B                               u1385 0F08  
                             u2257 0F95                               u1650 0463  
                             u1651 0464                               u1715 0245  
                             u2267 0FA7                               u1652 0469  
                             u1653 046A                               u1645 043B  
                             u2277 01CE                               u2287 0E47  
                             _RCIE 0465                               _RCIF 0065  
                             _OERR 00C1                               _SPEN 00C7  
                             _TXIE 0464                               _TXEN 04C5  
                             _TXIF 0064                               _SYNC 04C4  
                             _main 04AA                               btemp 007E  
                             start 0000                      __CFG_IESO$OFF 0000  
                     ?_flush_RCREG 0070                    _exitCommandMode 0E81  
                            ?_main 0070                              STR_10 006B  
                            STR_11 001D                              STR_12 002E  
                            STR_13 003D                              STR_14 0047  
                            STR_15 0051                              _BRG16 0C3B  
                    __CFG_WDTE$OFF 0000                              _ANSEL 0188  
                  __end_of___lwdiv 1000             __end_of_setDestination 01D4  
                  __end_of___lwmod 0F8C                              _RCREG 001A  
                     main@iter_154 00DB                              _SPBRG 0099  
                            _PORTA 0005                              _PORTB 0006  
                            _PORTC 0007                              _TRISA 0085  
                            _TRISB 0086                              _TRISC 0087  
      __size_of_clear_usart_errors 0017                              _TXREG 0019  
               Setup_Baud_Gen@BAUD 0070                    __end_of_getRSSI 07F5  
              ___lmul@multiplicand 0074                     __CFG_FCMEN$OFF 0000  
                  __end_of_dpowers 001D                              _dummy 004F  
                  __end_of_isalpha 0E39                    __end_of_isdigit 0DF6  
                  __end_of_isspace 0E26                     __CFG_BOREN$OFF 0000  
                  __end_of_isupper 0DE8                              pclath 000A  
                  _send_USART_char 0E39        __size_of_PIC_Initialization 001D  
                            status 0003                              wtemp0 007E  
                  __end_of_sprintf 02AD                    __end_of_toupper 0E14  
                      ?_USART_Init 0070                     __CFG_MCLRE$OFF 0000  
                  __initialization 07F5                       __end_of_main 05C3  
                           ??_main 003C                    ?_setDestination 0070  
                           _ANSELH 0189                             _SPBRGH 009A  
            setDestination@subbuff 0020                             _WDTCON 0105  
          __end_of_exitCommandMode 0EA5                             ___lmul 00A0  
                        ??___lwdiv 0074                          ??___lwmod 007C  
                           _memcpy 0ECE                          ??_getRSSI 0031  
                           _strlen 0EA5                             _strtol 0394  
          __size_of_Setup_Baud_Gen 0047                          ??_isalpha 0072  
                        ??_isdigit 0070            send_USART_string@string 0076  
                        ??_isspace 0070                          ??_isupper 0070  
          __end_of_send_USART_char 0E4D                __size_of_USART_Init 001E  
                        ??_sprintf 0023                          ??_toupper 0070  
          __size_of_get_USART_char 000B            __end_of__initialization 07FC  
                   __pcstackCOMMON 0070          setDestination@destination 0032  
             __size_of_flush_RCREG 000F                  ?_enterCommandMode 0070  
                       __pbssBANK0 003F                 ??_enterCommandMode 007B  
         ??_get_USART_char_timeout 0071                   ?_exitCommandMode 0070  
                       __pmaintext 04AA                            ?___lmul 0070  
           setDestination@iter_140 0034                            ?_memcpy 0070  
                   ___lmul@product 0079                  _getIdentification 02AD  
                          ?_strlen 0070                            ?_strtol 0020  
             enterCommandMode@iter 007D                 ?_getIdentification 0070  
                 ?_send_USART_char 0070             setDestination@subbuff2 0029  
                          _PSTRCON 009D                ??_getIdentification 007B  
                       __stringtab 0003                       ??_USART_Init 0072  
            getIdentification@iter 0029              getIdentification@temp 0020  
                   main@percentage 00D3                    __size_of___lmul 003F  
                 ??_setDestination 007B                            ___lwdiv 0FC2  
                          ___lwmod 0F58          __end_of_getIdentification 0394  
                  __size_of_memcpy 002D                            _getRSSI 05C3  
       __end_of_clear_usart_errors 0E64                            __ptext1 0E64  
                          __ptext2 0E81                            __ptext3 0F8C  
                          __ptext4 0126                            __ptext5 0ECE  
                          __ptext6 02AD                            __ptext7 0EFB  
                          __ptext8 05C3                            __ptext9 01D4  
                   _Setup_Baud_Gen 00DF                    __size_of_strlen 0029  
                  __size_of_strtol 0116                            _dpowers 0013  
                          _isalpha 0E26                            _isdigit 0DE8  
                          _isspace 0E14                            _isupper 0DDA  
                       getRSSI@dBm 002F                 __end_of_USART_Init 00A0  
                          main@dBm 00C2                            _sprintf 01D4  
                          clrloop0 0DC8                            _toupper 0E05  
       __end_of_PIC_Initialization 0E81                     _get_USART_char 0DCF  
             end_of_initialization 07FC                            memcpy@d 0075  
                          memcpy@n 0071                            memcpy@s 0076  
  __size_of_get_USART_char_timeout 002E                      getRSSI@dBmNum 003A  
                    getRSSI@dBmbuf 0036             __end_of_Setup_Baud_Gen 0126  
                          strlen@s 0070                  _send_USART_string 0F29  
                          strtol@a 0029                            strtol@c 002E  
                          strtol@s 002D                 ?_send_USART_string 0076  
                     strtol@endptr 0020             __end_of_get_USART_char 0DDA  
              ??_send_USART_string 0078                         main@mobile 00B1  
                       main@sensor 00A0                       _BYTES_BUFFER 003F  
        __end_of_send_USART_string 0F58         __size_of_getIdentification 00E7  
                   __end_of___lmul 00DF                    ?_Setup_Baud_Gen 0070  
                   __end_of_memcpy 0EFB              send_USART_string@iter 007A  
           _get_USART_char_timeout 0EFB                     __end_of_strlen 0ECE  
                   __end_of_strtol 04AA                start_initialization 07F5  
                  ?_get_USART_char 0070                main@broadcastNumber 00CE  
         __CFG_FOSC$INTRC_NOCLKOUT 0000                      ??_flush_RCREG 0070  
get_USART_char_timeout@timeout_int 0071            getIdentification@offset 0028  
                         ??___lmul 0078          __size_of_enterCommandMode 0036  
          getIdentification@result 002C                           ??_memcpy 0073  
                         ??_strlen 0072                           ??_strtol 0024  
                    __pcstackBANK0 0020                      __pcstackBANK1 00A0  
              __end_of__stringdata 0082                 setDestination@iter 0033  
                      sprintf@_val 0029                        sprintf@flag 0027  
                      sprintf@prec 0028                   ___lwdiv@dividend 0072  
       __size_of_send_USART_string 002F                           ?___lwdiv 0070  
                         ?___lwmod 0078                __end_of_flush_RCREG 0E05  
                         ?_getRSSI 002F           __size_of_exitCommandMode 0024  
                        __pstrings 0003                           ?_isalpha 0070  
                         ?_isdigit 0070                           ?_isspace 0070  
                         ?_isupper 0070                   ___lwdiv@quotient 0075  
                         ?_sprintf 0020                           ?_toupper 0070  
               _clear_usart_errors 0E4D           send_USART_char@character 0072  
         __size_of_send_USART_char 0014                          clear_ram0 0DC7  
              ?_clear_usart_errors 0070                 _PIC_Initialization 0E64  
              ?_PIC_Initialization 0070                        __stringbase 0012  
                      __stringdata 001D               ??_clear_usart_errors 0070  
                ___lmul@multiplier 0070               ??_PIC_Initialization 0070  
                      _flush_RCREG 0DF6                   ??_Setup_Baud_Gen 0072  
                 _enterCommandMode 0F8C                exitCommandMode@iter 007C  
                 __size_of___lwdiv 003E            ?_get_USART_char_timeout 0070  
                 __size_of___lwmod 0034                        _isalpha$466 0072  
               __end_of__stringtab 0013                        _isdigit$469 0070  
                 __size_of_getRSSI 0232                   ??_get_USART_char 0071  
                 __size_of_isalpha 0013                   __size_of_isdigit 000E  
                  ___lwdiv@divisor 0070            __size_of_setDestination 00AE  
                ??_exitCommandMode 007B                   __size_of_isspace 0012  
                  ___lwdiv@counter 0077                           __ptext10 0F58  
                         __ptext11 0FC2                           __ptext20 0F29  
                         __ptext12 0394                           __ptext21 0EA5  
                         __ptext13 0DE8                           __ptext22 0E39  
                         __ptext14 0E05                           __ptext23 0DCF  
                         __ptext15 0E26                           __ptext24 0E4D  
                         __ptext16 0DDA                           __ptext25 0082  
                         __ptext17 0E14                           __ptext26 00DF  
                         __ptext18 00A0                           __ptext19 0DF6  
                 __size_of_isupper 000E                   __size_of_sprintf 00D9  
                 __size_of_toupper 000F                      __size_of_main 0119  
                      getRSSI@RSSI 0039                        getRSSI@iter 0038  
                ??_send_USART_char 0071                         strtol@base 0021  
   __end_of_get_USART_char_timeout 0F29                           main@RSSI 00C9  
                       strtol@sign 0028                           main@iter 00DA  
                getRSSI@percentage 0030                        _isspace$472 0070  
                         memcpy@d1 0074                           memcpy@s1 0070  
                         isalpha@c 0073                           isdigit@c 0071  
                        sprintf@ap 0026                          sprintf@sp 002D  
                      _isupper$475 0070                   ___lwmod@dividend 007A  
                         isspace@c 0071                           isupper@c 0071  
                        stringcode 000D                     getRSSI@RSSInum 0033  
                       _OPTION_REG 0081                           sprintf@c 002E  
                         sprintf@f 0020                    ___lwmod@divisor 0078  
                         strlen@cp 0074                    ___lwmod@counter 007D  
                         stringdir 000D                           toupper@c 0071  
                         stringtab 0003                         _USART_Init 0082  
        getIdentification@iter_130 0030          getIdentification@iter_124 002A  
        getIdentification@iter_125 002D          getIdentification@iter_126 002E  
        getIdentification@iter_128 002B          getIdentification@iter_129 002F  
