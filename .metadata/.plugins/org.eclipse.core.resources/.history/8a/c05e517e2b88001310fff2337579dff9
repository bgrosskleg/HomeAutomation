package controller;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.URL;

import javax.swing.JApplet;
import javax.swing.event.EventListenerList;

import subscribers.MainControllerSubscriber;
import model.CurrentModel;

public class ServerController 
{
	private static EventListenerList subscriberList = new EventListenerList();
	
	private static JApplet application;
	
	private static CurrentModel CM;
	
	private static String currentTool;
	
	private static URL codebase;
	private static ServerSocket serverSocket;
	private static Socket socket;
    private static String host;
    private static InetAddress address;
    private static int serverPort = 65000;

    private static PrintWriter outToClient;
    private static BufferedReader inFromClient;
    private static ObjectOutputStream oos;
    private static ObjectInputStream ois;
    
    //private final static String modelPath = "C:/Users/Brian Grosskleg/Desktop/model.ser";
    private static String modelPath;
   	
    public static void initializeServer()
    {
	    try 
	    {
	    	try 
	    	{
				ServerController.setServerSocket(new ServerSocket(ServerController.getServerPort()));
			} 
	    	catch (Exception e1) 
	    	{
				System.err.println("Failure creating server socket!");
				e1.printStackTrace();
				return;
			}
	    	
	        System.out.println("TrackingGUIServer listening on port: " + ServerController.getServerPort());
	        
	    	
	    	System.out.println("Initializing socket...");
	    	System.out.println("Waiting for request from applet...");
	        socket = serverSocket.accept();
	        
	        //socket.get
	        
	        outToClient = new PrintWriter(socket.getOutputStream(), true);
	        inFromClient = new BufferedReader(new InputStreamReader(socket.getInputStream()));
	        oos = new ObjectOutputStream(socket.getOutputStream());
	        ois = new ObjectInputStream(socket.getInputStream());
	        System.out.println("Initializing socket complete.");
	    } 
	    catch (java.io.IOException e) 
	    {
	        System.err.println("Could not initialize socket.");
	    }   
    }
    
		
    //REFERENCE TO APPLICATION***********************************
	public static JApplet getApplication() {
		return application;
	}

	public static void setApplication(JApplet application) {
		ServerController.application = application;
	}
	
	
	//CURRENT MODEL**********************************************
	public static CurrentModel getCM() {
		return CM;
	}

	public static void setCM(CurrentModel cM) 
	{
		CM = cM;
		//CM.currentModelChanged();
	}
	
	
	
	//CURRENT TOOL***********************************************
	public static String getCurrentTool() {
		return currentTool;
	}

	public static void setCurrentTool(String currentTool) {
		ServerController.currentTool = currentTool;
		serverControllerChanged();
	}
	
	
	
	//NETWORKING PARAMETERS*******************************************************
	
	//Codebase
	public static URL getCodebase() {
		return codebase;
	}

	public static void setCodebase(URL url) {
		ServerController.codebase = url;
	}

	//Client port number
	public static int getServerPort() {
		return serverPort;
	}

	//Socket and ServerSocket
	public static Socket getSocket() {
		return socket;
	}
	
	public static void setServerSocket(ServerSocket ss){
		ServerController.serverSocket = ss;
	}

	public static void setSocket(Socket socket) {
		ServerController.socket = socket;
		serverControllerChanged();
	}

	//Host name
	public static String getHost() {
		return host;
	}

	public static void setHost(String host) {
		ServerController.host = host;
		serverControllerChanged();
	}

	//Internet address
	public static InetAddress getAddress() {
		return address;
	}

	public static void setAddress(InetAddress address) {
		ServerController.address = address;
		serverControllerChanged();
	}			
	
	//Input/output TCP Streams
	public static PrintWriter getOutToClient() {
		return outToClient;
	}

	public static BufferedReader getInFromClient() {
		return inFromClient;
	}
	
	public static ObjectOutputStream getOOS() {
		return oos;
	}

	public static ObjectInputStream getOIS() {
		return ois;
	}
	
	//Model path
	public static String getModelPath() {
		return ServerController.modelPath;
	}

	//SUBSCRIBERS************************************************

	


	//Add subscribers
	public static void addMainControllerSubscriber(MainControllerSubscriber subscriber)
	{
		subscriberList.add(MainControllerSubscriber.class, subscriber);
	}

	//Remove subscriber
	public static void removeMainControllerSubscriber(MainControllerSubscriber subscriber)
	{
		subscriberList.remove(MainControllerSubscriber.class, subscriber);
	}

	public static void serverControllerChanged()
	{
		//Notify Listeners
		Object[] subscribers = subscriberList.getListenerList();
		for (int i = 0; i < subscribers.length; i = i+2) {
			if (subscribers[i] == MainControllerSubscriber.class) {
				((MainControllerSubscriber) subscribers[i+1]).mainControllerChanged();
			}
		}
	}	
}
